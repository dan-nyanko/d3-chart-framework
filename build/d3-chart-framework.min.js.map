{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///d3-chart-framework.min.js","webpack:///webpack/bootstrap 175947d98250fde49763","webpack:///./src/index.js","webpack:///./src/Axes.js","webpack:///./src/Grid.js","webpack:///external \"d3\"","webpack:///external \"underscore\"","webpack:///external \"moment\"","webpack:///./src/Errors.js","webpack:///./src/groups/Group.js","webpack:///./src/nodes/Node.js","webpack:///./src/groups/LineGroup.js","webpack:///./src/groups/NodeGroup.js","webpack:///./src/nodes/LineNode.js","webpack:///./src/nodes/RectNode.js","webpack:///./src/nodes/SegmentNode.js","webpack:///./src/Chart.js","webpack:///./src/Tooltip.js","webpack:///./src/Zoom.js","webpack:///./src/ScatterPlot.js","webpack:///./src/LineChart.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_Axes","enumerable","get","_Errors","InvalidNodeError","InvalidGroupError","_Grid","_Group","_LineGroup","_NodeGroup","_Node","_LineNode","_RectNode","_SegmentNode","_Chart","_ScatterPlot","_LineChart","_Tooltip","_Zoom","_classCallCheck","instance","Constructor","TypeError","getDatetimeUnit","min","max","diff","unit","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","key","protoProps","staticProps","prototype","_Grid2","d3","_","moment","Axes","chart","options","x","title","type","y","grid","filter","initialized","useAutoPadding","initialMinMax","currentMinMax","draw","xDomain","yDomain","_this","xScale","scaleTime","domain","range","getWidth","nice","scaleLinear","xAxis","axisBottom","scale","ticks","tickFormat","timeFormat","formatDate","xGroup","container","append","attr","margins","left","getHeight","selectAll","style","yScale","yAxis","axisLeft","yGroup","padding","xLabel","width","right","bottom","text","yLabel","height","top","data","_this2","xMin","xMax","x1","pluck","x2","minDatetime","maxDatetime","isNaN","minNumeric","maxNumeric","yMin","yMax","addFilter","d","Date","getTime","y1","y2","hasOwnProperty","newMinMax","shouldSetDomain","remove","setDomain","zoomArea","trans","transition","duration","asDays","Math","floor","l","String","split","pow","add","valueOf","subtract","Grid","axes","plot","init","xGrid","tickSize","insert","yGrid","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_Error","message","message_","getPrototypeOf","Error","_Error2","genId","prefix","random","toString","substr","_Node2","Group","onEnter","bind","onUpdate","onExit","nodes_","values","node","group","select","document","createElementNS","namespaces","svg","update","removeLayer","nodes","Node","meta","o","_Group2","_Group3","LineGroup","_ret","s","w","defaultGenerator","line","generator","filtered","applyFilters","getNodes","path","datum","exit","enter","detached","each","NodeGroup","_Node3","LineNode","r","fill","circle","on","tooltip","mouseover","event","pageX","pageY","mouseout","MINIMUM_MARKER_WIDTH","MINIMUM_MARKER_HEIGHT","RectNode","h","f","rect","_d","_d2","_underscore","_underscore2","MINIMUM_LINE_STROKE","MINIMUM_CIRCLE_RADIUS","MINIMUM_LINE_THRESHOLD","SegmentNode","orderedPair","linePairs","lineDistance","distance","totalRange","linePercentage","startPoint","filteredOrderedPair","start","radius","ceil","endPoint","end","pairs","sqrt","abs","segments","groups","segmentsByHeightAndCumulative","groupBy","segment","cumulative","keys","forEach","sort","a","b","points","lastIdx","lastPoint","groupName","push","_Axes2","_Tooltip2","_Zoom2","MINIMUM_CHART_HEIGHT","Chart","drawn","filters","groups_","setDimensions","containerID","viewBoxWidth","viewBoxHeight","svgContainerClass","zoomEnabled","zoom","getElementById","offsetWidth","getGroupsNodes","Array","setInitialMinMax","shouldSetInitialMinMax","mergeGroups","getGroupsSize","showWarn","defaultGroup","size","removeWarn","filters_","valid","keysLen","warn","resizeHandler","shouldFilter","getGroups","reduce","prev","nextObj","assign","_domain","prevArr","concat","name","fn","reset","Tooltip","tooltipOpts","opacity","template","element","html","box","getBoundingClientRect","window","innerWidth","MINIMUM_ZOOM_THRESHOLD","Zoom","bandPos","drag","zoomGroup","zoomBand","zoomOverlay","isZoomed","pos","mouse","dragStart","ondrag","zoomX","zoomY","ondragend","invert","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getter","_Chart2","_Chart3","_NodeGroup2","ScatterPlot","resizeEnabled","resize","debounce","addEventListener","find","g","addNode","notMerged","addedNewGroup","k","idx","addGroup","indexOf","splice","n","removeGroup","removeEventListener","_LineGroup2","LineChart"],"mappings":"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","file":"d3-chart-framework.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"), require(\"underscore\"), require(\"moment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"d3-chart-framework\", [\"d3\", \"underscore\", \"moment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"d3-chart-framework\"] = factory(require(\"d3\"), require(\"underscore\"), require(\"moment\"));\n\telse\n\t\troot[\"d3-chart-framework\"] = factory(root[\"d3\"], root[\"underscore\"], root[\"moment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"), require(\"underscore\"), require(\"moment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"d3-chart-framework\", [\"d3\", \"underscore\", \"moment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"d3-chart-framework\"] = factory(require(\"d3\"), require(\"underscore\"), require(\"moment\"));\n\telse\n\t\troot[\"d3-chart-framework\"] = factory(root[\"d3\"], root[\"underscore\"], root[\"moment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Axes = __webpack_require__(1);\n\t\n\tObject.defineProperty(exports, 'Axes', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Axes).default;\n\t  }\n\t});\n\t\n\tvar _Errors = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'InvalidNodeError', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _Errors.InvalidNodeError;\n\t  }\n\t});\n\tObject.defineProperty(exports, 'InvalidGroupError', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _Errors.InvalidGroupError;\n\t  }\n\t});\n\t\n\tvar _Grid = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'Grid', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Grid).default;\n\t  }\n\t});\n\t\n\tvar _Group = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'Group', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Group).default;\n\t  }\n\t});\n\t\n\tvar _LineGroup = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'LineGroup', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_LineGroup).default;\n\t  }\n\t});\n\t\n\tvar _NodeGroup = __webpack_require__(10);\n\t\n\tObject.defineProperty(exports, 'NodeGroup', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_NodeGroup).default;\n\t  }\n\t});\n\t\n\tvar _Node = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'Node', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Node).default;\n\t  }\n\t});\n\t\n\tvar _LineNode = __webpack_require__(11);\n\t\n\tObject.defineProperty(exports, 'LineNode', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_LineNode).default;\n\t  }\n\t});\n\t\n\tvar _RectNode = __webpack_require__(12);\n\t\n\tObject.defineProperty(exports, 'RectNode', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_RectNode).default;\n\t  }\n\t});\n\t\n\tvar _SegmentNode = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'SegmentNode', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_SegmentNode).default;\n\t  }\n\t});\n\t\n\tvar _Chart = __webpack_require__(14);\n\t\n\tObject.defineProperty(exports, 'Plot', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Chart).default;\n\t  }\n\t});\n\t\n\tvar _ScatterPlot = __webpack_require__(17);\n\t\n\tObject.defineProperty(exports, 'ScatterPlot', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_ScatterPlot).default;\n\t  }\n\t});\n\t\n\tvar _LineChart = __webpack_require__(18);\n\t\n\tObject.defineProperty(exports, 'LineChart', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_LineChart).default;\n\t  }\n\t});\n\t\n\tvar _Tooltip = __webpack_require__(15);\n\t\n\tObject.defineProperty(exports, 'Tooltip', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Tooltip).default;\n\t  }\n\t});\n\t\n\tvar _Zoom = __webpack_require__(16);\n\t\n\tObject.defineProperty(exports, 'Zoom', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Zoom).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Grid = __webpack_require__(2);\n\t\n\tvar _Grid2 = _interopRequireDefault(_Grid);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\tvar moment = __webpack_require__(5);\n\t\n\t/*\n\t* getDatetimeUnit - determine the unit of time for padding the axis\n\t* @param {object} min, the min moment datetime object\n\t* @param {object} max, the max moment datetime object\n\t* @return {string} the datetime unit {day, week, month}\n\t*/\n\tfunction getDatetimeUnit(min, max) {\n\t  var diff = max.diff(min, 'days');\n\t  var unit = 'month';\n\t  if (diff <= 14) {\n\t    unit = 'day';\n\t  } else if (diff > 14 && diff <= 183) {\n\t    unit = 'week';\n\t  }\n\t  return unit;\n\t}\n\t\n\tvar Axes = function () {\n\t  /*\n\t  * Axes\n\t  * constructs 2d cartesian axes, appends to the container SVG element of the chart\n\t  * @param {object} chart, the chart to append the axis\n\t  * @param {object} options, the properties for the axis\n\t  * @param {boolean} grid, should the grid be displayed?\n\t  * X axis properties\n\t  * @param {object} options.axes.x, the properties for x axis\n\t  * @param {string} options.axes.x.title, the title of the x axis\n\t  * @param {string} options.axes.x.type, the datatype of the x axis {numeric, datetime}\n\t  * Y axis properties\n\t  * @param {object} options.axes.y, the properties for y axis\n\t  * @param {string} options.axes.y.title, the title of the y axis\n\t  * @param {string} options.axes.y.type, the datatype of the y axis {numeric, datetime}\n\t  * @returns {object} this, returns self\n\t  * example usage:\n\t  *  with an instance of a chart:\n\t  ```\n\t  axes = new Axes(plot, {\n\t    axes: {\n\t      grid: true,\n\t      x: {\n\t        title: 'Time',\n\t        type: 'datetime',\n\t        minMax: [1443371126, 1474993537]\n\t      },\n\t      y: {\n\t        title: 'Incidents',\n\t        type: 'numeric',\n\t        minMax: [0, 100]\n\t      },\n\t    }\n\t  })\n\t  ```\n\t  */\n\t  function Axes(chart, options) {\n\t    _classCallCheck(this, Axes);\n\t\n\t    this.chart = chart;\n\t    this.options = options || { x: { title: 'x', type: 'numeric' }, y: { title: 'y', type: 'numeric' }, grid: true, filter: true };\n\t    this.initialized = false;\n\t    this.useAutoPadding = options.useAutoPadding || false;\n\t    this.initialMinMax = [[0, 0], [0, 0]];\n\t    this.currentMinMax = [[0, 0], [0, 0]];\n\t    this.draw();\n\t  }\n\t\n\t  /*\n\t  * init - initialize the plot x,y axes\n\t  * @param {array} xDomain, the zoom xDomain or undefined\n\t  * @param {array} yDomain, the zoom yDomain or undefined\n\t  */\n\t\n\t\n\t  _createClass(Axes, [{\n\t    key: 'draw',\n\t    value: function draw(xDomain, yDomain) {\n\t      var _this = this;\n\t\n\t      if (this.options.x.type === 'datetime') {\n\t        if (xDomain) {\n\t          this.xScale = d3.scaleTime().domain(xDomain).range([0, this.chart.getWidth()]).nice();\n\t        } else {\n\t          this.xScale = d3.scaleTime().domain(this.currentMinMax[0]).range([0, this.chart.getWidth()]).nice();\n\t        }\n\t      } else {\n\t        if (xDomain) {\n\t          this.xScale = d3.scaleLinear().domain(xDomain).range([0, this.chart.getWidth()]);\n\t        } else {\n\t          this.xScale = d3.scaleLinear().domain(this.currentMinMax[0]).range([0, this.chart.getWidth()]);\n\t        }\n\t      }\n\t      if (this.options.x.type === 'datetime') {\n\t        this.xAxis = d3.axisBottom().scale(this.xScale).ticks(10).tickFormat(d3.timeFormat(this.formatDate()));\n\t      } else {\n\t        this.xAxis = d3.axisBottom().scale(this.xScale).ticks(10);\n\t      }\n\t      if (this.options.x.type === 'datetime') {\n\t        this.xGroup = this.chart.container.append('g').attr('class', 'x d3cf-axis').attr('transform', 'translate(' + this.chart.margins.left + ', ' + this.chart.getHeight() + ')').call(this.xAxis);\n\t        this.xGroup.selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', function () {\n\t          return 'rotate(-65)';\n\t        });\n\t      } else {\n\t        this.xGroup = this.chart.container.append('g').attr('class', 'x d3cf-axis').attr('transform', 'translate(' + this.chart.margins.left + ', ' + this.chart.getHeight() + ')').call(this.xAxis);\n\t      }\n\t\n\t      if (yDomain) {\n\t        this.yScale = d3.scaleLinear().domain(yDomain).range([this.chart.getHeight(), 0]);\n\t      } else {\n\t        this.yScale = d3.scaleLinear().domain(this.currentMinMax[1]).range([this.chart.getHeight(), 0]);\n\t      }\n\t      this.yAxis = d3.axisLeft().scale(this.yScale);\n\t      this.yGroup = this.chart.container.append('g').attr('class', 'y d3cf-axis').attr('transform', 'translate(' + this.chart.margins.left + ', 0)').call(this.yAxis);\n\t      if (this.options.grid) {\n\t        this.grid = new _Grid2.default(this, this.chart);\n\t      }\n\t\n\t      var padding = 0;\n\t      if (this.options.x.type === 'datetime') {\n\t        padding = 45;\n\t      }\n\t\n\t      if (this.xLabel) {\n\t        // update\n\t        this.xLabel.attr('dx', this.chart.width / 2 - (this.chart.margins.right + this.chart.margins.left) / 2).attr('dy', this.chart.margins.bottom);\n\t      } else {\n\t        // add\n\t        this.xLabel = this.chart.container.append('g').attr('class', 'x d3cf-axis-label').attr('transform', 'translate(' + this.chart.margins.left + ', ' + (this.chart.getHeight() + padding) + ')').append('text').attr('dx', this.chart.width / 2 - (this.chart.margins.right + this.chart.margins.left) / 2).attr('dy', this.chart.margins.bottom).attr('class', 'd3cf-axis-label').style('text-anchor', 'middle').text(function () {\n\t          return _this.options.x.title || '';\n\t        });\n\t      }\n\t      if (this.yLabel) {\n\t        // update\n\t        this.yLabel.attr('dx', -(this.chart.height / 2) + (this.chart.margins.top + this.chart.margins.bottom) / 2).attr('dy', -this.chart.margins.left);\n\t      } else {\n\t        // add\n\t        this.yLabel = this.chart.container.append('g').attr('class', 'y d3cf-axis-label').attr('transform', 'translate(' + this.chart.margins.left + ', 0)').append('text').attr('transform', 'rotate(-90)').attr('dx', -(this.chart.height / 2) + (this.chart.margins.top + this.chart.margins.bottom) / 2).attr('dy', -this.chart.margins.left).attr('class', 'd3cf-axis-label').style('text-anchor', 'middle').text(function () {\n\t          return _this.options.y.title;\n\t        });\n\t      }\n\t    }\n\t\n\t    /*\n\t    * setDomain - sets the x, y domains based on the passed in data\n\t    * @param {array} data, an array of {object} for each marker\n\t    */\n\t\n\t  }, {\n\t    key: 'setDomain',\n\t    value: function setDomain(data) {\n\t      var _this2 = this;\n\t\n\t      var xMin = 0;\n\t      var xMax = 0;\n\t      if (this.options.x.type === 'datetime') {\n\t        var x1 = _.pluck(data, 'x1');\n\t        var x2 = _.pluck(data, 'x2');\n\t        xMin = Axes.minDatetime(x1, this.useAutoPadding);\n\t        xMax = xMin;\n\t        if (x2.length > 0) {\n\t          xMax = Axes.maxDatetime(x2, this.useAutoPadding);\n\t        }\n\t        if (isNaN(xMax)) {\n\t          xMax = Axes.maxDatetime(x1, this.useAutoPadding);\n\t        }\n\t      } else {\n\t        var _x = _.pluck(data, 'x1');\n\t        var _x2 = _.pluck(data, 'x2');\n\t        xMin = Axes.minNumeric(_x, this.useAutoPadding);\n\t        xMax = xMin;\n\t        if (_x2.length > 0) {\n\t          xMax = Axes.maxNumeric(_x2, this.useAutoPadding);\n\t        }\n\t        if (isNaN(xMax)) {\n\t          xMax = Axes.maxNumeric(_x, this.useAutoPadding);\n\t        }\n\t      }\n\t\n\t      var yMin = 0;\n\t      var yMax = Axes.maxNumeric(_.pluck(data, 'y1'), this.useAutoPadding);\n\t      this.xScale.domain([xMin, xMax]);\n\t      this.yScale.domain([yMin, yMax]);\n\t      if (this.initialized === false) {\n\t        this.initialMinMax = [[xMin, xMax], [yMin, yMax]];\n\t        if (this.options.filter) {\n\t          this.chart.addFilter('_domain', function (d) {\n\t            // TODO: should this scope be the Plot or the Axes?\n\t            var x1 = _this2.xScale.domain()[0];\n\t            if (x1 instanceof Date) {\n\t              x1 = x1.getTime();\n\t            }\n\t            var x2 = _this2.xScale.domain()[1];\n\t            if (x2 instanceof Date) {\n\t              x2 = x2.getTime();\n\t            }\n\t            var y1 = _this2.yScale.domain()[0];\n\t            var y2 = _this2.yScale.domain()[1];\n\t            if (d.hasOwnProperty('x2')) {\n\t              if (d.x1 >= x1 && d.x2 <= x2 && d.y1 >= y1 && d.y1 <= y2) {\n\t                return d;\n\t              }\n\t            } else {\n\t              if (d.x1 >= x1 && d.y1 >= y1 && d.y1 <= y2) {\n\t                return d;\n\t              }\n\t            }\n\t          });\n\t        }\n\t      } else {\n\t        this.currentMinMax = [[xMin, xMax], [yMin, yMax]];\n\t      }\n\t      this.initialized = true;\n\t    }\n\t\n\t    /*\n\t    * setDomain - sets the x, y domains based on the passed in data\n\t    * @note this will overwrite the original x,y minMax options to the plot\n\t    * @param {array} data, an array of {object} for each marker\n\t    */\n\t\n\t  }, {\n\t    key: 'setInitialMinMax',\n\t    value: function setInitialMinMax(newMinMax) {\n\t      this.initialMinMax = newMinMax;\n\t    }\n\t\n\t    /*\n\t    * update - update the x,y axes using the zoom domain\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @param {boolean} shouldSetDomain, should the domain be set to data bounds\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(data, shouldSetDomain) {\n\t      this.remove();\n\t      if (data && shouldSetDomain) {\n\t        this.setDomain(data);\n\t      }\n\t      this.draw(this.xScale.domain(), this.yScale.domain());\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * reset - resets the x,y axes back to the original domain\n\t    */\n\t\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      this.remove();\n\t      this.draw(this.initialMinMax[0], this.initialMinMax[1]);\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * zoom - zooms the x,y axes based on the zoomArea object\n\t    * @param {object} zoomArea, an object containing a bounding box of x,y coordinates\n\t    */\n\t\n\t  }, {\n\t    key: 'zoom',\n\t    value: function zoom(zoomArea) {\n\t      if (zoomArea.x1 > zoomArea.x2) {\n\t        this.xScale.domain([zoomArea.x2, zoomArea.x1]);\n\t      } else {\n\t        this.xScale.domain([zoomArea.x1, zoomArea.x2]);\n\t      }\n\t      if (this.options.x.type === 'datetime') {\n\t        this.xAxis.tickFormat(d3.timeFormat(this.formatDate()));\n\t      }\n\t      if (zoomArea.y1 > zoomArea.y2) {\n\t        this.yScale.domain([zoomArea.y2, zoomArea.y1]);\n\t      } else {\n\t        this.yScale.domain([zoomArea.y1, zoomArea.y2]);\n\t      }\n\t      var trans = this.chart.container.transition().duration(750);\n\t      this.xGroup.transition(trans).call(this.xAxis);\n\t      this.xGroup.selectAll('g').selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', 'rotate(-65)');\n\t      this.yGroup.transition(trans).call(this.yAxis);\n\t      if (this.grid) {\n\t        this.grid.remove();\n\t        this.grid = new _Grid2.default(this, this.chart);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * remove - removes the x,y axis groups from the plot\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      this.xGroup.remove();\n\t      this.yGroup.remove();\n\t      if (this.grid) {\n\t        return this.grid.remove();\n\t      }\n\t    }\n\t\n\t    /*\n\t    * formatDate - a method that formats the axis date label\n\t    */\n\t\n\t  }, {\n\t    key: 'formatDate',\n\t    value: function formatDate() {\n\t      var xDomain = this.xScale.domain();\n\t      var duration = moment.duration(moment(xDomain[1]).diff(xDomain[0])).asDays();\n\t      if (duration <= 7) {\n\t        return '%b %d - %H:%M';\n\t      }\n\t      return '%b %d, %Y';\n\t    }\n\t\n\t    /*\n\t    * maxNumeric - determine the maximum value with padding. Padding is determined\n\t    * by the number of digits ^ 10 / 10, unless number of digets == 10 then return\n\t    * 10\n\t    * @param {array} data, an array of positive integers\n\t    * @return {number} max\n\t    */\n\t\n\t  }], [{\n\t    key: 'maxNumeric',\n\t    value: function maxNumeric(data, useAutoPadding) {\n\t      var m = Math.floor(_.max(data));\n\t      if (useAutoPadding) {\n\t        var l = String(m).split('').length;\n\t        if (l === 1) {\n\t          return 10;\n\t        }\n\t        var p = Math.pow(10, l) / 10;\n\t        return m + p;\n\t      }\n\t      return m;\n\t    }\n\t\n\t    /*\n\t    * minNumeric - determine the minimum value with padding. Padding is determined\n\t    * by the number of digits ^ 10 / 10, unless number of digets == 10 then return\n\t    * 10\n\t    * @param {array} data, an array of positive integers\n\t    * @return {number} max\n\t    */\n\t\n\t  }, {\n\t    key: 'minNumeric',\n\t    value: function minNumeric(data, useAutoPadding) {\n\t      var m = Math.floor(_.min(data));\n\t      if (useAutoPadding) {\n\t        var l = String(m).split('').length;\n\t        if (l === 1) {\n\t          return 10;\n\t        }\n\t        var p = Math.pow(10, l) / 10;\n\t        return m + p;\n\t      }\n\t      return m;\n\t    }\n\t\n\t    /*\n\t    * maxDatetime - determine the maximum value with padding\n\t    * @param {array} data, an array of timestamps in milliseconds\n\t    * @return {number} max, maximum datetime value\n\t    */\n\t\n\t  }, {\n\t    key: 'maxDatetime',\n\t    value: function maxDatetime(data, useAutoPadding) {\n\t      var max = moment(_.max(data));\n\t      if (useAutoPadding) {\n\t        var min = moment(_.min(data));\n\t        var unit = getDatetimeUnit(min, max);\n\t        return moment(max).add(1, unit).valueOf();\n\t      }\n\t      return max.valueOf();\n\t    }\n\t\n\t    /*\n\t    * minDatetime - determine the minimum value with padding\n\t    * @param {array} data, an array of timestamps in milliseconds\n\t    * @return {number} min, minimum datetime value\n\t    */\n\t\n\t  }, {\n\t    key: 'minDatetime',\n\t    value: function minDatetime(data, useAutoPadding) {\n\t      var min = moment(_.min(data));\n\t      if (useAutoPadding) {\n\t        var max = moment(_.max(data));\n\t        var unit = getDatetimeUnit(min, max);\n\t        return moment(min).subtract(1, unit).valueOf();\n\t      }\n\t      return min.valueOf();\n\t    }\n\t  }]);\n\t\n\t  return Axes;\n\t}();\n\t\n\tmodule.exports = Axes;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar Grid = function () {\n\t  /*\n\t  * Grid - constructs grids lines for the plot\n\t  * @param {object} axes, the axes to determine xScale, yScale\n\t  * @param {object} plot, the plot to append the axis\n\t  * @param {object} options, the properties for the axis\n\t  * @returns {object} this\n\t  */\n\t  function Grid(axes, plot, options) {\n\t    _classCallCheck(this, Grid);\n\t\n\t    this.plot = plot;\n\t    this.options = options || {};\n\t    this.axes = axes;\n\t    this.init();\n\t    return this;\n\t  }\n\t\n\t  /*\n\t  * init - initialize the x,y grid lines for a plot\n\t  */\n\t\n\t\n\t  _createClass(Grid, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      this.xGrid = d3.axisBottom().scale(this.axes.xScale).tickFormat('').tickSize(this.plot.getHeight() * -1, 0, 0);\n\t      this.xGroup = this.plot.container.insert('g', ':first-child').attr('class', 'd3cf-grid').attr('transform', 'translate(' + this.plot.margins.left + ', ' + this.plot.getHeight() + ')').attr('opacity', null).call(this.xGrid);\n\t      this.yGrid = d3.axisLeft().scale(this.axes.yScale).tickFormat('').tickSize(this.plot.getWidth() * -1, 0, 0);\n\t      this.yGroup = this.plot.container.insert('g', ':first-child').attr('class', 'd3cf-grid').attr('transform', 'translate(' + this.plot.margins.left + ', 0)').attr('opacity', null).call(this.yGrid);\n\t    }\n\t\n\t    /*\n\t    * remove - removed the grid lines from the plot\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      this.xGroup.remove();\n\t      this.yGroup.remove();\n\t    }\n\t  }]);\n\t\n\t  return Grid;\n\t}();\n\t\n\tmodule.exports = Grid;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/*\n\t* InvalidNodeError - error thrown when an object is not instanceof Node\n\t*\n\t* @param {string} [message], (optional) the message to the user\n\t*/\n\tvar InvalidNodeError = exports.InvalidNodeError = function (_Error) {\n\t  _inherits(InvalidNodeError, _Error);\n\t\n\t  function InvalidNodeError(message) {\n\t    _classCallCheck(this, InvalidNodeError);\n\t\n\t    var message_ = message || 'Is not instanceof Node.';\n\t    return _possibleConstructorReturn(this, (InvalidNodeError.__proto__ || Object.getPrototypeOf(InvalidNodeError)).call(this, message_));\n\t  }\n\t\n\t  return InvalidNodeError;\n\t}(Error);\n\t\n\t/*\n\t* InvalidGroupError - error thrown when an object is not instanceof Group\n\t*\n\t* @param {string} [message], (optional) the message to the user\n\t*/\n\t\n\t\n\tvar InvalidGroupError = exports.InvalidGroupError = function (_Error2) {\n\t  _inherits(InvalidGroupError, _Error2);\n\t\n\t  function InvalidGroupError(message) {\n\t    _classCallCheck(this, InvalidGroupError);\n\t\n\t    var message_ = message || 'Is not instanceof Group.';\n\t    return _possibleConstructorReturn(this, (InvalidGroupError.__proto__ || Object.getPrototypeOf(InvalidGroupError)).call(this, message_));\n\t  }\n\t\n\t  return InvalidGroupError;\n\t}(Error);\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Node = __webpack_require__(8);\n\t\n\tvar _Node2 = _interopRequireDefault(_Node);\n\t\n\tvar _Errors = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\t\n\tfunction genId() {\n\t  var length = 9;\n\t  var prefix = 'group-';\n\t  return prefix + Math.random().toString(36).substr(2, length);\n\t}\n\t\n\tvar Group = function () {\n\t  function Group(chart, options) {\n\t    _classCallCheck(this, Group);\n\t\n\t    this.options = options || {};\n\t    this.id = this.options.id || genId();\n\t    var onEnter = this.options.onEnter || Group.onEnter;\n\t    this.onEnter = _.bind(onEnter, this);\n\t    var onUpdate = this.options.onUpdate || Group.onUpdate;\n\t    this.onUpdate = _.bind(onUpdate, this);\n\t    var onExit = this.options.onExit || Group.onExit;\n\t    this.onExit = _.bind(onExit, this);\n\t    this.nodes_ = {};\n\t    this.chart = chart;\n\t    return this;\n\t  }\n\t\n\t  /*\n\t  * size - returns the size of the Group's nodes\n\t  * @return {number} size, the size of the group\n\t  */\n\t\n\t\n\t  _createClass(Group, [{\n\t    key: 'size',\n\t    value: function size() {\n\t      return Object.values(this.nodes_).length;\n\t    }\n\t\n\t    /*\n\t    * addNode - adds a node to this group\n\t    * @param {object} node, the node to add\n\t    * @throws {InvalidGroupError} error\n\t    * @return {Group} this\n\t    */\n\t\n\t  }, {\n\t    key: 'addNode',\n\t    value: function addNode(node) {\n\t      if (typeof node === 'undefined' || !node instanceof _Node2.default) {\n\t        throw new _Errors.InvalidNodeError();\n\t      }\n\t      this.nodes_[node.id] = node;\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * removeNode - removes a node from this group\n\t    * @param {string} id, the id to remove\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'removeNode',\n\t    value: function removeNode(id) {\n\t      if (this.nodes_.hasOwnProperty(id)) {\n\t        delete this.nodes_[id];\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * getNodes - returns the nodes associated with this group\n\t    * @return {array} nodes, the nodes associated with this group\n\t    */\n\t\n\t  }, {\n\t    key: 'getNodes',\n\t    value: function getNodes() {\n\t      return Object.values(this.nodes_);\n\t    }\n\t\n\t    /*\n\t    * update - handles updating the marker\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      throw new Error('Update must be implemented.');\n\t    }\n\t\n\t    /*\n\t    * detached - builds a detached svg group and returns the node\n\t    * @return {object} node, the SVG node to append to the parent during .call()\n\t    */\n\t\n\t  }, {\n\t    key: 'detached',\n\t    value: function detached() {\n\t      this.remove();\n\t      this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'd3cf-group').remove();\n\t      this.update();\n\t      return this.group.node();\n\t    }\n\t\n\t    /*\n\t    * remove - removes the group from the DOM\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.group) {\n\t        this.group.remove();\n\t      }\n\t    }\n\t\n\t    /*\n\t    * destroy - destroys the group and any associated elements\n\t    */\n\t\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.remove();\n\t      this.chart.removeLayer(this.id);\n\t      this.nodes = null;\n\t      this.chart = null;\n\t      this.group = null;\n\t    }\n\t\n\t    /*\n\t    * onEnter - the default event handler for a group. This may be overridden or\n\t    *   a new event handler passed into the constructor as `options.onEnter`\n\t    * @param {object} selections - the d3 selection object containing the children for this group\n\t    */\n\t\n\t  }], [{\n\t    key: 'onEnter',\n\t    value: function onEnter() {}\n\t\n\t    /*\n\t    * onUpdate - the default event handler for a group. This may be overridden or\n\t    *   a new event handler passed into the constructor as `options.onUpdate`\n\t    * @param {object} selections - the d3 selection object for this group\n\t    */\n\t\n\t  }, {\n\t    key: 'onUpdate',\n\t    value: function onUpdate() {}\n\t\n\t    /*\n\t    * onExit - the default event handler for a group. This may be overridden or\n\t    *   a new event handler passed into the constructor as `options.onExit`\n\t    * @param {object} selections - the d3 selection object for this group\n\t    */\n\t\n\t  }, {\n\t    key: 'onExit',\n\t    value: function onExit() {}\n\t  }]);\n\t\n\t  return Group;\n\t}();\n\t\n\tmodule.exports = Group;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tfunction genId() {\n\t  var length = 9;\n\t  var prefix = 'node-';\n\t  return prefix + Math.random().toString(36).substr(2, length);\n\t}\n\t\n\tvar Node = function () {\n\t  /*\n\t  * Node - base class\n\t  * @param {object} options, the options used to construct the SegmentMarker\n\t  * @param {object} options.meta, the optional meta data associated with the node (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function Node(options) {\n\t    _classCallCheck(this, Node);\n\t\n\t    this.id = options.id || genId();\n\t    this.meta = options.meta || {};\n\t    this.group = null;\n\t    return this;\n\t  }\n\t\n\t  /*\n\t  * remove - removes the marker from the DOM\n\t  */\n\t\n\t\n\t  _createClass(Node, [{\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.group) {\n\t        return this.group.remove();\n\t      }\n\t    }\n\t\n\t    /*\n\t    * update - updates one or more elements within the RectNode SVG group\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * detached - builds a detached svg group and returns the node\n\t    * @return {object} node, the SVG node to append to the parent during .call()\n\t    */\n\t\n\t  }, {\n\t    key: 'detached',\n\t    value: function detached() {\n\t      this.remove();\n\t      this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'd3cf-node').attr('opacity', this.o).remove();\n\t      this.update();\n\t      return this.group.node();\n\t    }\n\t  }]);\n\t\n\t  return Node;\n\t}();\n\t\n\tmodule.exports = Node;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Group2 = __webpack_require__(7);\n\t\n\tvar _Group3 = _interopRequireDefault(_Group2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar LineGroup = function (_Group) {\n\t  _inherits(LineGroup, _Group);\n\t\n\t  function LineGroup(chart, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, LineGroup);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LineGroup.__proto__ || Object.getPrototypeOf(LineGroup)).call(this, chart, options));\n\t\n\t    _this.s = options.s || 'steelblue';\n\t    _this.w = options.w || 1.5;\n\t    _this.meta = options.meta || {};\n\t    var defaultGenerator = d3.line().x(function (d) {\n\t      return _this.chart.axes.xScale(d.x1);\n\t    }).y(function (d) {\n\t      return _this.chart.axes.yScale(d.y1);\n\t    });\n\t    _this.generator = options.generator || defaultGenerator;\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /*\n\t  * update - handles updating the marker\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(LineGroup, [{\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        return;\n\t      }\n\t      var filtered = this.chart.applyFilters(this.getNodes());\n\t      this.group.attr('numNodes', filtered.length);\n\t\n\t      var path = this.group.append('path').datum(filtered).attr('stroke', this.s).attr('stroke-linejoin', 'round').attr('stroke-linecap', 'round').attr('stroke-width', this.w).attr('class', 'd3cf-line').attr('d', function (d) {\n\t        return _this2.generator(d);\n\t      }).call(this.onEnter);\n\t      path.attr('stroke', this.s).attr('stroke-width', this.w).attr('d', function (d) {\n\t        return _this2.generator(d);\n\t      }).call(this.onUpdate);\n\t      path.exit().remove().call(this.onExit);\n\t      var nodes = this.group.selectAll('.node').data(filtered, function (d) {\n\t        return d.id;\n\t      });\n\t      nodes.enter().append(function (node) {\n\t        return node.detached();\n\t      }).call(this.onEnter);\n\t      nodes.each(function (node) {\n\t        return node.update();\n\t      }).call(this.onUpdate);\n\t      nodes.exit().remove().call(this.onExit);\n\t    }\n\t  }]);\n\t\n\t  return LineGroup;\n\t}(_Group3.default);\n\t\n\tmodule.exports = LineGroup;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Group2 = __webpack_require__(7);\n\t\n\tvar _Group3 = _interopRequireDefault(_Group2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar NodeGroup = function (_Group) {\n\t  _inherits(NodeGroup, _Group);\n\t\n\t  function NodeGroup(chart, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, NodeGroup);\n\t\n\t    var _this = _possibleConstructorReturn(this, (NodeGroup.__proto__ || Object.getPrototypeOf(NodeGroup)).call(this, chart, options));\n\t\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /*\n\t  * update - handles updating the marker\n\t  * @override\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(NodeGroup, [{\n\t    key: 'update',\n\t    value: function update() {\n\t      if (typeof this.group === 'undefined') {\n\t        return;\n\t      }\n\t      var filtered = this.chart.applyFilters(this.getNodes());\n\t      this.group.attr('numNodes', filtered.length);\n\t      var nodes = this.group.selectAll('.node').data(filtered, function (d) {\n\t        return d.id;\n\t      });\n\t      nodes.enter().append(function (node) {\n\t        return node.detached();\n\t      }).call(this.onEnter);\n\t      nodes.each(function (node) {\n\t        return node.update();\n\t      }).call(this.onUpdate);\n\t      nodes.exit().remove().call(this.onExit);\n\t    }\n\t  }]);\n\t\n\t  return NodeGroup;\n\t}(_Group3.default);\n\t\n\tmodule.exports = NodeGroup;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Node2 = __webpack_require__(8);\n\t\n\tvar _Node3 = _interopRequireDefault(_Node2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar LineNode = function (_Node) {\n\t  _inherits(LineNode, _Node);\n\t\n\t  /*\n\t  * LineNode - a data point for a path/line generator\n\t  * @param {object} chart, an instance of a chart\n\t  * @param {object} options, the options used to construct the plot\n\t  * @param {number} options.x1, the value for x1 position\n\t  * @param {number} options.y1, the value for y1 position\n\t  * @param {string} options.r, the radius of the circle\n\t  * @param {number} options.o, the opacity of the cirle\n\t  * @param {object} options.meta, the optional meta data associated with the circle (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function LineNode(chart, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, LineNode);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LineNode.__proto__ || Object.getPrototypeOf(LineNode)).call(this, chart, options));\n\t\n\t    _this.chart = chart;\n\t    _this.x1 = options.x1;\n\t    _this.y1 = options.y1;\n\t    _this.r = options.r || 3;\n\t    _this.o = options.o || 0;\n\t    _this.style = options.style || 'd3cf-node';\n\t    _this.meta = options.meta || {};\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  _createClass(LineNode, [{\n\t    key: 'getFill',\n\t    value: function getFill(type) {\n\t      var fill = '#33B5E';\n\t      switch (type) {\n\t        case 'warning':\n\t          fill = '#FFBB33';\n\t          break;\n\t        case 'success':\n\t          fill = '#00C851';\n\t          break;\n\t        case 'info':\n\t          fill = '#33B5E5';\n\t          break;\n\t        default:\n\t          break;\n\t      }\n\t      return fill;\n\t    }\n\t\n\t    /*\n\t    * update - updates one or more elements\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        this.group = d3.select('#' + this.id);\n\t      }\n\t      /*\n\t      * Each node of the line's `path` (see LineGroup) is a transparent circle in\n\t      * order to have a mouseover event.\n\t      * @see https://groups.google.com/forum/#!topic/d3-js/gHzOj91X2NA\n\t      */\n\t      // select\n\t      var circle = this.group.selectAll('circle').data([this], function (d) {\n\t        return d.id;\n\t      });\n\t      // create\n\t      circle.enter().append('circle').attr('class', this.style).attr('cx', function () {\n\t        return _this2.chart.axes.xScale(_this2.x1);\n\t      }).attr('cy', function () {\n\t        return _this2.chart.axes.yScale(_this2.y1);\n\t      }).attr('r', function () {\n\t        return _this2.r;\n\t      }).attr('opacity', function () {\n\t        return _this2.o;\n\t      }).on('mouseover', function () {\n\t        if (_this2.chart.tooltip) {\n\t          return _this2.chart.tooltip.mouseover(_this2, d3.event.pageX, d3.event.pageY);\n\t        }\n\t      }).on('mouseout', function () {\n\t        if (_this2.chart.tooltip) {\n\t          return _this2.chart.tooltip.mouseout();\n\t        }\n\t      });\n\t      // update\n\t      circle.attr('cx', function () {\n\t        return _this2.chart.axes.xScale(_this2.x1);\n\t      }).attr('cy', function () {\n\t        return _this2.chart.axes.yScale(_this2.y1);\n\t      }).attr('r', function () {\n\t        return _this2.r;\n\t      }).attr('opacity', function () {\n\t        return _this2.o;\n\t      });\n\t      // remove\n\t      circle.exit().remove();\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return LineNode;\n\t}(_Node3.default);\n\t\n\tmodule.exports = LineNode;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Node2 = __webpack_require__(8);\n\t\n\tvar _Node3 = _interopRequireDefault(_Node2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar MINIMUM_MARKER_WIDTH = 10;\n\tvar MINIMUM_MARKER_HEIGHT = 10;\n\t\n\tvar RectNode = function (_Node) {\n\t  _inherits(RectNode, _Node);\n\t\n\t  /*\n\t  * RectNode - a rectangular node\n\t  * @param {object} plot, an instance of a plot\n\t  * @param {object} options, the options used to construct the plot\n\t  * @param {number} options.x1, the value for x1 position\n\t  * @param {number} options.x2, the value for x2 position\n\t  * @param {number} options.y1, the value for y1 position\n\t  * @param {number} options.h, the value for the height\n\t  * @param {string} options.f, the fill of the marker\n\t  * @param {number} options.o, the opacity of the marker\n\t  * @param {object} options.meta, the optional meta data associated with the marker (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function RectNode(plot, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, RectNode);\n\t\n\t    var _this = _possibleConstructorReturn(this, (RectNode.__proto__ || Object.getPrototypeOf(RectNode)).call(this, options));\n\t\n\t    _this.plot = plot;\n\t    _this.x1 = options.x1;\n\t    _this.x2 = options.x2;\n\t    _this.y1 = options.y1;\n\t    _this.h = options.h || 10;\n\t    _this.f = options.f || '#345e7e';\n\t    _this.o = options.o || 0.4;\n\t    _this.style = options.style || 'd3cf-node';\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /*\n\t  * update - updates one or more elements within the RectNode SVG group\n\t  */\n\t\n\t\n\t  _createClass(RectNode, [{\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        this.group = d3.select('#' + this.id);\n\t      }\n\t      // select\n\t      var rect = this.group.selectAll('rect').data([this], function (d) {\n\t        return d.id;\n\t      });\n\t      // create\n\t      rect.enter().append('rect').attr('class', this.style).attr('x', function () {\n\t        return _this2.plot.axes.xScale(_this2.x1);\n\t      }).attr('y', function () {\n\t        var height = _this2.h;\n\t        if (height < MINIMUM_MARKER_HEIGHT) {\n\t          height = MINIMUM_MARKER_HEIGHT;\n\t        }\n\t        return _this2.plot.axes.yScale(_this2.y1) - height / 2;\n\t      }).attr('width', function () {\n\t        var width = _this2.plot.axes.xScale(_this2.x2) - _this2.plot.axes.xScale(_this2.x1);\n\t        if (width < MINIMUM_MARKER_WIDTH) {\n\t          width = MINIMUM_MARKER_WIDTH;\n\t        }\n\t        return width;\n\t      }).attr('height', function () {\n\t        var height = _this2.h;\n\t        if (height < MINIMUM_MARKER_HEIGHT) {\n\t          height = MINIMUM_MARKER_HEIGHT;\n\t        }\n\t        return height;\n\t      }).style('fill', function () {\n\t        return _this2.f;\n\t      }).style('opacity', function () {\n\t        return _this2.o;\n\t      }).on('mouseover', function () {\n\t        if (_this2.plot.tooltip) {\n\t          return _this2.plot.tooltip.mouseover(_this2, d3.event.pageX, d3.event.pageY);\n\t        }\n\t      }).on('mouseout', function () {\n\t        if (_this2.plot.tooltip) {\n\t          return _this2.plot.tooltip.mouseout();\n\t        }\n\t      });\n\t\n\t      // update\n\t      rect.attr('x', function () {\n\t        return _this2.plot.axes.xScale(_this2.x1);\n\t      }).attr('y', function () {\n\t        var height = _this2.h;\n\t        if (height < MINIMUM_MARKER_HEIGHT) {\n\t          height = MINIMUM_MARKER_HEIGHT;\n\t        }\n\t        return _this2.plot.axes.yScale(_this2.y1) - height / 2;\n\t      }).attr('width', function () {\n\t        var width = _this2.plot.axes.xScale(_this2.x2) - _this2.plot.axes.xScale(_this2.x1);\n\t        if (width < MINIMUM_MARKER_WIDTH) {\n\t          width = MINIMUM_MARKER_WIDTH;\n\t        }\n\t        return width;\n\t      }).attr('height', function () {\n\t        var height = _this2.h;\n\t        if (height < MINIMUM_MARKER_HEIGHT) {\n\t          height = MINIMUM_MARKER_HEIGHT;\n\t        }\n\t        return height;\n\t      });\n\t\n\t      // remove\n\t      rect.exit().remove();\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return RectNode;\n\t}(_Node3.default);\n\t\n\tmodule.exports = RectNode;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _d = __webpack_require__(3);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tvar _underscore = __webpack_require__(4);\n\t\n\tvar _underscore2 = _interopRequireDefault(_underscore);\n\t\n\tvar _Node2 = __webpack_require__(8);\n\t\n\tvar _Node3 = _interopRequireDefault(_Node2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar MINIMUM_LINE_STROKE = 4;\n\tvar MINIMUM_CIRCLE_RADIUS = 5;\n\tvar MINIMUM_LINE_THRESHOLD = 2;\n\t\n\tvar SegmentNode = function (_Node) {\n\t  _inherits(SegmentNode, _Node);\n\t\n\t  /*\n\t  * SegmentNode - a line with beginning and end circles\n\t  * @param {object} plot, an instance of a plot\n\t  * @param {object} options, the options used to construct the SegmentNode\n\t  * @param {number} options.x, the value for x position\n\t  * @param {number} options.y, the value for y position\n\t  * @param {number} options.l, the value for the length of the line\n\t  * @param {number} options.h, the value for the height\n\t  * @param {string} options.f, the fill of the line\n\t  * @param {number} options.o, the opacity of the line\n\t  * @param {object} options.meta, the optional meta data associated with the node (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function SegmentNode(plot, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, SegmentNode);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SegmentNode.__proto__ || Object.getPrototypeOf(SegmentNode)).call(this, options));\n\t\n\t    _this.plot = plot;\n\t    _this.x = options.x;\n\t    _this.y = options.y;\n\t    _this.w = options.w;\n\t    _this.h = options.h || MINIMUM_LINE_STROKE;\n\t    _this.r = options.r || MINIMUM_CIRCLE_RADIUS;\n\t    _this.f = options.f || '#345e7e';\n\t    _this.o = options.o || 0.3;\n\t    _this.meta = options.meta || {};\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /*\n\t  * remove - removes the node from the DOM\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(SegmentNode, [{\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.group) {\n\t        return this.group.remove();\n\t      }\n\t    }\n\t\n\t    /*\n\t    * filteredOrderedPair - determine if the pair exists within the domain\n\t    */\n\t\n\t  }, {\n\t    key: 'filteredOrderedPair',\n\t    value: function filteredOrderedPair(orderedPair) {\n\t      if (orderedPair[0] < this.plot.axes.xScale.range()[0]) {\n\t        orderedPair[0] = null;\n\t      }\n\t      if (orderedPair[0] > this.plot.axes.xScale.range()[1]) {\n\t        orderedPair[0] = null;\n\t      }\n\t      if (orderedPair[1] < this.plot.axes.yScale.range()[1]) {\n\t        orderedPair[1] = null;\n\t      }\n\t      if (orderedPair[1] > this.plot.axes.yScale.range()[0]) {\n\t        orderedPair[1] = null;\n\t      }\n\t      return orderedPair;\n\t    }\n\t\n\t    /*\n\t    * update - handles updating the node\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        this.group = _d2.default.select('#' + this.id);\n\t      }\n\t      var linePairs = [[this.plot.axes.xScale(this.x), this.plot.axes.yScale(this.y)], [this.plot.axes.xScale(this.w), this.plot.axes.yScale(this.y)]];\n\t      var lineDistance = this.distance(linePairs);\n\t      var totalRange = this.plot.axes.xScale.range()[1];\n\t      var linePercentage = Math.floor(lineDistance / totalRange * 100);\n\t      var startPoint = this.filteredOrderedPair([this.plot.axes.xScale(this.x), this.plot.axes.yScale(this.y)]);\n\t      var start = this.group.selectAll('.start-circle').data([this], function (d) {\n\t        return d.id;\n\t      });\n\t      if (startPoint[0] !== null && startPoint[1] !== null) {\n\t        start.enter().append('circle').attr('class', 'start-circle').style('fill', this.f).attr('cx', startPoint[0]).attr('cy', startPoint[1]).attr('r', function () {\n\t          var radius = _this2.r;\n\t          radius = Math.ceil(radius * (linePercentage / 100) + radius);\n\t          if (radius < MINIMUM_CIRCLE_RADIUS) {\n\t            radius = MINIMUM_CIRCLE_RADIUS;\n\t          }\n\t          return radius;\n\t        });\n\t        start.attr('cx', startPoint[0]).attr('cy', startPoint[1]).attr('r', function () {\n\t          var radius = _this2.r;\n\t          radius = Math.ceil(radius * (linePercentage / 100) + radius);\n\t          if (radius < MINIMUM_CIRCLE_RADIUS) {\n\t            radius = MINIMUM_CIRCLE_RADIUS;\n\t          }\n\t          return radius;\n\t        });\n\t        start.exit().remove();\n\t      } else {\n\t        this.group.selectAll('.start-circle').remove();\n\t      }\n\t      if (linePercentage >= MINIMUM_LINE_THRESHOLD) {\n\t        var line = this.group.selectAll('line').data([this], function (d) {\n\t          return d.id;\n\t        });\n\t        line.enter().append('line').attr('x1', function () {\n\t          if (linePairs[0][0] <= _this2.plot.axes.xScale.range()[0]) {\n\t            return _this2.plot.axes.xScale.range()[0];\n\t          }\n\t          if (linePairs[0][0] >= _this2.plot.axes.xScale.range()[1]) {\n\t            return null;\n\t          }\n\t          return linePairs[0][0];\n\t        }).attr('y1', linePairs[0][1]).attr('x2', function () {\n\t          if (linePairs[1][0] >= _this2.plot.axes.xScale.range()[1]) {\n\t            return _this2.plot.axes.xScale.range()[1];\n\t          }\n\t          if (linePairs[1][0] <= _this2.plot.axes.xScale.range()[0]) {\n\t            return null;\n\t          }\n\t          return linePairs[1][0];\n\t        }).attr('y2', linePairs[1][1]).attr('stroke-width', function () {\n\t          var height = _this2.h;\n\t          height = Math.ceil(height * (linePercentage / 100) + height);\n\t          if (height < MINIMUM_LINE_STROKE) {\n\t            return MINIMUM_LINE_STROKE;\n\t          }\n\t          return height;\n\t        }).attr('stroke', this.f);\n\t        line.attr('x1', function () {\n\t          if (linePairs[0][0] <= _this2.plot.axes.xScale.range()[0]) {\n\t            return _this2.plot.axes.xScale.range()[0];\n\t          }\n\t          if (linePairs[0][0] >= _this2.plot.axes.xScale.range()[1]) {\n\t            return null;\n\t          }\n\t          return linePairs[0][0];\n\t        }).attr('y1', linePairs[0][1]).attr('x2', function () {\n\t          if (linePairs[1][0] >= _this2.plot.axes.xScale.range()[1]) {\n\t            return _this2.plot.axes.xScale.range()[1];\n\t          }\n\t          if (linePairs[1][0] <= _this2.plot.axes.xScale.range()[0]) {\n\t            return null;\n\t          }\n\t          return linePairs[1][0];\n\t        }).attr('y2', linePairs[1][1]).attr('stroke-width', function () {\n\t          var height = _this2.h;\n\t          height = Math.ceil(height * (linePercentage / 100) + height);\n\t          if (height < MINIMUM_LINE_STROKE) {\n\t            return MINIMUM_LINE_STROKE;\n\t          }\n\t          return height;\n\t        });\n\t      } else {\n\t        this.group.selectAll('line').remove();\n\t      }\n\t      var endPoint = this.filteredOrderedPair([this.plot.axes.xScale(this.w), this.plot.axes.yScale(this.y)]);\n\t      if (linePercentage >= MINIMUM_LINE_THRESHOLD) {\n\t        if (endPoint[0] !== null && endPoint[1] !== null) {\n\t          var end = this.group.selectAll('.end-circle').data([this], function (d) {\n\t            return d.id;\n\t          });\n\t          end.enter().append('circle').attr('class', 'end-circle').attr('cx', endPoint[0]).attr('cy', endPoint[1]).attr('r', function () {\n\t            var radius = _this2.r;\n\t            radius = Math.ceil(radius * linePercentage / 100 + radius);\n\t            if (radius < MINIMUM_CIRCLE_RADIUS) {\n\t              radius = MINIMUM_CIRCLE_RADIUS;\n\t            }\n\t            return radius;\n\t          }).style('fill', this.f);\n\t          end.attr('class', 'end-circle').attr('cx', endPoint[0]).attr('cy', endPoint[1]).attr('r', function () {\n\t            var radius = _this2.r;\n\t            radius = Math.ceil(radius * linePercentage / 100 + radius);\n\t            if (radius < MINIMUM_CIRCLE_RADIUS) {\n\t              radius = MINIMUM_CIRCLE_RADIUS;\n\t            }\n\t            return radius;\n\t          });\n\t        } else {\n\t          this.group.selectAll('.end-circle').remove();\n\t        }\n\t      } else {\n\t        this.group.selectAll('.end-circle').remove();\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * detached - builds a detached svg group and returns the node\n\t    * @return {object} node, the SVG node to append to the parent during .call()\n\t    */\n\t\n\t  }, {\n\t    key: 'detached',\n\t    value: function detached() {\n\t      this.remove();\n\t      this.group = _d2.default.select(document.createElementNS(_d2.default.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'node').attr('opacity', this.o).remove();\n\t      this.update();\n\t      this.group.node();\n\t    }\n\t\n\t    /*\n\t    * distance - determine the distance between two pairs\n\t    */\n\t\n\t  }, {\n\t    key: 'distance',\n\t    value: function distance(pairs) {\n\t      return Math.sqrt(Math.pow(Math.abs(pairs[0][0] - pairs[1][0]), 2) + Math.pow(Math.abs(pairs[0][1] - pairs[1][1]), 2));\n\t    }\n\t\n\t    /*\n\t    * groupOverlappingSegments - group overlapping segments together\n\t    * @param {array} segments, an array of SegmentNode's\n\t    * @return {object} groups, groups of overlapping segments\n\t    */\n\t\n\t  }], [{\n\t    key: 'groupOverlappingSegments',\n\t    value: function groupOverlappingSegments(segments) {\n\t      var groups = {};\n\t      var segmentsByHeightAndCumulative = _underscore2.default.groupBy(segments, function (segment) {\n\t        var c = false;\n\t        if (typeof segment.meta.cumulative === 'undefined') {\n\t          c = false;\n\t        } else {\n\t          c = segment.meta.cumulative;\n\t        }\n\t        return segment.y + ':' + c;\n\t      });\n\t      Object.keys(segmentsByHeightAndCumulative).forEach(function (key) {\n\t        var values = segmentsByHeightAndCumulative[key];\n\t        values.sort(function (a, b) {\n\t          return a.x - b.x;\n\t        });\n\t        var i = 0;\n\t        var points = [];\n\t        while (i < values.length) {\n\t          if (i === 0) {\n\t            points[0] = values[0];\n\t            var groupName = values[0].w + ':' + key;\n\t            groups[groupName] = [values[0]];\n\t            i++;\n\t            continue; // eslint-disable-line no-continue\n\t          }\n\t          var lastIdx = points.length - 1;\n\t          if (lastIdx < 0) {\n\t            break;\n\t          }\n\t          var lastPoint = points[lastIdx];\n\t          if (values[i].x >= lastPoint.x && values[i].w <= lastPoint.w) {\n\t            var _groupName = lastPoint.w + ':' + key;\n\t            var group = groups[_groupName];\n\t            if (typeof group === 'undefined') {\n\t              group = [];\n\t            }\n\t            group.push(values[i]);\n\t            i++;\n\t          } else {\n\t            points[lastIdx + 1] = values[i];\n\t            var _groupName2 = values[i].w + ':' + key;\n\t            groups[_groupName2] = [values[i]];\n\t            i++;\n\t          }\n\t        }\n\t      });\n\t      return groups;\n\t    }\n\t  }]);\n\t\n\t  return SegmentNode;\n\t}(_Node3.default);\n\t\n\tmodule.exports = SegmentNode;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Axes = __webpack_require__(1);\n\t\n\tvar _Axes2 = _interopRequireDefault(_Axes);\n\t\n\tvar _Tooltip = __webpack_require__(15);\n\t\n\tvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\t\n\tvar _Zoom = __webpack_require__(16);\n\t\n\tvar _Zoom2 = _interopRequireDefault(_Zoom);\n\t\n\tvar _Group = __webpack_require__(7);\n\t\n\tvar _Group2 = _interopRequireDefault(_Group);\n\t\n\tvar _Errors = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\t\n\tvar MINIMUM_CHART_HEIGHT = 300;\n\t\n\tvar Chart = function () {\n\t  /*\n\t  * Chart - creates a new instance of a chart\n\t  * @param {object} options, the options to create a chart\n\t  * @param {string} containerID, the id of the container div\n\t  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n\t  * @param {object} tooltip,\n\t  * @param {number} tooltip.opacity, the background opacity for the tooltip\n\t  * @param {object} tooltip.template, the compiled template\n\t  * @param {boolean} scale, scale the svg on window resize @default false\n\t  * @param {boolean} resize, resize the svg on window resize @default true\n\t  * @returns {object} this, returns self\n\t  */\n\t  function Chart(options) {\n\t    _classCallCheck(this, Chart);\n\t\n\t    this.options = options;\n\t    this.drawn = false;\n\t    this.filters = options.filters || {};\n\t    this.groups_ = {};\n\t    return this;\n\t  }\n\t\n\t  /*\n\t  * init - method to initialize the chart, allows the chart to be re-initialized\n\t  *  on resize while keeping the current chart data in memory\n\t  * @returns {object} this\n\t  */\n\t\n\t\n\t  _createClass(Chart, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      this.setDimensions();\n\t      var scale = this.options.scale || false;\n\t      if (scale) {\n\t        this.root = d3.select('#' + this.options.containerID).append('svg').attr('viewBox', '0 0 ' + this.viewBoxWidth + ' ' + this.viewBoxHeight).attr('preserveAspectRatio', 'xMinYMin meet');\n\t      } else {\n\t        this.root = d3.select('#' + this.options.containerID).append('svg').attr('width', this.viewBoxWidth).attr('height', this.viewBoxHeight);\n\t      }\n\t      this.container = this.root.append('g').attr('class', this.options.svgContainerClass).attr('width', this.getWidth()).attr('height', this.getHeight()).attr('transform', 'translate(' + this.margins.left + ', ' + this.margins.top + ')');\n\t      this.axes = new _Axes2.default(this, this.options.axes);\n\t      this.tooltip = new _Tooltip2.default(this, this.options);\n\t      var zoomEnabled = this.options.zoom || false;\n\t      if (zoomEnabled) {\n\t        this.zoom = new _Zoom2.default(this, this.options);\n\t      }\n\t      this.groups = this.container.append('g').attr('class', 'd3cf-groups').attr('transform', 'translate(' + this.margins.left + ', 0)');\n\t      // this.update([]);\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * setDimensions - method to set the dimensions of the chart based on the current window\n\t    */\n\t\n\t  }, {\n\t    key: 'setDimensions',\n\t    value: function setDimensions() {\n\t      this.margins = this.options.margins || {\n\t        left: 40,\n\t        right: 20,\n\t        top: 20,\n\t        bottom: 40\n\t      };\n\t      this.width = this.options.width || document.getElementById(this.options.containerID).offsetWidth - (this.margins.left + this.margins.right);\n\t      this.height = this.options.height;\n\t      if (this.height < MINIMUM_CHART_HEIGHT) {\n\t        this.height = MINIMUM_CHART_HEIGHT;\n\t      }\n\t      this.viewBoxWidth = this.width + this.margins.left + this.margins.right;\n\t      this.viewBoxHeight = this.height + this.margins.top + this.margins.bottom;\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * update - update the width and height attributes of the root and container\n\t    *  elements. then call update on the chart axes\n\t    * @param {array} nodes, an array of {object} for each node\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(nodes) {\n\t      this.setDimensions();\n\t      this.root.attr('width', this.viewBoxWidth).attr('height', this.viewBoxHeight);\n\t      this.container.attr('width', this.width).attr('height', this.height).attr('transform', 'translate(' + this.margins.left + ', ' + this.margins.top + ')');\n\t      if (typeof nodes === 'undefined') {\n\t        this.axes.update(this.getGroupsNodes(), false);\n\t      } else {\n\t        if (nodes instanceof Array) {\n\t          this.axes.update(nodes, true);\n\t          if (this.axes.initialized === true) {\n\t            this.axes.setInitialMinMax(this.axes.currentMinMax);\n\t          }\n\t        } else {\n\t          var shouldSetInitialMinMax = this.mergeGroups(nodes);\n\t          this.axes.update(this.getGroupsNodes(false), true);\n\t          if (shouldSetInitialMinMax) {\n\t            this.axes.setInitialMinMax(this.axes.currentMinMax);\n\t          }\n\t        }\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * draw - draws the markers on the chart\n\t    * @note this will automatically show/hide a warning message if the data\n\t    * is empty. Do not call super() to override this behavior.\n\t    * @param {array} nodes, an array of {object} for each marker\n\t    */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(nodes) {\n\t      if (!this.drawn) {\n\t        this.drawn = true;\n\t        this.root.transition().style('opacity', 1);\n\t      }\n\t      if (typeof nodes === 'undefined') {\n\t        if (this.getGroupsSize() <= 0) {\n\t          this.showWarn();\n\t          return;\n\t        }\n\t      } else {\n\t        if (nodes instanceof Array) {\n\t          var group = this.defaultGroup(nodes);\n\t          if (group.size() <= 0) {\n\t            this.showWarn();\n\t            return;\n\t          }\n\t        } else {\n\t          if (this.getGroupsSize() <= 0) {\n\t            this.showWarn();\n\t            return;\n\t          }\n\t        }\n\t      }\n\t      this.removeWarn();\n\t    }\n\t\n\t    /*\n\t    * defaultGroup - creates a default group if an array is passed to the draw method\n\t    * @param {array} nodes, an array of Node's\n\t    */\n\t\n\t  }, {\n\t    key: 'defaultGroup',\n\t    value: function defaultGroup() {\n\t      throw new Error('defaultGroup must be implemented.');\n\t    }\n\t\n\t    /*\n\t    * applyFilters - apply any filters from the chart\n\t    * @param {object} filters, an array of filters to apply\n\t    * @returns {array} filtered, the filtered data\n\t    */\n\t\n\t  }, {\n\t    key: 'applyFilters',\n\t    value: function applyFilters(nodes, filters) {\n\t      var filters_ = filters || this.filters;\n\t      var filtered = [];\n\t      if (nodes) {\n\t        filtered = nodes.filter(function (d) {\n\t          var valid = true;\n\t          var keys = Object.keys(filters_);\n\t          var i = 0;\n\t          var keysLen = keys.length;\n\t          while (i < keysLen) {\n\t            var key = keys[i++];\n\t            var f = filters_[key](d);\n\t            if (typeof f === 'undefined') {\n\t              valid = false;\n\t              break;\n\t            }\n\t          }\n\t          if (valid) {\n\t            return d;\n\t          }\n\t        });\n\t      }\n\t      return filtered;\n\t    }\n\t\n\t    /*\n\t    * getWidth\n\t    * @return {number} width (excluding margins) for the root svg\n\t    */\n\t\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width - (this.margins.left + this.margins.right);\n\t    }\n\t\n\t    /*\n\t    * getHeigth\n\t    * @return {number} width (excluding margins) for the root svg\n\t    */\n\t\n\t  }, {\n\t    key: 'getHeight',\n\t    value: function getHeight() {\n\t      return this.height - (this.margins.top + this.margins.bottom);\n\t    }\n\t\n\t    /*\n\t    * showWarn - shows a warning message in the center of the chart\n\t    * @param {string} m, the message to display\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'showWarn',\n\t    value: function showWarn(m) {\n\t      var message = m || 'No data to display';\n\t      if (this.warn) {\n\t        this.removeWarn();\n\t      }\n\t      this.warn = this.container.append('g').style('opacity', 0).attr('class', 'd3cf-warn');\n\t      this.warn.append('text').attr('text-anchor', 'middle').attr('x', this.width / 2).attr('y', this.getHeight() / 2).text(message);\n\t      this.warn.transition().style('opacity', 1);\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * removeWarn - removes the warning message from the chart\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'removeWarn',\n\t    value: function removeWarn() {\n\t      if (this.warn) {\n\t        this.warn.remove();\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * remove - removes the chart from the DOM and any event listeners\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      this.zoom.remove();\n\t      this.tooltip.remove();\n\t      this.axes.remove();\n\t      this.container.remove();\n\t      this.root.remove();\n\t    }\n\t\n\t    /*\n\t    * destroy - destroys the chart and any associated elements\n\t    */\n\t\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.remove();\n\t      this.zoom = null;\n\t      this.tooltip = null;\n\t      this.axes = null;\n\t      this.container = null;\n\t      this.root = null;\n\t      this.resizeHandler = null;\n\t    }\n\t\n\t    /*\n\t    * addGroup\n\t    * @param {object} group, add a group to the chart\n\t    * @throws {InvalidGroupError} error\n\t    * @return {Chart} this\n\t    */\n\t\n\t  }, {\n\t    key: 'addGroup',\n\t    value: function addGroup(group) {\n\t      if (group instanceof _Group2.default === false) {\n\t        throw new _Errors.InvalidGroupError();\n\t      }\n\t      this.groups_[group.id] = group;\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * removeGroup\n\t    * @param {string} id, the group to remove\n\t    * @return {Chart} this\n\t    */\n\t\n\t  }, {\n\t    key: 'removeGroup',\n\t    value: function removeGroup(id) {\n\t      if (this.groups_.hasOwnProperty(id)) {\n\t        delete this.groups_[id];\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * getGroups - returns the groups associated with this chart\n\t    * @return {array} groups, the groups associated with this chart\n\t    */\n\t\n\t  }, {\n\t    key: 'getGroups',\n\t    value: function getGroups() {\n\t      return Object.values(this.groups_);\n\t    }\n\t\n\t    /*\n\t    * getGroups - returns the size of all the groups\n\t    * @param {boolean} shouldFilter, should the nodes be filtered by domain\n\t    * @return {Number} size, the size of all the groups\n\t    */\n\t\n\t  }, {\n\t    key: 'getGroupsSize',\n\t    value: function getGroupsSize(shouldFilter) {\n\t      var _this = this;\n\t\n\t      return this.getGroups().reduce(function (prev, nextObj) {\n\t        if (shouldFilter) {\n\t          return prev + _this.applyFilters(nextObj.getNodes()).length;\n\t        }\n\t        var filters = Object.assign({}, _this.filters);\n\t        if (filters.hasOwnProperty('_domain')) {\n\t          delete filters._domain;\n\t        }\n\t        return prev + _this.applyFilters(nextObj.getNodes(), filters).length;\n\t      }, 0);\n\t    }\n\t\n\t    /*\n\t    * getGroupsNodes - returns all the nodes for each group\n\t    * @param {boolean} shouldFilter, should the nodes be filtered by domain\n\t    * @return {array} nodes, an array of nodes\n\t    */\n\t\n\t  }, {\n\t    key: 'getGroupsNodes',\n\t    value: function getGroupsNodes(shouldFilter) {\n\t      var _this2 = this;\n\t\n\t      return this.getGroups().reduce(function (prevArr, nextObj) {\n\t        if (shouldFilter) {\n\t          return prevArr.concat(_this2.applyFilters(nextObj.getNodes()));\n\t        }\n\t        var filters = Object.assign({}, _this2.filters);\n\t        if (filters.hasOwnProperty('_domain')) {\n\t          delete filters._domain;\n\t        }\n\t        return prevArr.concat(_this2.applyFilters(nextObj.getNodes(), filters));\n\t      }, []);\n\t    }\n\t\n\t    /*\n\t    * mergeGroups - merge groups from data passed directly to the draw method\n\t    * @param {object} nodes, a grouping of nodes\n\t    * @return {boolean} shouldReset, should the axes domain be reset to currentMinMax\n\t    */\n\t\n\t  }, {\n\t    key: 'mergeGroups',\n\t    value: function mergeGroups() {\n\t      throw new Error('mergeGroups must be implemented.');\n\t    }\n\t\n\t    /*\n\t    * addFilter - add a filter to the chart\n\t    * @param {string} name, the name of the filter\n\t    * @param {function} fn, the function to be applied to the data\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'addFilter',\n\t    value: function addFilter(name, fn) {\n\t      this.filters[name] = _.bind(fn, this);\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * removeFilter - removes a filter from the chart\n\t    * @param {string} name, the name of the filter\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'removeFilter',\n\t    value: function removeFilter(name) {\n\t      if (this.filters[name] !== 'undefined') {\n\t        delete this.filters[name];\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * resetZoom - resets the zoom of the axes\n\t    */\n\t\n\t  }, {\n\t    key: 'resetZoom',\n\t    value: function resetZoom() {\n\t      if (this.zoom) {\n\t        return this.zoom.reset();\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Chart;\n\t}();\n\t\n\tmodule.exports = Chart;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\t\n\tvar Tooltip = function () {\n\t  /*\n\t  * Tooltip - allows for an HTML div to be faded in/out on mouseover of a marker\n\t  * @param {object} plot, the plot append the tooltip\n\t  * @param {object} options, the options for the plot\n\t  * @param {object} options.tooltip, the options for the tooltip\n\t  * @param {number} options.opacity, the opacity of the tooltip\n\t  * @param {object} options.template, an underscore compiled template\n\t  * @return {object} this\n\t  */\n\t  function Tooltip(plot, options) {\n\t    _classCallCheck(this, Tooltip);\n\t\n\t    this.tooltipOpts = options.tooltip || {\n\t      'opacity': 1,\n\t      'template': _.template('<span style=\"font-weight: bold;\"><%= obj.id %></span><p>x1: <%= obj.x1 %> x2: <% if (obj.x2) { %> <%= obj.x2 %> <% } %> y: <%= obj.y1 %></p>')\n\t    };\n\t    this.template = this.tooltipOpts.template || _.template('<span style=\"font-weight: bold;\"><%= obj.id %></span><p>x1: <%= obj.x1 %> x2: <%= obj.x2 %> y: <%= obj.y1 %></p>');\n\t    this.opacity = this.tooltipOpts.opacity || 1;\n\t    this.element = d3.select('body').append('div').attr('class', 'd3cf-tooltip').style('opacity', 0).html(this.template({}));\n\t    return this;\n\t  }\n\t\n\t  /*\n\t  * mouseover - unbound method for mouseover event\n\t  * @param {object} d, the data\n\t  * @param {number} x, the x coordinate\n\t  * @param {number} y, the y coordinate\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(Tooltip, [{\n\t    key: 'mouseover',\n\t    value: function mouseover(d, x, y) {\n\t      var box = this.element.node().getBoundingClientRect();\n\t      if (x + box.width >= window.innerWidth - 20) {\n\t        this.element.html(this.template(d)).style('left', x - 10 - Math.floor(box.width) + 'px').style('top', y + 'px');\n\t      } else {\n\t        this.element.html(this.template(d)).style('left', x + 10 + 'px').style('top', y + 'px');\n\t      }\n\t      this.element.transition().duration(200).style('opacity', this.opacity);\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * mouseout - unbound method for mouseout event\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'mouseout',\n\t    value: function mouseout() {\n\t      this.element.transition().duration(500).style('opacity', 0);\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * remove - removes the element from the DOM\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      return this.element.remove();\n\t    }\n\t  }]);\n\t\n\t  return Tooltip;\n\t}();\n\t\n\tmodule.exports = Tooltip;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\t\n\tvar MINIMUM_ZOOM_THRESHOLD = 5;\n\t\n\tvar Zoom = function () {\n\t  /*\n\t  * Zoom - a zoomable interface for a plot\n\t  * @param {object} plot, the plot to enable the zooming interface\n\t  * @param {object} options, the object containing the passed in options to the plot constructor\n\t  * @return {object} this\n\t  */\n\t  function Zoom(plot, options) {\n\t    _classCallCheck(this, Zoom);\n\t\n\t    this.plot = plot;\n\t    this.options = options;\n\t    this.bandPos = [-1, -1];\n\t    this.zoomArea = {\n\t      x1: 0,\n\t      y1: 0,\n\t      x2: 0,\n\t      y2: 0\n\t    };\n\t    this.drag = d3.drag();\n\t    this.zoomGroup = plot.container.append('g').attr('class', 'd3cf-zoom');\n\t    this.zoomBand = this.zoomGroup.append('rect').attr('width', 0).attr('height', 0).attr('x', 0).attr('y', 0).attr('class', 'd3cf-zoomBand');\n\t    this.zoomOverlay = this.zoomGroup.append('rect').attr('width', plot.getWidth()).attr('height', plot.getHeight()).attr('transform', 'translate(' + plot.margins.left + ', 0)').attr('class', 'd3cf-zoomOverlay').call(this.drag);\n\t    this.isZoomed = false;\n\t    var self = this; // eslint-disable-line consistent-this\n\t    this.drag.on('start.plot', function () {\n\t      // eslint-disable-line func-names\n\t      // Note: @ (this) is not the Zoom class but the DOM event\n\t      var pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n\t      self.dragStart = pos;\n\t    });\n\t    this.drag.on('drag.plot', function () {\n\t      // eslint-disable-line func-names\n\t      // Note: @ (this) is not the Zoom class but the DOM event\n\t      var pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n\t      _.bind(self.ondrag, self)(pos);\n\t    });\n\t    this.drag.on('end.plot', function () {\n\t      // eslint-disable-line func-names\n\t      // Note: @ (this) is not the Zoom class but the DOM event\n\t      var pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n\t      var zoomX = false;\n\t      if (Math.abs(self.dragStart[0] - pos[0]) > MINIMUM_ZOOM_THRESHOLD) {\n\t        zoomX = true;\n\t      }\n\t      var zoomY = false;\n\t      if (Math.abs(self.dragStart[1] - pos[1]) > MINIMUM_ZOOM_THRESHOLD) {\n\t        zoomY = true;\n\t      }\n\t      _.bind(self.ondragend, self)(pos, zoomX && zoomY);\n\t    });\n\t  }\n\t\n\t  /*\n\t  * ondrag - the event handler for the ondrag event\n\t  * @param {array} pos, the x,y position of the mouse\n\t  */\n\t\n\t\n\t  _createClass(Zoom, [{\n\t    key: 'ondrag',\n\t    value: function ondrag(pos) {\n\t      if (pos[0] < this.bandPos[0]) {\n\t        this.zoomBand.attr('transform', 'translate(' + (pos[0] + this.plot.margins.left) + ', ' + this.bandPos[1] + ')');\n\t      }\n\t      if (pos[1] < this.bandPos[1]) {\n\t        this.zoomBand.attr('transform', 'translate(' + (pos[0] + this.plot.margins.left) + ', ' + pos[1] + ')');\n\t      }\n\t      if (pos[1] < this.bandPos[1] && pos[0] > this.bandPos[0]) {\n\t        this.zoomBand.attr('transform', 'translate(' + (this.bandPos[0] + this.plot.margins.left) + ', ' + pos[1] + ')');\n\t      }\n\t      if (this.bandPos[0] === -1) {\n\t        this.bandPos = pos;\n\t        this.zoomBand.attr('transform', 'translate(' + (this.bandPos[0] + this.plot.margins.left) + ', ' + this.bandPos[1] + ')');\n\t      }\n\t      this.zoomBand.transition().duration(1).attr('width', Math.abs(this.bandPos[0] - pos[0])).attr('height', Math.abs(this.bandPos[1] - pos[1]));\n\t    }\n\t\n\t    /*\n\t    * ondragend - the event handler for the ondragend event\n\t    * @param {array} pos, the x,y position of the mouse\n\t    */\n\t\n\t  }, {\n\t    key: 'ondragend',\n\t    value: function ondragend(pos, zoom) {\n\t      var x1 = this.plot.axes.xScale.invert(this.bandPos[0]);\n\t      var x2 = this.plot.axes.xScale.invert(pos[0]);\n\t      if (x1 < x2) {\n\t        this.zoomArea.x1 = x1;\n\t        this.zoomArea.x2 = x2;\n\t      } else {\n\t        this.zoomArea.x1 = x2;\n\t        this.zoomArea.x2 = x1;\n\t      }\n\t      var y1 = this.plot.axes.yScale.invert(pos[1]);\n\t      var y2 = this.plot.axes.yScale.invert(this.bandPos[1]);\n\t      if (y1 < y2) {\n\t        this.zoomArea.y1 = y1;\n\t        this.zoomArea.y2 = y2;\n\t      } else {\n\t        this.zoomArea.y1 = y2;\n\t        this.zoomArea.y2 = y1;\n\t      }\n\t      this.bandPos = [-1, -1];\n\t      this.zoomBand.transition().attr('width', 0).attr('height', 0).attr('x', this.bandPos[0]).attr('y', this.bandPos[1]);\n\t      if (zoom) {\n\t        this.zoom();\n\t      }\n\t    }\n\t\n\t    /*\n\t    * zoom - the zooming method called an the end of ondragend\n\t    */\n\t\n\t  }, {\n\t    key: 'zoom',\n\t    value: function zoom() {\n\t      this.isZoomed = true;\n\t      this.plot.axes.zoom(this.zoomArea);\n\t      this.plot.draw();\n\t    }\n\t\n\t    /*\n\t    * resetZoom - reset the plot zoom back to the original viewBox\n\t    */\n\t\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      this.isZoomed = false;\n\t      this.plot.axes.reset();\n\t      this.plot.draw();\n\t    }\n\t\n\t    /*\n\t    * remove - remove the zoom interface from a plot\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      this.zoomGroup.remove();\n\t      this.drag.on('drag.plot', null);\n\t      this.drag.on('end.plot', null);\n\t      this.drag.on('start.plot', null);\n\t    }\n\t  }]);\n\t\n\t  return Zoom;\n\t}();\n\t\n\tmodule.exports = Zoom;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _Chart2 = __webpack_require__(14);\n\t\n\tvar _Chart3 = _interopRequireDefault(_Chart2);\n\t\n\tvar _NodeGroup = __webpack_require__(10);\n\t\n\tvar _NodeGroup2 = _interopRequireDefault(_NodeGroup);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _ = __webpack_require__(4);\n\t\n\tvar ScatterPlot = function (_Chart) {\n\t  _inherits(ScatterPlot, _Chart);\n\t\n\t  /*\n\t  * ScatterPlot - constructs the root SVG element to contain the ScatterPlot\n\t  * @param {object} options, the options to create a ScatterPlot\n\t  * @param {string} containerID, the id of the ScatterPlot container div\n\t  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n\t  * @param {object} tooltip,\n\t  * @param {number} tooltip.opacity, the background opacity for the tooltip\n\t  * @param {object} tooltip.template, the compiled template\n\t  * @param {boolean} scale, scale the svg on window resize @default false\n\t  * @param {boolean} resize, resize the svg on window resize @default true\n\t  * @returns {object} this, returns self\n\t  */\n\t  function ScatterPlot(options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, ScatterPlot);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ScatterPlot.__proto__ || Object.getPrototypeOf(ScatterPlot)).call(this, options));\n\t\n\t    _this.init();\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /*\n\t  * init - method to set/re-set the resizeHandler\n\t  * @returns {object} this\n\t  */\n\t\n\t\n\t  _createClass(ScatterPlot, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      _get(ScatterPlot.prototype.__proto__ || Object.getPrototypeOf(ScatterPlot.prototype), 'init', this).call(this);\n\t      var resizeEnabled = this.options.resize || true;\n\t      if (resizeEnabled) {\n\t        this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n\t        return window.addEventListener('resize', this.resizeHandler);\n\t      }\n\t    }\n\t\n\t    /*\n\t    * draw - draw using d3 select.data.enter workflow\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(data) {\n\t      _get(ScatterPlot.prototype.__proto__ || Object.getPrototypeOf(ScatterPlot.prototype), 'draw', this).call(this, data);\n\t      var groups = this.groups.selectAll('.group').data(this.getGroups(), function (d) {\n\t        return d.id;\n\t      });\n\t      groups.enter().append(function (group) {\n\t        return group.detached();\n\t      });\n\t      groups.each(function (group) {\n\t        return group.update();\n\t      });\n\t      groups.exit().remove();\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * defaultGroup - creates a default group if an array is passed to the draw method\n\t    * @param {array} nodes, an array of Node's\n\t    */\n\t\n\t  }, {\n\t    key: 'defaultGroup',\n\t    value: function defaultGroup(nodes) {\n\t      var group = this.getGroups().find(function (g) {\n\t        return g.id === 'default_';\n\t      });\n\t      if (typeof group === 'undefined') {\n\t        if (this.options.group && this.options.group.onEnter) {\n\t          group = new _NodeGroup2.default(this, { id: 'default_', onEnter: this.options.group.onEnter });\n\t        } else {\n\t          group = new _NodeGroup2.default(this, { id: 'default_' });\n\t        }\n\t      }\n\t      nodes.forEach(function (d) {\n\t        return group.addNode(d);\n\t      });\n\t      return group;\n\t    }\n\t\n\t    /*\n\t    * mergeGroups - merge groups from data passed directly to the draw method\n\t    * @param {object} groups, a set of Groups\n\t    * @return {boolean} shouldReset, should the axes domain be reset to currentMinMax\n\t    */\n\t\n\t  }, {\n\t    key: 'mergeGroups',\n\t    value: function mergeGroups(groups) {\n\t      var _this2 = this;\n\t\n\t      var notMerged = Object.keys(this.groups_);\n\t      var addedNewGroup = false;\n\t      Object.keys(groups).forEach(function (k) {\n\t        var idx = -1;\n\t        var group = _this2.groups_[k];\n\t        if (typeof group === 'undefined') {\n\t          addedNewGroup = true;\n\t          if (groups[k] instanceof _NodeGroup2.default) {\n\t            group = groups[k];\n\t            _this2.addGroup(group);\n\t          } else {\n\t            // TODO: allow the user to pass in an object with `data` array\n\t            throw new Error('Must be instance of a d3cf Group.');\n\t          }\n\t        } else {\n\t          idx = notMerged.indexOf(k);\n\t          if (idx >= 0) {\n\t            notMerged.splice(idx, 1);\n\t            // merge new group data into the existing group\n\t            groups[k].getNodes().forEach(function (n) {\n\t              group.addNode(n);\n\t            });\n\t          }\n\t        }\n\t      });\n\t      // remove the groups that have not been sliced\n\t      if (notMerged.length > 0) {\n\t        notMerged.forEach(function (k) {\n\t          _this2.removeGroup(k);\n\t        });\n\t        // if we have removed an existing group from the plot\n\t        // then we should set the axes to the currentMinMax\n\t        return true;\n\t      }\n\t      // if we have merged in new groups and the axes have been initialized\n\t      // then we should set the axes to the currentMinMax\n\t      if (addedNewGroup && this.axes.initialized === true) {\n\t        return true;\n\t      }\n\t      // do not set the axes\n\t      return false;\n\t    }\n\t\n\t    /*\n\t    * update the dimensions of the plot (axes, gridlines, then redraw)\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(data) {\n\t      _get(ScatterPlot.prototype.__proto__ || Object.getPrototypeOf(ScatterPlot.prototype), 'update', this).call(this, data);\n\t      this.draw(data);\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * remove - removes the plot from the DOM and any event listeners\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.resizeHandler) {\n\t        window.removeEventListener('resize', this.resizeHandler);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * resize - re-renders the plot\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize() {\n\t      this.update();\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * resetZoom - resets the zoom of the axes\n\t    */\n\t\n\t  }, {\n\t    key: 'resetZoom',\n\t    value: function resetZoom() {\n\t      if (this.zoom) {\n\t        return this.zoom.reset();\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ScatterPlot;\n\t}(_Chart3.default);\n\t\n\tmodule.exports = ScatterPlot;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _Chart2 = __webpack_require__(14);\n\t\n\tvar _Chart3 = _interopRequireDefault(_Chart2);\n\t\n\tvar _LineGroup = __webpack_require__(9);\n\t\n\tvar _LineGroup2 = _interopRequireDefault(_LineGroup);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _ = __webpack_require__(4);\n\t\n\tvar LineChart = function (_Chart) {\n\t  _inherits(LineChart, _Chart);\n\t\n\t  /*\n\t  * LineChart - constructs the root SVG element to contain the LineChart\n\t  * @param {object} options, the options to create a LineChart\n\t  * @param {string} containerID, the id of the LineChart container div\n\t  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n\t  * @param {object} tooltip,\n\t  * @param {number} tooltip.opacity, the background opacity for the tooltip\n\t  * @param {object} tooltip.template, the compiled template\n\t  * @param {boolean} scale, scale the svg on window resize @default false\n\t  * @param {boolean} resize, resize the svg on window resize @default true\n\t  * @returns {object} this, returns self\n\t  */\n\t  function LineChart(options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, LineChart);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).call(this, options));\n\t\n\t    _this.init();\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /*\n\t  * init - method to set/re-set the resizeHandler\n\t  * @returns {object} this\n\t  */\n\t\n\t\n\t  _createClass(LineChart, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'init', this).call(this);\n\t      var resizeEnabled = this.options.resize || true;\n\t      if (resizeEnabled) {\n\t        this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n\t        return window.addEventListener('resize', this.resizeHandler);\n\t      }\n\t    }\n\t\n\t    /*\n\t    * draw - draw using d3 select.data.enter workflow\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(data) {\n\t      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'draw', this).call(this, data);\n\t      var groups = this.groups.selectAll('.group').data(this.getGroups(), function (d) {\n\t        return d.id;\n\t      });\n\t      groups.enter().append(function (group) {\n\t        return group.detached();\n\t      });\n\t      groups.each(function (group) {\n\t        return group.update();\n\t      });\n\t      groups.exit().remove();\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * defaultGroup - creates a default group if an array is passed to the draw method\n\t    * @param {array} nodes, an array of Node's\n\t    */\n\t\n\t  }, {\n\t    key: 'defaultGroup',\n\t    value: function defaultGroup(nodes) {\n\t      var group = this.getGroups().find(function (g) {\n\t        return g.id === 'default_';\n\t      });\n\t      if (typeof group === 'undefined') {\n\t        if (this.options.group && this.options.group.onEnter) {\n\t          group = new _LineGroup2.default(this, { id: 'default_', onEnter: this.options.group.onEnter });\n\t        } else {\n\t          group = new _LineGroup2.default(this, { id: 'default_' });\n\t        }\n\t      }\n\t      nodes.forEach(function (d) {\n\t        return group.addNode(d);\n\t      });\n\t      return group;\n\t    }\n\t\n\t    /*\n\t    * mergeGroups - merge groups from data passed directly to the draw method\n\t    * @override\n\t    * @param {object} groups, a set of Groups\n\t    * @return {boolean} shouldReset, should the axes domain be reset to currentMinMax\n\t    */\n\t\n\t  }, {\n\t    key: 'mergeGroups',\n\t    value: function mergeGroups(groups) {\n\t      var _this2 = this;\n\t\n\t      var notMerged = Object.keys(this.groups_);\n\t      var addedNewGroup = false;\n\t      Object.keys(groups).forEach(function (k) {\n\t        var idx = -1;\n\t        var group = _this2.groups_[k];\n\t        if (typeof group === 'undefined') {\n\t          addedNewGroup = true;\n\t          if (groups[k] instanceof _LineGroup2.default) {\n\t            group = groups[k];\n\t            _this2.addGroup(group);\n\t          } else {\n\t            // TODO: allow the user to pass in an object with `data` array\n\t            throw new Error('Must be instance of a d3cf Group.');\n\t          }\n\t        } else {\n\t          idx = notMerged.indexOf(k);\n\t          if (idx >= 0) {\n\t            notMerged.splice(idx, 1);\n\t            // merge new group data into the existing group\n\t            groups[k].getNodes().forEach(function (n) {\n\t              group.addNode(n);\n\t            });\n\t          }\n\t        }\n\t      });\n\t      // remove the groups that have not been sliced\n\t      if (notMerged.length > 0) {\n\t        notMerged.forEach(function (k) {\n\t          _this2.removeGroup(k);\n\t        });\n\t        // if we have removed an existing group from the plot\n\t        // then we should set the axes to the currentMinMax\n\t        return true;\n\t      }\n\t      // if we have merged in new groups and the axes have been initialized\n\t      // then we should set the axes to the currentMinMax\n\t      if (addedNewGroup && this.axes.initialized === true) {\n\t        return true;\n\t      }\n\t      // do not set the axes\n\t      return false;\n\t    }\n\t\n\t    /*\n\t    * update the dimensions of the chart (axes, gridlines, then redraw)\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(data) {\n\t      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'update', this).call(this, data);\n\t      this.draw(data);\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * remove - removes the chart from the DOM and any event listeners\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'remove', this).call(this);\n\t      if (this.resizeHandler) {\n\t        window.removeEventListener('resize', this.resizeHandler);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * resize - re-renders the chart\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize() {\n\t      this.update();\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return LineChart;\n\t}(_Chart3.default);\n\t\n\tmodule.exports = LineChart;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// d3-chart-framework.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 175947d98250fde49763","export { default as Axes } from './Axes';\nexport { InvalidNodeError, InvalidGroupError } from './Errors';\nexport { default as Grid } from './Grid';\nexport { default as Group } from './groups/Group';\nexport { default as LineGroup } from './groups/LineGroup';\nexport { default as NodeGroup } from './groups/NodeGroup';\nexport { default as Node } from './nodes/Node';\nexport { default as LineNode } from './nodes/LineNode';\nexport { default as RectNode } from './nodes/RectNode';\nexport { default as SegmentNode } from './nodes/SegmentNode';\nexport { default as Plot } from './Chart';\nexport { default as ScatterPlot } from './ScatterPlot';\nexport { default as LineChart } from './LineChart';\nexport { default as Tooltip } from './Tooltip';\nexport { default as Zoom } from './Zoom';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","const d3 = require('d3');\nconst _ = require('underscore');\nconst moment = require('moment');\n\nimport Grid from './Grid';\n\n/*\n* getDatetimeUnit - determine the unit of time for padding the axis\n* @param {object} min, the min moment datetime object\n* @param {object} max, the max moment datetime object\n* @return {string} the datetime unit {day, week, month}\n*/\nfunction getDatetimeUnit(min, max) {\n  const diff = max.diff(min, 'days');\n  let unit = 'month';\n  if (diff <= 14) {\n    unit = 'day';\n  } else if (diff > 14 && diff <= 183) {\n    unit = 'week';\n  }\n  return unit;\n}\n\nclass Axes {\n  /*\n  * Axes\n  * constructs 2d cartesian axes, appends to the container SVG element of the chart\n  * @param {object} chart, the chart to append the axis\n  * @param {object} options, the properties for the axis\n  * @param {boolean} grid, should the grid be displayed?\n  * X axis properties\n  * @param {object} options.axes.x, the properties for x axis\n  * @param {string} options.axes.x.title, the title of the x axis\n  * @param {string} options.axes.x.type, the datatype of the x axis {numeric, datetime}\n  * Y axis properties\n  * @param {object} options.axes.y, the properties for y axis\n  * @param {string} options.axes.y.title, the title of the y axis\n  * @param {string} options.axes.y.type, the datatype of the y axis {numeric, datetime}\n  * @returns {object} this, returns self\n  * example usage:\n  *  with an instance of a chart:\n  ```\n  axes = new Axes(plot, {\n    axes: {\n      grid: true,\n      x: {\n        title: 'Time',\n        type: 'datetime',\n        minMax: [1443371126, 1474993537]\n      },\n      y: {\n        title: 'Incidents',\n        type: 'numeric',\n        minMax: [0, 100]\n      },\n    }\n  })\n  ```\n  */\n  constructor(chart, options) {\n    this.chart = chart;\n    this.options = options || {x: {title: 'x', type: 'numeric'}, y: {title: 'y', type: 'numeric'}, grid: true, filter: true};\n    this.initialized = false;\n    this.useAutoPadding = options.useAutoPadding || false;\n    this.initialMinMax = [[0, 0], [0, 0]];\n    this.currentMinMax = [[0, 0], [0, 0]];\n    this.draw();\n  }\n\n  /*\n  * init - initialize the plot x,y axes\n  * @param {array} xDomain, the zoom xDomain or undefined\n  * @param {array} yDomain, the zoom yDomain or undefined\n  */\n  draw(xDomain, yDomain) {\n    if (this.options.x.type === 'datetime') {\n      if (xDomain) {\n        this.xScale = d3.scaleTime().domain(xDomain).range([0, this.chart.getWidth()]).nice();\n      } else {\n        this.xScale = d3.scaleTime().domain(this.currentMinMax[0]).range([0, this.chart.getWidth()]).nice();\n      }\n    } else {\n      if (xDomain) {\n        this.xScale = d3.scaleLinear().domain(xDomain).range([0, this.chart.getWidth()]);\n      } else {\n        this.xScale = d3.scaleLinear().domain(this.currentMinMax[0]).range([0, this.chart.getWidth()]);\n      }\n    }\n    if (this.options.x.type === 'datetime') {\n      this.xAxis = d3.axisBottom().scale(this.xScale).ticks(10).tickFormat(d3.timeFormat(this.formatDate()));\n    } else {\n      this.xAxis = d3.axisBottom().scale(this.xScale).ticks(10);\n    }\n    if (this.options.x.type === 'datetime') {\n      this.xGroup = this.chart.container.append('g').attr('class', 'x d3cf-axis').attr('transform', `translate(${this.chart.margins.left}, ${this.chart.getHeight()})`).call(this.xAxis);\n      this.xGroup.selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', () => {\n        return 'rotate(-65)';\n      });\n    } else {\n      this.xGroup = this.chart.container.append('g').attr('class', 'x d3cf-axis').attr('transform', `translate(${this.chart.margins.left}, ${this.chart.getHeight()})`).call(this.xAxis);\n    }\n\n    if (yDomain) {\n      this.yScale = d3.scaleLinear().domain(yDomain).range([this.chart.getHeight(), 0]);\n    } else {\n      this.yScale = d3.scaleLinear().domain(this.currentMinMax[1]).range([this.chart.getHeight(), 0]);\n    }\n    this.yAxis = d3.axisLeft().scale(this.yScale);\n    this.yGroup = this.chart.container.append('g').attr('class', 'y d3cf-axis').attr('transform', `translate(${this.chart.margins.left}, 0)`).call(this.yAxis);\n    if (this.options.grid) {\n       this.grid = new Grid(this, this.chart);\n    }\n\n    let padding = 0;\n    if (this.options.x.type === 'datetime') {\n      padding = 45;\n    }\n\n    if (this.xLabel) {\n      // update\n      this.xLabel\n        .attr('dx', (this.chart.width / 2) - ((this.chart.margins.right + this.chart.margins.left) / 2))\n        .attr('dy', this.chart.margins.bottom);\n    } else {\n      // add\n      this.xLabel = this.chart.container\n        .append('g')\n          .attr('class', 'x d3cf-axis-label')\n          .attr('transform', `translate(${this.chart.margins.left}, ${this.chart.getHeight() + padding})`)\n        .append('text')\n          .attr('dx', (this.chart.width / 2) - ((this.chart.margins.right + this.chart.margins.left) / 2))\n          .attr('dy', this.chart.margins.bottom)\n          .attr('class', 'd3cf-axis-label')\n          .style('text-anchor', 'middle')\n          .text(() => {\n            return this.options.x.title || '';\n          });\n    }\n    if (this.yLabel) {\n      // update\n      this.yLabel\n        .attr('dx', -(this.chart.height / 2) + ((this.chart.margins.top + this.chart.margins.bottom) / 2))\n        .attr('dy', -this.chart.margins.left);\n    } else {\n      // add\n      this.yLabel = this.chart.container\n        .append('g')\n          .attr('class', 'y d3cf-axis-label')\n          .attr('transform', `translate(${this.chart.margins.left}, 0)`)\n        .append('text')\n          .attr('transform', 'rotate(-90)')\n          .attr('dx', -(this.chart.height / 2) + ((this.chart.margins.top + this.chart.margins.bottom) / 2))\n          .attr('dy', -this.chart.margins.left)\n          .attr('class', 'd3cf-axis-label')\n          .style('text-anchor', 'middle')\n          .text(() => {\n            return this.options.y.title;\n          });\n    }\n  }\n\n  /*\n  * setDomain - sets the x, y domains based on the passed in data\n  * @param {array} data, an array of {object} for each marker\n  */\n  setDomain(data) {\n    let xMin = 0;\n    let xMax = 0;\n    if (this.options.x.type === 'datetime') {\n      const x1 = _.pluck(data, 'x1');\n      const x2 = _.pluck(data, 'x2');\n      xMin = Axes.minDatetime(x1, this.useAutoPadding);\n      xMax = xMin;\n      if (x2.length > 0) {\n        xMax = Axes.maxDatetime(x2, this.useAutoPadding);\n      }\n      if (isNaN(xMax)) {\n        xMax = Axes.maxDatetime(x1, this.useAutoPadding);\n      }\n    } else {\n      const x1 = _.pluck(data, 'x1');\n      const x2 = _.pluck(data, 'x2');\n      xMin = Axes.minNumeric(x1, this.useAutoPadding);\n      xMax = xMin;\n      if (x2.length > 0) {\n        xMax = Axes.maxNumeric(x2, this.useAutoPadding);\n      }\n      if (isNaN(xMax)) {\n        xMax = Axes.maxNumeric(x1, this.useAutoPadding);\n      }\n    }\n\n    const yMin = 0;\n    const yMax = Axes.maxNumeric(_.pluck(data, 'y1'), this.useAutoPadding);\n    this.xScale.domain([xMin, xMax]);\n    this.yScale.domain([yMin, yMax]);\n    if (this.initialized === false) {\n      this.initialMinMax = [[xMin, xMax], [yMin, yMax]];\n      if (this.options.filter) {\n        this.chart.addFilter('_domain', (d) => {\n          // TODO: should this scope be the Plot or the Axes?\n          let x1 = this.xScale.domain()[0];\n          if (x1 instanceof Date) {\n            x1 = x1.getTime();\n          }\n          let x2 = this.xScale.domain()[1];\n          if (x2 instanceof Date) {\n            x2 = x2.getTime();\n          }\n          const y1 = this.yScale.domain()[0];\n          const y2 = this.yScale.domain()[1];\n          if (d.hasOwnProperty('x2')) {\n            if ((d.x1 >= x1 && d.x2 <= x2) && (d.y1 >= y1 && d.y1 <= y2)) {\n              return d;\n            }\n          } else {\n            if ((d.x1 >= x1) && (d.y1 >= y1 && d.y1 <= y2)) {\n              return d;\n            }\n          }\n        });\n      }\n    } else {\n      this.currentMinMax = [[xMin, xMax], [yMin, yMax]];\n    }\n    this.initialized = true;\n  }\n\n  /*\n  * setDomain - sets the x, y domains based on the passed in data\n  * @note this will overwrite the original x,y minMax options to the plot\n  * @param {array} data, an array of {object} for each marker\n  */\n  setInitialMinMax(newMinMax) {\n    this.initialMinMax = newMinMax;\n  }\n\n  /*\n  * update - update the x,y axes using the zoom domain\n  * @param {array} data, an array of {object} for each marker\n  * @param {boolean} shouldSetDomain, should the domain be set to data bounds\n  */\n  update(data, shouldSetDomain) {\n    this.remove();\n    if (data && shouldSetDomain) {\n      this.setDomain(data);\n    }\n    this.draw(this.xScale.domain(), this.yScale.domain());\n    return this;\n  }\n\n  /*\n  * reset - resets the x,y axes back to the original domain\n  */\n  reset() {\n    this.remove();\n    this.draw(this.initialMinMax[0], this.initialMinMax[1]);\n    return this;\n  }\n\n  /*\n  * zoom - zooms the x,y axes based on the zoomArea object\n  * @param {object} zoomArea, an object containing a bounding box of x,y coordinates\n  */\n  zoom(zoomArea) {\n    if (zoomArea.x1 > zoomArea.x2) {\n      this.xScale.domain([zoomArea.x2, zoomArea.x1]);\n    } else {\n      this.xScale.domain([zoomArea.x1, zoomArea.x2]);\n    }\n    if (this.options.x.type === 'datetime') {\n      this.xAxis.tickFormat(d3.timeFormat(this.formatDate()));\n    }\n    if (zoomArea.y1 > zoomArea.y2) {\n      this.yScale.domain([zoomArea.y2, zoomArea.y1]);\n    } else {\n      this.yScale.domain([zoomArea.y1, zoomArea.y2]);\n    }\n    const trans = this.chart.container.transition().duration(750);\n    this.xGroup.transition(trans).call(this.xAxis);\n    this.xGroup.selectAll('g').selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', 'rotate(-65)');\n    this.yGroup.transition(trans).call(this.yAxis);\n    if (this.grid) {\n      this.grid.remove();\n      this.grid = new Grid(this, this.chart);\n    }\n    return this;\n  }\n\n  /*\n  * remove - removes the x,y axis groups from the plot\n  */\n  remove() {\n    this.xGroup.remove();\n    this.yGroup.remove();\n    if (this.grid) {\n      return this.grid.remove();\n    }\n  }\n\n  /*\n  * formatDate - a method that formats the axis date label\n  */\n  formatDate() {\n    const xDomain = this.xScale.domain();\n    const duration = moment.duration(moment(xDomain[1]).diff(xDomain[0])).asDays();\n    if (duration <= 7) {\n      return '%b %d - %H:%M';\n    }\n    return '%b %d, %Y';\n  }\n\n  /*\n  * maxNumeric - determine the maximum value with padding. Padding is determined\n  * by the number of digits ^ 10 / 10, unless number of digets == 10 then return\n  * 10\n  * @param {array} data, an array of positive integers\n  * @return {number} max\n  */\n  static maxNumeric(data, useAutoPadding) {\n    const m = Math.floor(_.max(data));\n    if (useAutoPadding) {\n      const l = String(m).split('').length;\n      if (l === 1) {\n        return 10;\n      }\n      const p = (Math.pow(10, l)) / 10;\n      return m + p;\n    }\n    return m;\n  }\n\n  /*\n  * minNumeric - determine the minimum value with padding. Padding is determined\n  * by the number of digits ^ 10 / 10, unless number of digets == 10 then return\n  * 10\n  * @param {array} data, an array of positive integers\n  * @return {number} max\n  */\n  static minNumeric(data, useAutoPadding) {\n    const m = Math.floor(_.min(data));\n    if (useAutoPadding) {\n      const l = String(m).split('').length;\n      if (l === 1) {\n        return 10;\n      }\n      const p = (Math.pow(10, l)) / 10;\n      return m + p;\n    }\n    return m;\n  }\n\n  /*\n  * maxDatetime - determine the maximum value with padding\n  * @param {array} data, an array of timestamps in milliseconds\n  * @return {number} max, maximum datetime value\n  */\n  static maxDatetime(data, useAutoPadding) {\n    const max = moment(_.max(data));\n    if (useAutoPadding) {\n      const min = moment(_.min(data));\n      const unit = getDatetimeUnit(min, max);\n      return moment(max).add(1, unit).valueOf();\n    }\n    return max.valueOf();\n  }\n\n  /*\n  * minDatetime - determine the minimum value with padding\n  * @param {array} data, an array of timestamps in milliseconds\n  * @return {number} min, minimum datetime value\n  */\n  static minDatetime(data, useAutoPadding) {\n    const min = moment(_.min(data));\n    if (useAutoPadding) {\n      const max = moment(_.max(data));\n      const unit = getDatetimeUnit(min, max);\n      return moment(min).subtract(1, unit).valueOf();\n    }\n    return min.valueOf();\n  }\n}\n\n\nmodule.exports = Axes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Axes.js","const d3 = require('d3');\n\nclass Grid {\n  /*\n  * Grid - constructs grids lines for the plot\n  * @param {object} axes, the axes to determine xScale, yScale\n  * @param {object} plot, the plot to append the axis\n  * @param {object} options, the properties for the axis\n  * @returns {object} this\n  */\n  constructor(axes, plot, options) {\n    this.plot = plot;\n    this.options = options || {};\n    this.axes = axes;\n    this.init();\n    return this;\n  }\n\n  /*\n  * init - initialize the x,y grid lines for a plot\n  */\n  init() {\n    this.xGrid = d3.axisBottom().scale(this.axes.xScale).tickFormat('').tickSize((this.plot.getHeight()) * -1, 0, 0);\n    this.xGroup = this.plot.container.insert('g', ':first-child').attr('class', 'd3cf-grid').attr('transform', `translate(${this.plot.margins.left}, ${this.plot.getHeight()})`).attr('opacity', null).call(this.xGrid);\n    this.yGrid = d3.axisLeft().scale(this.axes.yScale).tickFormat('').tickSize((this.plot.getWidth()) * -1, 0, 0);\n    this.yGroup = this.plot.container.insert('g', ':first-child').attr('class', 'd3cf-grid').attr('transform', `translate(${this.plot.margins.left}, 0)`).attr('opacity', null).call(this.yGrid);\n  }\n\n  /*\n  * remove - removed the grid lines from the plot\n  */\n  remove() {\n    this.xGroup.remove();\n    this.yGroup.remove();\n  }\n}\n\nmodule.exports = Grid;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Grid.js","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"d3\"\n// module id = 3\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"underscore\"\n// module id = 4\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 5\n// module chunks = 0","/*\n* InvalidNodeError - error thrown when an object is not instanceof Node\n*\n* @param {string} [message], (optional) the message to the user\n*/\nexport class InvalidNodeError extends Error {\n  constructor(message) {\n    const message_ = message || 'Is not instanceof Node.';\n    super(message_);\n  }\n}\n\n/*\n* InvalidGroupError - error thrown when an object is not instanceof Group\n*\n* @param {string} [message], (optional) the message to the user\n*/\nexport class InvalidGroupError extends Error {\n  constructor(message) {\n    const message_ = message || 'Is not instanceof Group.';\n    super(message_);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Errors.js","const d3 = require('d3');\nconst _ = require('underscore');\n\nimport Node from '../nodes/Node';\nimport { InvalidNodeError } from '../Errors';\n\n\nfunction genId() {\n  const length = 9;\n  const prefix = 'group-';\n  return prefix + Math.random().toString(36).substr(2, length);\n}\n\nclass Group {\n  constructor(chart, options) {\n    this.options = options || {};\n    this.id = this.options.id || genId();\n    const onEnter = this.options.onEnter || Group.onEnter;\n    this.onEnter = _.bind(onEnter, this);\n    const onUpdate = this.options.onUpdate || Group.onUpdate;\n    this.onUpdate = _.bind(onUpdate, this);\n    const onExit = this.options.onExit || Group.onExit;\n    this.onExit = _.bind(onExit, this);\n    this.nodes_ = {};\n    this.chart = chart;\n    return this;\n  }\n\n  /*\n  * size - returns the size of the Group's nodes\n  * @return {number} size, the size of the group\n  */\n  size() {\n    return Object.values(this.nodes_).length;\n  }\n\n  /*\n  * addNode - adds a node to this group\n  * @param {object} node, the node to add\n  * @throws {InvalidGroupError} error\n  * @return {Group} this\n  */\n  addNode(node) {\n    if (typeof node === 'undefined' || !node instanceof Node) {\n      throw new InvalidNodeError();\n    }\n    this.nodes_[node.id] = node;\n    return this;\n  }\n\n  /*\n  * removeNode - removes a node from this group\n  * @param {string} id, the id to remove\n  * @return {object} this\n  */\n  removeNode(id) {\n    if (this.nodes_.hasOwnProperty(id)) {\n      delete this.nodes_[id];\n    }\n    return this;\n  }\n\n  /*\n  * getNodes - returns the nodes associated with this group\n  * @return {array} nodes, the nodes associated with this group\n  */\n  getNodes() {\n    return Object.values(this.nodes_);\n  }\n\n  /*\n  * update - handles updating the marker\n  * @return {object} this\n  */\n  update() {\n    throw new Error('Update must be implemented.');\n  }\n\n  /*\n  * detached - builds a detached svg group and returns the node\n  * @return {object} node, the SVG node to append to the parent during .call()\n  */\n  detached() {\n    this.remove();\n    this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'd3cf-group').remove();\n    this.update();\n    return this.group.node();\n  }\n\n  /*\n  * remove - removes the group from the DOM\n  */\n  remove() {\n    if (this.group) {\n      this.group.remove();\n    }\n  }\n\n  /*\n  * destroy - destroys the group and any associated elements\n  */\n  destroy() {\n    this.remove();\n    this.chart.removeLayer(this.id);\n    this.nodes = null;\n    this.chart = null;\n    this.group = null;\n  }\n\n  /*\n  * onEnter - the default event handler for a group. This may be overridden or\n  *   a new event handler passed into the constructor as `options.onEnter`\n  * @param {object} selections - the d3 selection object containing the children for this group\n  */\n  static onEnter() {}\n\n  /*\n  * onUpdate - the default event handler for a group. This may be overridden or\n  *   a new event handler passed into the constructor as `options.onUpdate`\n  * @param {object} selections - the d3 selection object for this group\n  */\n  static onUpdate() {}\n\n  /*\n  * onExit - the default event handler for a group. This may be overridden or\n  *   a new event handler passed into the constructor as `options.onExit`\n  * @param {object} selections - the d3 selection object for this group\n  */\n  static onExit() {}\n}\n\nmodule.exports = Group;\n\n\n\n// WEBPACK FOOTER //\n// ./src/groups/Group.js","const d3 = require('d3');\n\n\nfunction genId() {\n  const length = 9;\n  const prefix = 'node-';\n  return prefix + Math.random().toString(36).substr(2, length);\n}\n\nclass Node {\n  /*\n  * Node - base class\n  * @param {object} options, the options used to construct the SegmentMarker\n  * @param {object} options.meta, the optional meta data associated with the node (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(options) {\n    this.id = options.id || genId();\n    this.meta = options.meta || {};\n    this.group = null;\n    return this;\n  }\n\n  /*\n  * remove - removes the marker from the DOM\n  */\n  remove() {\n    if (this.group) {\n      return this.group.remove();\n    }\n  }\n\n  /*\n  * update - updates one or more elements within the RectNode SVG group\n  */\n  update() {\n    return this;\n  }\n\n  /*\n  * detached - builds a detached svg group and returns the node\n  * @return {object} node, the SVG node to append to the parent during .call()\n  */\n  detached() {\n    this.remove();\n    this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'd3cf-node').attr('opacity', this.o).remove();\n    this.update();\n    return this.group.node();\n  }\n\n}\n\n\nmodule.exports = Node;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/Node.js","const d3 = require('d3');\n\nimport Group from './Group';\n\n\nclass LineGroup extends Group {\n  constructor(chart, options) {\n    super(chart, options);\n    this.s = options.s || 'steelblue';\n    this.w = options.w || 1.5;\n    this.meta = options.meta || {};\n    const defaultGenerator = d3.line().x((d) => {\n      return this.chart.axes.xScale(d.x1);\n    }).y((d) => {\n      return this.chart.axes.yScale(d.y1);\n    });\n    this.generator = options.generator || defaultGenerator;\n    return this;\n  }\n\n  /*\n  * update - handles updating the marker\n  * @return {object} this\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      return;\n    }\n    const filtered = this.chart.applyFilters(this.getNodes());\n    this.group.attr('numNodes', filtered.length);\n\n    const path = this.group.append('path')\n      .datum(filtered)\n      .attr('stroke', this.s)\n      .attr('stroke-linejoin', 'round')\n      .attr('stroke-linecap', 'round')\n      .attr('stroke-width', this.w)\n      .attr('class', 'd3cf-line')\n      .attr('d', (d) => {\n        return this.generator(d);\n      })\n      .call(this.onEnter);\n    path.attr('stroke', this.s)\n      .attr('stroke-width', this.w)\n      .attr('d', (d) => {\n        return this.generator(d);\n      }).call(this.onUpdate);\n    path.exit().remove().call(this.onExit);\n    const nodes = this.group.selectAll('.node').data(filtered, (d) => {\n      return d.id;\n    });\n    nodes.enter().append((node) => {\n      return node.detached();\n    }).call(this.onEnter);\n    nodes.each((node) => {\n      return node.update();\n    }).call(this.onUpdate);\n    nodes.exit().remove().call(this.onExit);\n  }\n\n}\n\nmodule.exports = LineGroup;\n\n\n\n// WEBPACK FOOTER //\n// ./src/groups/LineGroup.js","import Group from './Group';\n\n\nclass NodeGroup extends Group {\n  constructor(chart, options) {\n    super(chart, options);\n    return this;\n  }\n\n  /*\n  * update - handles updating the marker\n  * @override\n  * @return {object} this\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      return;\n    }\n    const filtered = this.chart.applyFilters(this.getNodes());\n    this.group.attr('numNodes', filtered.length);\n    const nodes = this.group.selectAll('.node').data(filtered, (d) => {\n      return d.id;\n    });\n    nodes.enter().append((node) => {\n      return node.detached();\n    }).call(this.onEnter);\n    nodes.each((node) => {\n      return node.update();\n    }).call(this.onUpdate);\n    nodes.exit().remove().call(this.onExit);\n  }\n\n}\n\nmodule.exports = NodeGroup;\n\n\n\n// WEBPACK FOOTER //\n// ./src/groups/NodeGroup.js","const d3 = require('d3');\n\nimport Node from './Node';\n\n\nclass LineNode extends Node {\n  /*\n  * LineNode - a data point for a path/line generator\n  * @param {object} chart, an instance of a chart\n  * @param {object} options, the options used to construct the plot\n  * @param {number} options.x1, the value for x1 position\n  * @param {number} options.y1, the value for y1 position\n  * @param {string} options.r, the radius of the circle\n  * @param {number} options.o, the opacity of the cirle\n  * @param {object} options.meta, the optional meta data associated with the circle (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(chart, options) {\n    super(chart, options);\n    this.chart = chart;\n    this.x1 = options.x1;\n    this.y1 = options.y1;\n    this.r = options.r || 3;\n    this.o = options.o || 0;\n    this.style = options.style || 'd3cf-node';\n    this.meta = options.meta || {};\n    return this;\n  }\n\n  getFill(type) {\n    let fill = '#33B5E';\n    switch (type) {\n      case 'warning':\n        fill = '#FFBB33';\n        break;\n      case 'success':\n        fill = '#00C851';\n        break;\n      case 'info':\n        fill = '#33B5E5';\n        break;\n      default:\n        break;\n    }\n    return fill;\n  }\n\n  /*\n  * update - updates one or more elements\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      this.group = d3.select(`#${this.id}`);\n    }\n    /*\n    * Each node of the line's `path` (see LineGroup) is a transparent circle in\n    * order to have a mouseover event.\n    * @see https://groups.google.com/forum/#!topic/d3-js/gHzOj91X2NA\n    */\n    // select\n    const circle = this.group.selectAll('circle').data([this], (d) => {\n      return d.id;\n    });\n    // create\n    circle.enter().append('circle')\n      .attr('class', this.style)\n      .attr('cx', () => {\n        return this.chart.axes.xScale(this.x1);\n      }).attr('cy', () => {\n        return this.chart.axes.yScale(this.y1);\n      }).attr('r', () => {\n        return this.r;\n      }).attr('opacity', () => {\n        return this.o;\n      }).on('mouseover', () => {\n        if (this.chart.tooltip) {\n          return this.chart.tooltip.mouseover(this, d3.event.pageX, d3.event.pageY);\n        }\n      }).on('mouseout', () => {\n        if (this.chart.tooltip) {\n          return this.chart.tooltip.mouseout();\n        }\n      });\n    // update\n    circle.attr('cx', () => {\n      return this.chart.axes.xScale(this.x1);\n    }).attr('cy', () => {\n      return this.chart.axes.yScale(this.y1);\n    }).attr('r', () => {\n      return this.r;\n    }).attr('opacity', () => {\n      return this.o;\n    });\n    // remove\n    circle.exit().remove();\n    return this;\n  }\n\n}\n\n\nmodule.exports = LineNode;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/LineNode.js","const d3 = require('d3');\n\nimport Node from './Node';\n\n\nconst MINIMUM_MARKER_WIDTH = 10;\nconst MINIMUM_MARKER_HEIGHT = 10;\n\nclass RectNode extends Node {\n  /*\n  * RectNode - a rectangular node\n  * @param {object} plot, an instance of a plot\n  * @param {object} options, the options used to construct the plot\n  * @param {number} options.x1, the value for x1 position\n  * @param {number} options.x2, the value for x2 position\n  * @param {number} options.y1, the value for y1 position\n  * @param {number} options.h, the value for the height\n  * @param {string} options.f, the fill of the marker\n  * @param {number} options.o, the opacity of the marker\n  * @param {object} options.meta, the optional meta data associated with the marker (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(plot, options) {\n    super(options);\n    this.plot = plot;\n    this.x1 = options.x1;\n    this.x2 = options.x2;\n    this.y1 = options.y1;\n    this.h = options.h || 10;\n    this.f = options.f || '#345e7e';\n    this.o = options.o || 0.4;\n    this.style = options.style || 'd3cf-node';\n    return this;\n  }\n\n  /*\n  * update - updates one or more elements within the RectNode SVG group\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      this.group = d3.select(`#${this.id}`);\n    }\n    // select\n    const rect = this.group.selectAll('rect').data([this], (d) => {\n      return d.id;\n    });\n    // create\n    rect.enter().append('rect').attr('class', this.style).attr('x', () => {\n      return this.plot.axes.xScale(this.x1);\n    }).attr('y', () => {\n      let height = this.h;\n      if (height < MINIMUM_MARKER_HEIGHT) {\n        height = MINIMUM_MARKER_HEIGHT;\n      }\n      return this.plot.axes.yScale(this.y1) - height / 2;\n    }).attr('width', () => {\n      let width = this.plot.axes.xScale(this.x2) - this.plot.axes.xScale(this.x1);\n      if (width < MINIMUM_MARKER_WIDTH) {\n        width = MINIMUM_MARKER_WIDTH;\n      }\n      return width;\n    }).attr('height', () => {\n      let height = this.h;\n      if (height < MINIMUM_MARKER_HEIGHT) {\n        height = MINIMUM_MARKER_HEIGHT;\n      }\n      return height;\n    }).style('fill', () => {\n      return this.f;\n    }).style('opacity', () => {\n      return this.o;\n    }).on('mouseover', () => {\n      if (this.plot.tooltip) {\n        return this.plot.tooltip.mouseover(this, d3.event.pageX, d3.event.pageY);\n      }\n    }).on('mouseout', () => {\n      if (this.plot.tooltip) {\n        return this.plot.tooltip.mouseout();\n      }\n    });\n\n    // update\n    rect.attr('x', () => {\n      return this.plot.axes.xScale(this.x1);\n    }).attr('y', () => {\n      let height = this.h;\n      if (height < MINIMUM_MARKER_HEIGHT) {\n        height = MINIMUM_MARKER_HEIGHT;\n      }\n      return this.plot.axes.yScale(this.y1) - height / 2;\n    }).attr('width', () => {\n      let width = this.plot.axes.xScale(this.x2) - this.plot.axes.xScale(this.x1);\n      if (width < MINIMUM_MARKER_WIDTH) {\n        width = MINIMUM_MARKER_WIDTH;\n      }\n      return width;\n    }).attr('height', () => {\n      let height = this.h;\n      if (height < MINIMUM_MARKER_HEIGHT) {\n        height = MINIMUM_MARKER_HEIGHT;\n      }\n      return height;\n    });\n\n    // remove\n    rect.exit().remove();\n    return this;\n  }\n}\n\n\nmodule.exports = RectNode;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/RectNode.js","import d3 from 'd3';\nimport _ from 'underscore';\nimport Node from './Node';\n\nconst MINIMUM_LINE_STROKE = 4;\nconst MINIMUM_CIRCLE_RADIUS = 5;\nconst MINIMUM_LINE_THRESHOLD = 2;\n\nclass SegmentNode extends Node {\n  /*\n  * SegmentNode - a line with beginning and end circles\n  * @param {object} plot, an instance of a plot\n  * @param {object} options, the options used to construct the SegmentNode\n  * @param {number} options.x, the value for x position\n  * @param {number} options.y, the value for y position\n  * @param {number} options.l, the value for the length of the line\n  * @param {number} options.h, the value for the height\n  * @param {string} options.f, the fill of the line\n  * @param {number} options.o, the opacity of the line\n  * @param {object} options.meta, the optional meta data associated with the node (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(plot, options) {\n    super(options);\n    this.plot = plot;\n    this.x = options.x;\n    this.y = options.y;\n    this.w = options.w;\n    this.h = options.h || MINIMUM_LINE_STROKE;\n    this.r = options.r || MINIMUM_CIRCLE_RADIUS;\n    this.f = options.f || '#345e7e';\n    this.o = options.o || 0.3;\n    this.meta = options.meta || {};\n    return this;\n  }\n\n  /*\n  * remove - removes the node from the DOM\n  * @return {object} this\n  */\n  remove() {\n    if (this.group) {\n      return this.group.remove();\n    }\n  }\n\n  /*\n  * filteredOrderedPair - determine if the pair exists within the domain\n  */\n  filteredOrderedPair(orderedPair) {\n    if (orderedPair[0] < this.plot.axes.xScale.range()[0]) {\n      orderedPair[0] = null;\n    }\n    if (orderedPair[0] > this.plot.axes.xScale.range()[1]) {\n      orderedPair[0] = null;\n    }\n    if (orderedPair[1] < this.plot.axes.yScale.range()[1]) {\n      orderedPair[1] = null;\n    }\n    if (orderedPair[1] > this.plot.axes.yScale.range()[0]) {\n      orderedPair[1] = null;\n    }\n    return orderedPair;\n  }\n\n  /*\n  * update - handles updating the node\n  * @return {object} this\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      this.group = d3.select(`#${this.id}`);\n    }\n    const linePairs = [[this.plot.axes.xScale(this.x), this.plot.axes.yScale(this.y)], [this.plot.axes.xScale(this.w), this.plot.axes.yScale(this.y)]];\n    const lineDistance = this.distance(linePairs);\n    const totalRange = this.plot.axes.xScale.range()[1];\n    const linePercentage = Math.floor((lineDistance / totalRange) * 100);\n    const startPoint = this.filteredOrderedPair([this.plot.axes.xScale(this.x), this.plot.axes.yScale(this.y)]);\n    const start = this.group.selectAll('.start-circle').data([this], (d) => {\n      return d.id;\n    });\n    if (startPoint[0] !== null && startPoint[1] !== null) {\n      start.enter().append('circle').attr('class', 'start-circle').style('fill', this.f).attr('cx', startPoint[0]).attr('cy', startPoint[1]).attr('r', () => {\n        let radius = this.r;\n        radius = Math.ceil((radius * (linePercentage / 100)) + radius);\n        if (radius < MINIMUM_CIRCLE_RADIUS) {\n          radius = MINIMUM_CIRCLE_RADIUS;\n        }\n        return radius;\n      });\n      start.attr('cx', startPoint[0]).attr('cy', startPoint[1]).attr('r', () => {\n        let radius = this.r;\n        radius = Math.ceil((radius * (linePercentage / 100)) + radius);\n        if (radius < MINIMUM_CIRCLE_RADIUS) {\n          radius = MINIMUM_CIRCLE_RADIUS;\n        }\n        return radius;\n      });\n      start.exit().remove();\n    } else {\n      this.group.selectAll('.start-circle').remove();\n    }\n    if (linePercentage >= MINIMUM_LINE_THRESHOLD) {\n      const line = this.group.selectAll('line').data([this], (d) => {\n        return d.id;\n      });\n      line.enter().append('line').attr('x1', () => {\n        if (linePairs[0][0] <= this.plot.axes.xScale.range()[0]) {\n          return this.plot.axes.xScale.range()[0];\n        }\n        if (linePairs[0][0] >= this.plot.axes.xScale.range()[1]) {\n          return null;\n        }\n        return linePairs[0][0];\n      }).attr('y1', linePairs[0][1]).attr('x2', () => {\n        if (linePairs[1][0] >= this.plot.axes.xScale.range()[1]) {\n          return this.plot.axes.xScale.range()[1];\n        }\n        if (linePairs[1][0] <= this.plot.axes.xScale.range()[0]) {\n          return null;\n        }\n        return linePairs[1][0];\n      }).attr('y2', linePairs[1][1]).attr('stroke-width', () => {\n        let height = this.h;\n        height = Math.ceil((height * (linePercentage / 100)) + height);\n        if (height < MINIMUM_LINE_STROKE) {\n          return MINIMUM_LINE_STROKE;\n        }\n        return height;\n      }).attr('stroke', this.f);\n      line.attr('x1', () => {\n        if (linePairs[0][0] <= this.plot.axes.xScale.range()[0]) {\n          return this.plot.axes.xScale.range()[0];\n        }\n        if (linePairs[0][0] >= this.plot.axes.xScale.range()[1]) {\n          return null;\n        }\n        return linePairs[0][0];\n      }).attr('y1', linePairs[0][1]).attr('x2', () => {\n        if (linePairs[1][0] >= this.plot.axes.xScale.range()[1]) {\n          return this.plot.axes.xScale.range()[1];\n        }\n        if (linePairs[1][0] <= this.plot.axes.xScale.range()[0]) {\n          return null;\n        }\n        return linePairs[1][0];\n      }).attr('y2', linePairs[1][1]).attr('stroke-width', () => {\n        let height = this.h;\n        height = Math.ceil((height * (linePercentage / 100)) + height);\n        if (height < MINIMUM_LINE_STROKE) {\n          return MINIMUM_LINE_STROKE;\n        }\n        return height;\n      });\n    } else {\n      this.group.selectAll('line').remove();\n    }\n    const endPoint = this.filteredOrderedPair([this.plot.axes.xScale(this.w), this.plot.axes.yScale(this.y)]);\n    if (linePercentage >= MINIMUM_LINE_THRESHOLD) {\n      if (endPoint[0] !== null && endPoint[1] !== null) {\n        const end = this.group.selectAll('.end-circle').data([this], (d) => {\n          return d.id;\n        });\n        end.enter().append('circle').attr('class', 'end-circle').attr('cx', endPoint[0]).attr('cy', endPoint[1]).attr('r', () => {\n          let radius = this.r;\n          radius = Math.ceil(((radius * linePercentage) / 100) + radius);\n          if (radius < MINIMUM_CIRCLE_RADIUS) {\n            radius = MINIMUM_CIRCLE_RADIUS;\n          }\n          return radius;\n        }).style('fill', this.f);\n        end.attr('class', 'end-circle').attr('cx', endPoint[0]).attr('cy', endPoint[1]).attr('r', () => {\n          let radius = this.r;\n          radius = Math.ceil(((radius * linePercentage) / 100) + radius);\n          if (radius < MINIMUM_CIRCLE_RADIUS) {\n            radius = MINIMUM_CIRCLE_RADIUS;\n          }\n          return radius;\n        });\n      } else {\n        this.group.selectAll('.end-circle').remove();\n      }\n    } else {\n      this.group.selectAll('.end-circle').remove();\n    }\n    return this;\n  }\n\n  /*\n  * detached - builds a detached svg group and returns the node\n  * @return {object} node, the SVG node to append to the parent during .call()\n  */\n  detached() {\n    this.remove();\n    this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'node').attr('opacity', this.o).remove();\n    this.update();\n    this.group.node();\n  }\n\n  /*\n  * distance - determine the distance between two pairs\n  */\n  distance(pairs) {\n    return Math.sqrt(Math.pow(Math.abs(pairs[0][0] - pairs[1][0]), 2) + Math.pow(Math.abs(pairs[0][1] - pairs[1][1]), 2));\n  }\n\n  /*\n  * groupOverlappingSegments - group overlapping segments together\n  * @param {array} segments, an array of SegmentNode's\n  * @return {object} groups, groups of overlapping segments\n  */\n  static groupOverlappingSegments(segments) {\n    const groups = {};\n    const segmentsByHeightAndCumulative = _.groupBy(segments, (segment) => {\n      let c = false;\n      if (typeof segment.meta.cumulative === 'undefined') {\n        c = false;\n      } else {\n        c = segment.meta.cumulative;\n      }\n      return `${segment.y}:${c}`;\n    });\n    Object.keys(segmentsByHeightAndCumulative).forEach((key) => {\n      const values = segmentsByHeightAndCumulative[key];\n      values.sort((a, b) => {\n        return a.x - b.x;\n      });\n      let i = 0;\n      const points = [];\n      while (i < values.length) {\n        if (i === 0) {\n          points[0] = values[0];\n          const groupName = `${values[0].w}:${key}`;\n          groups[groupName] = [values[0]];\n          i++;\n          continue; // eslint-disable-line no-continue\n        }\n        const lastIdx = points.length - 1;\n        if (lastIdx < 0) {\n          break;\n        }\n        const lastPoint = points[lastIdx];\n        if (values[i].x >= lastPoint.x && values[i].w <= lastPoint.w) {\n          const groupName = `${lastPoint.w}:${key}`;\n          let group = groups[groupName];\n          if (typeof group === 'undefined') {\n            group = [];\n          }\n          group.push(values[i]);\n          i++;\n        } else {\n          points[lastIdx + 1] = values[i];\n          const groupName = `${values[i].w}:${key}`;\n          groups[groupName] = [values[i]];\n          i++;\n        }\n      }\n    });\n    return groups;\n  }\n}\n\n\nmodule.exports = SegmentNode;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/SegmentNode.js","const d3 = require('d3');\nconst _ = require('underscore');\n\nimport Axes from './Axes';\nimport Tooltip from './Tooltip';\nimport Zoom from './Zoom';\nimport Group from './groups/Group';\nimport { InvalidGroupError } from './Errors';\n\n\nconst MINIMUM_CHART_HEIGHT = 300;\n\nclass Chart {\n  /*\n  * Chart - creates a new instance of a chart\n  * @param {object} options, the options to create a chart\n  * @param {string} containerID, the id of the container div\n  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n  * @param {object} tooltip,\n  * @param {number} tooltip.opacity, the background opacity for the tooltip\n  * @param {object} tooltip.template, the compiled template\n  * @param {boolean} scale, scale the svg on window resize @default false\n  * @param {boolean} resize, resize the svg on window resize @default true\n  * @returns {object} this, returns self\n  */\n  constructor(options) {\n    this.options = options;\n    this.drawn = false;\n    this.filters = options.filters || {};\n    this.groups_ = {};\n    return this;\n  }\n\n  /*\n  * init - method to initialize the chart, allows the chart to be re-initialized\n  *  on resize while keeping the current chart data in memory\n  * @returns {object} this\n  */\n  init() {\n    this.setDimensions();\n    const scale = this.options.scale || false;\n    if (scale) {\n      this.root = d3.select(`#${this.options.containerID}`).append('svg').attr('viewBox', `0 0 ${this.viewBoxWidth} ${this.viewBoxHeight}`).attr('preserveAspectRatio', 'xMinYMin meet');\n    } else {\n      this.root = d3.select(`#${this.options.containerID}`).append('svg').attr('width', this.viewBoxWidth).attr('height', this.viewBoxHeight);\n    }\n    this.container = this.root.append('g').attr('class', this.options.svgContainerClass).attr('width', this.getWidth()).attr('height', this.getHeight()).attr('transform', `translate(${this.margins.left}, ${this.margins.top})`);\n    this.axes = new Axes(this, this.options.axes);\n    this.tooltip = new Tooltip(this, this.options);\n    const zoomEnabled = this.options.zoom || false;\n    if (zoomEnabled) {\n      this.zoom = new Zoom(this, this.options);\n    }\n    this.groups = this.container.append('g').attr('class', 'd3cf-groups').attr('transform', `translate(${this.margins.left}, 0)`);\n    // this.update([]);\n    return this;\n  }\n\n  /*\n  * setDimensions - method to set the dimensions of the chart based on the current window\n  */\n  setDimensions() {\n    this.margins = this.options.margins || {\n      left: 40,\n      right: 20,\n      top: 20,\n      bottom: 40,\n    };\n    this.width = this.options.width || document.getElementById(this.options.containerID).offsetWidth - (this.margins.left + this.margins.right);\n    this.height = this.options.height;\n    if (this.height < MINIMUM_CHART_HEIGHT) {\n      this.height = MINIMUM_CHART_HEIGHT;\n    }\n    this.viewBoxWidth = this.width + this.margins.left + this.margins.right;\n    this.viewBoxHeight = this.height + this.margins.top + this.margins.bottom;\n    return this;\n  }\n\n  /*\n  * update - update the width and height attributes of the root and container\n  *  elements. then call update on the chart axes\n  * @param {array} nodes, an array of {object} for each node\n  * @returns {object} this\n  */\n  update(nodes) {\n    this.setDimensions();\n    this.root.attr('width', this.viewBoxWidth).attr('height', this.viewBoxHeight);\n    this.container.attr('width', this.width).attr('height', this.height).attr('transform', `translate(${this.margins.left}, ${this.margins.top})`);\n    if (typeof nodes === 'undefined') {\n      this.axes.update(this.getGroupsNodes(), false);\n    } else {\n      if (nodes instanceof Array) {\n        this.axes.update(nodes, true);\n        if (this.axes.initialized === true) {\n          this.axes.setInitialMinMax(this.axes.currentMinMax);\n        }\n      } else {\n        const shouldSetInitialMinMax = this.mergeGroups(nodes);\n        this.axes.update(this.getGroupsNodes(false), true);\n        if (shouldSetInitialMinMax) {\n          this.axes.setInitialMinMax(this.axes.currentMinMax);\n        }\n      }\n    }\n    return this;\n  }\n\n  /*\n  * draw - draws the markers on the chart\n  * @note this will automatically show/hide a warning message if the data\n  * is empty. Do not call super() to override this behavior.\n  * @param {array} nodes, an array of {object} for each marker\n  */\n  draw(nodes) {\n    if (!this.drawn) {\n      this.drawn = true;\n      this.root.transition().style('opacity', 1);\n    }\n    if (typeof nodes === 'undefined') {\n      if (this.getGroupsSize() <= 0) {\n        this.showWarn();\n        return;\n      }\n    } else {\n      if (nodes instanceof Array) {\n        const group = this.defaultGroup(nodes);\n        if (group.size() <= 0) {\n          this.showWarn();\n          return;\n        }\n      } else {\n        if (this.getGroupsSize() <= 0) {\n          this.showWarn();\n          return;\n        }\n      }\n    }\n    this.removeWarn();\n  }\n\n  /*\n  * defaultGroup - creates a default group if an array is passed to the draw method\n  * @param {array} nodes, an array of Node's\n  */\n  defaultGroup() {\n    throw new Error('defaultGroup must be implemented.');\n  }\n\n  /*\n  * applyFilters - apply any filters from the chart\n  * @param {object} filters, an array of filters to apply\n  * @returns {array} filtered, the filtered data\n  */\n  applyFilters(nodes, filters) {\n    const filters_ = filters || this.filters;\n    let filtered = [];\n    if (nodes) {\n      filtered = nodes.filter((d) => {\n        let valid = true;\n        const keys = Object.keys(filters_);\n        let i = 0;\n        const keysLen = keys.length;\n        while (i < keysLen) {\n          const key = keys[i++];\n          const f = filters_[key](d);\n          if (typeof f === 'undefined') {\n            valid = false;\n            break;\n          }\n        }\n        if (valid) {\n          return d;\n        }\n      });\n    }\n    return filtered;\n  }\n\n  /*\n  * getWidth\n  * @return {number} width (excluding margins) for the root svg\n  */\n  getWidth() {\n    return this.width - (this.margins.left + this.margins.right);\n  }\n\n  /*\n  * getHeigth\n  * @return {number} width (excluding margins) for the root svg\n  */\n  getHeight() {\n    return this.height - (this.margins.top + this.margins.bottom);\n  }\n\n  /*\n  * showWarn - shows a warning message in the center of the chart\n  * @param {string} m, the message to display\n  * @return {object} this\n  */\n  showWarn(m) {\n    const message = m || 'No data to display';\n    if (this.warn) {\n      this.removeWarn();\n    }\n    this.warn = this.container.append('g').style('opacity', 0).attr('class', 'd3cf-warn');\n    this.warn.append('text').attr('text-anchor', 'middle').attr('x', this.width / 2).attr('y', this.getHeight() / 2).text(message);\n    this.warn.transition().style('opacity', 1);\n    return this;\n  }\n\n  /*\n  * removeWarn - removes the warning message from the chart\n  * @return {object} this\n  */\n  removeWarn() {\n    if (this.warn) {\n      this.warn.remove();\n    }\n    return this;\n  }\n\n  /*\n  * remove - removes the chart from the DOM and any event listeners\n  * @return {object} this\n  */\n  remove() {\n    this.zoom.remove();\n    this.tooltip.remove();\n    this.axes.remove();\n    this.container.remove();\n    this.root.remove();\n  }\n\n  /*\n  * destroy - destroys the chart and any associated elements\n  */\n  destroy() {\n    this.remove();\n    this.zoom = null;\n    this.tooltip = null;\n    this.axes = null;\n    this.container = null;\n    this.root = null;\n    this.resizeHandler = null;\n  }\n\n  /*\n  * addGroup\n  * @param {object} group, add a group to the chart\n  * @throws {InvalidGroupError} error\n  * @return {Chart} this\n  */\n  addGroup(group) {\n    if (group instanceof Group === false) {\n      throw new InvalidGroupError();\n    }\n    this.groups_[group.id] = group;\n    return this;\n  }\n\n  /*\n  * removeGroup\n  * @param {string} id, the group to remove\n  * @return {Chart} this\n  */\n  removeGroup(id) {\n    if (this.groups_.hasOwnProperty(id)) {\n      delete this.groups_[id];\n    }\n    return this;\n  }\n\n  /*\n  * getGroups - returns the groups associated with this chart\n  * @return {array} groups, the groups associated with this chart\n  */\n  getGroups() {\n    return Object.values(this.groups_);\n  }\n\n  /*\n  * getGroups - returns the size of all the groups\n  * @param {boolean} shouldFilter, should the nodes be filtered by domain\n  * @return {Number} size, the size of all the groups\n  */\n  getGroupsSize(shouldFilter) {\n    return this.getGroups().reduce((prev, nextObj) => {\n      if (shouldFilter) {\n        return prev + this.applyFilters(nextObj.getNodes()).length;\n      }\n      const filters = Object.assign({}, this.filters);\n      if (filters.hasOwnProperty('_domain')) {\n        delete filters._domain;\n      }\n      return prev + this.applyFilters(nextObj.getNodes(), filters).length;\n    }, 0);\n  }\n\n  /*\n  * getGroupsNodes - returns all the nodes for each group\n  * @param {boolean} shouldFilter, should the nodes be filtered by domain\n  * @return {array} nodes, an array of nodes\n  */\n  getGroupsNodes(shouldFilter) {\n    return this.getGroups().reduce((prevArr, nextObj) => {\n      if (shouldFilter) {\n        return prevArr.concat(this.applyFilters(nextObj.getNodes()));\n      }\n      const filters = Object.assign({}, this.filters);\n      if (filters.hasOwnProperty('_domain')) {\n        delete filters._domain;\n      }\n      return prevArr.concat(this.applyFilters(nextObj.getNodes(), filters));\n    }, []);\n  }\n\n  /*\n  * mergeGroups - merge groups from data passed directly to the draw method\n  * @param {object} nodes, a grouping of nodes\n  * @return {boolean} shouldReset, should the axes domain be reset to currentMinMax\n  */\n  mergeGroups() {\n    throw new Error('mergeGroups must be implemented.');\n  }\n\n  /*\n  * addFilter - add a filter to the chart\n  * @param {string} name, the name of the filter\n  * @param {function} fn, the function to be applied to the data\n  * @return {object} this\n  */\n  addFilter(name, fn) {\n    this.filters[name] = _.bind(fn, this);\n    return this;\n  }\n\n  /*\n  * removeFilter - removes a filter from the chart\n  * @param {string} name, the name of the filter\n  * @return {object} this\n  */\n  removeFilter(name) {\n    if (this.filters[name] !== 'undefined') {\n      delete this.filters[name];\n    }\n    return this;\n  }\n\n  /*\n  * resetZoom - resets the zoom of the axes\n  */\n  resetZoom() {\n    if (this.zoom) {\n      return this.zoom.reset();\n    }\n  }\n}\n\n\nmodule.exports = Chart;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Chart.js","const d3 = require('d3');\nconst _ = require('underscore');\n\nclass Tooltip {\n  /*\n  * Tooltip - allows for an HTML div to be faded in/out on mouseover of a marker\n  * @param {object} plot, the plot append the tooltip\n  * @param {object} options, the options for the plot\n  * @param {object} options.tooltip, the options for the tooltip\n  * @param {number} options.opacity, the opacity of the tooltip\n  * @param {object} options.template, an underscore compiled template\n  * @return {object} this\n  */\n  constructor(plot, options) {\n    this.tooltipOpts = options.tooltip || {\n      'opacity': 1,\n      'template': _.template('<span style=\"font-weight: bold;\"><%= obj.id %></span><p>x1: <%= obj.x1 %> x2: <% if (obj.x2) { %> <%= obj.x2 %> <% } %> y: <%= obj.y1 %></p>'),\n    };\n    this.template = this.tooltipOpts.template || _.template('<span style=\"font-weight: bold;\"><%= obj.id %></span><p>x1: <%= obj.x1 %> x2: <%= obj.x2 %> y: <%= obj.y1 %></p>');\n    this.opacity = this.tooltipOpts.opacity || 1;\n    this.element = d3.select('body').append('div').attr('class', 'd3cf-tooltip').style('opacity', 0).html(this.template({}));\n    return this;\n  }\n\n  /*\n  * mouseover - unbound method for mouseover event\n  * @param {object} d, the data\n  * @param {number} x, the x coordinate\n  * @param {number} y, the y coordinate\n  * @return {object} this\n  */\n  mouseover(d, x, y) {\n    const box = this.element.node().getBoundingClientRect();\n    if ((x + box.width) >= (window.innerWidth - 20)) {\n      this.element.html(this.template(d)).style('left', `${((x - 10) - Math.floor(box.width))}px`).style('top', `${y}px`);\n    } else {\n      this.element.html(this.template(d)).style('left', `${(x + 10)}px`).style('top', `${y}px`);\n    }\n    this.element.transition().duration(200).style('opacity', this.opacity);\n    return this;\n  }\n\n  /*\n  * mouseout - unbound method for mouseout event\n  * @return {object} this\n  */\n  mouseout() {\n    this.element.transition().duration(500).style('opacity', 0);\n    return this;\n  }\n\n  /*\n  * remove - removes the element from the DOM\n  */\n  remove() {\n    return this.element.remove();\n  }\n}\n\nmodule.exports = Tooltip;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Tooltip.js","const d3 = require('d3');\nconst _ = require('underscore');\n\nconst MINIMUM_ZOOM_THRESHOLD = 5;\n\nclass Zoom {\n  /*\n  * Zoom - a zoomable interface for a plot\n  * @param {object} plot, the plot to enable the zooming interface\n  * @param {object} options, the object containing the passed in options to the plot constructor\n  * @return {object} this\n  */\n  constructor(plot, options) {\n    this.plot = plot;\n    this.options = options;\n    this.bandPos = [-1, -1];\n    this.zoomArea = {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n    };\n    this.drag = d3.drag();\n    this.zoomGroup = plot.container.append('g').attr('class', 'd3cf-zoom');\n    this.zoomBand = this.zoomGroup.append('rect').attr('width', 0).attr('height', 0).attr('x', 0).attr('y', 0).attr('class', 'd3cf-zoomBand');\n    this.zoomOverlay = this.zoomGroup.append('rect').attr('width', plot.getWidth()).attr('height', plot.getHeight()).attr('transform', `translate(${plot.margins.left}, 0)`).attr('class', 'd3cf-zoomOverlay').call(this.drag);\n    this.isZoomed = false;\n    const self = this; // eslint-disable-line consistent-this\n    this.drag.on('start.plot', function() { // eslint-disable-line func-names\n      // Note: @ (this) is not the Zoom class but the DOM event\n      const pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n      self.dragStart = pos;\n    });\n    this.drag.on('drag.plot', function() { // eslint-disable-line func-names\n      // Note: @ (this) is not the Zoom class but the DOM event\n      const pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n      _.bind(self.ondrag, self)(pos);\n    });\n    this.drag.on('end.plot', function() { // eslint-disable-line func-names\n      // Note: @ (this) is not the Zoom class but the DOM event\n      const pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n      let zoomX = false;\n      if (Math.abs(self.dragStart[0] - pos[0]) > MINIMUM_ZOOM_THRESHOLD) {\n        zoomX = true;\n      }\n      let zoomY = false;\n      if (Math.abs(self.dragStart[1] - pos[1]) > MINIMUM_ZOOM_THRESHOLD) {\n        zoomY = true;\n      }\n      _.bind(self.ondragend, self)(pos, zoomX && zoomY);\n    });\n  }\n\n  /*\n  * ondrag - the event handler for the ondrag event\n  * @param {array} pos, the x,y position of the mouse\n  */\n  ondrag(pos) {\n    if (pos[0] < this.bandPos[0]) {\n      this.zoomBand.attr('transform', `translate(${(pos[0] + this.plot.margins.left)}, ${this.bandPos[1]})`);\n    }\n    if (pos[1] < this.bandPos[1]) {\n      this.zoomBand.attr('transform', `translate(${(pos[0] + this.plot.margins.left)}, ${pos[1]})`);\n    }\n    if (pos[1] < this.bandPos[1] && pos[0] > this.bandPos[0]) {\n      this.zoomBand.attr('transform', `translate(${(this.bandPos[0] + this.plot.margins.left)}, ${pos[1]})`);\n    }\n    if (this.bandPos[0] === -1) {\n      this.bandPos = pos;\n      this.zoomBand.attr('transform', `translate(${(this.bandPos[0] + this.plot.margins.left)}, ${this.bandPos[1]})`);\n    }\n    this.zoomBand.transition().duration(1).attr('width', Math.abs(this.bandPos[0] - pos[0])).attr('height', Math.abs(this.bandPos[1] - pos[1]));\n  }\n\n  /*\n  * ondragend - the event handler for the ondragend event\n  * @param {array} pos, the x,y position of the mouse\n  */\n  ondragend(pos, zoom) {\n    const x1 = this.plot.axes.xScale.invert(this.bandPos[0]);\n    const x2 = this.plot.axes.xScale.invert(pos[0]);\n    if (x1 < x2) {\n      this.zoomArea.x1 = x1;\n      this.zoomArea.x2 = x2;\n    } else {\n      this.zoomArea.x1 = x2;\n      this.zoomArea.x2 = x1;\n    }\n    const y1 = this.plot.axes.yScale.invert(pos[1]);\n    const y2 = this.plot.axes.yScale.invert(this.bandPos[1]);\n    if (y1 < y2) {\n      this.zoomArea.y1 = y1;\n      this.zoomArea.y2 = y2;\n    } else {\n      this.zoomArea.y1 = y2;\n      this.zoomArea.y2 = y1;\n    }\n    this.bandPos = [-1, -1];\n    this.zoomBand.transition().attr('width', 0).attr('height', 0).attr('x', this.bandPos[0]).attr('y', this.bandPos[1]);\n    if (zoom) {\n      this.zoom();\n    }\n  }\n\n  /*\n  * zoom - the zooming method called an the end of ondragend\n  */\n  zoom() {\n    this.isZoomed = true;\n    this.plot.axes.zoom(this.zoomArea);\n    this.plot.draw();\n  }\n\n  /*\n  * resetZoom - reset the plot zoom back to the original viewBox\n  */\n  reset() {\n    this.isZoomed = false;\n    this.plot.axes.reset();\n    this.plot.draw();\n  }\n\n  /*\n  * remove - remove the zoom interface from a plot\n  */\n  remove() {\n    this.zoomGroup.remove();\n    this.drag.on('drag.plot', null);\n    this.drag.on('end.plot', null);\n    this.drag.on('start.plot', null);\n  }\n}\n\n\nmodule.exports = Zoom;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Zoom.js","const _ = require('underscore');\n\nimport Chart from './Chart';\nimport NodeGroup from './groups/NodeGroup';\n\n\nclass ScatterPlot extends Chart {\n  /*\n  * ScatterPlot - constructs the root SVG element to contain the ScatterPlot\n  * @param {object} options, the options to create a ScatterPlot\n  * @param {string} containerID, the id of the ScatterPlot container div\n  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n  * @param {object} tooltip,\n  * @param {number} tooltip.opacity, the background opacity for the tooltip\n  * @param {object} tooltip.template, the compiled template\n  * @param {boolean} scale, scale the svg on window resize @default false\n  * @param {boolean} resize, resize the svg on window resize @default true\n  * @returns {object} this, returns self\n  */\n  constructor(options) {\n    super(options);\n    this.init();\n    return this;\n  }\n\n  /*\n  * init - method to set/re-set the resizeHandler\n  * @returns {object} this\n  */\n  init() {\n    super.init();\n    const resizeEnabled = this.options.resize || true;\n    if (resizeEnabled) {\n      this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n      return window.addEventListener('resize', this.resizeHandler);\n    }\n  }\n\n  /*\n  * draw - draw using d3 select.data.enter workflow\n  * @param {array} data, an array of {object} for each marker\n  * @returns {object} this\n  */\n  draw(data) {\n    super.draw(data);\n    const groups = this.groups.selectAll('.group').data(this.getGroups(), (d) => {\n      return d.id;\n    });\n    groups.enter().append((group) => {\n      return group.detached();\n    });\n    groups.each((group) => {\n      return group.update();\n    });\n    groups.exit().remove();\n    return this;\n  }\n\n  /*\n  * defaultGroup - creates a default group if an array is passed to the draw method\n  * @param {array} nodes, an array of Node's\n  */\n  defaultGroup(nodes) {\n    let group = this.getGroups().find((g) => {\n      return g.id === 'default_';\n    });\n    if (typeof group === 'undefined') {\n      if (this.options.group && this.options.group.onEnter) {\n        group = new NodeGroup(this, {id: 'default_', onEnter: this.options.group.onEnter});\n      } else {\n        group = new NodeGroup(this, {id: 'default_'});\n      }\n    }\n    nodes.forEach((d) => {\n      return group.addNode(d);\n    });\n    return group;\n  }\n\n  /*\n  * mergeGroups - merge groups from data passed directly to the draw method\n  * @param {object} groups, a set of Groups\n  * @return {boolean} shouldReset, should the axes domain be reset to currentMinMax\n  */\n  mergeGroups(groups) {\n    const notMerged = Object.keys(this.groups_);\n    let addedNewGroup = false;\n    Object.keys(groups).forEach((k) => {\n      let idx = -1;\n      let group = this.groups_[k];\n      if (typeof group === 'undefined') {\n        addedNewGroup = true;\n        if (groups[k] instanceof NodeGroup) {\n          group = groups[k];\n          this.addGroup(group);\n        } else {\n          // TODO: allow the user to pass in an object with `data` array\n          throw new Error('Must be instance of a d3cf Group.');\n        }\n      } else {\n        idx = notMerged.indexOf(k);\n        if (idx >= 0) {\n          notMerged.splice(idx, 1);\n          // merge new group data into the existing group\n          groups[k].getNodes().forEach((n) => {\n            group.addNode(n);\n          });\n        }\n      }\n    });\n    // remove the groups that have not been sliced\n    if (notMerged.length > 0) {\n      notMerged.forEach((k) => {\n        this.removeGroup(k);\n      });\n      // if we have removed an existing group from the plot\n      // then we should set the axes to the currentMinMax\n      return true;\n    }\n    // if we have merged in new groups and the axes have been initialized\n    // then we should set the axes to the currentMinMax\n    if (addedNewGroup && this.axes.initialized === true) {\n      return true;\n    }\n    // do not set the axes\n    return false;\n  }\n\n  /*\n  * update the dimensions of the plot (axes, gridlines, then redraw)\n  * @param {array} data, an array of {object} for each marker\n  * @returns {object} this\n  */\n  update(data) {\n    super.update(data);\n    this.draw(data);\n    return this;\n  }\n\n  /*\n  * remove - removes the plot from the DOM and any event listeners\n  * @return {object} this\n  */\n  remove() {\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler);\n    }\n    return this;\n  }\n\n  /*\n  * resize - re-renders the plot\n  * @return {object} this\n  */\n  resize() {\n    this.update();\n    return this;\n  }\n\n  /*\n  * resetZoom - resets the zoom of the axes\n  */\n  resetZoom() {\n    if (this.zoom) {\n      return this.zoom.reset();\n    }\n  }\n}\n\n\nmodule.exports = ScatterPlot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/ScatterPlot.js","const _ = require('underscore');\n\nimport Chart from './Chart';\nimport LineGroup from './groups/LineGroup';\n\n\nclass LineChart extends Chart {\n  /*\n  * LineChart - constructs the root SVG element to contain the LineChart\n  * @param {object} options, the options to create a LineChart\n  * @param {string} containerID, the id of the LineChart container div\n  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n  * @param {object} tooltip,\n  * @param {number} tooltip.opacity, the background opacity for the tooltip\n  * @param {object} tooltip.template, the compiled template\n  * @param {boolean} scale, scale the svg on window resize @default false\n  * @param {boolean} resize, resize the svg on window resize @default true\n  * @returns {object} this, returns self\n  */\n  constructor(options) {\n    super(options);\n    this.init();\n    return this;\n  }\n\n  /*\n  * init - method to set/re-set the resizeHandler\n  * @returns {object} this\n  */\n  init() {\n    super.init();\n    const resizeEnabled = this.options.resize || true;\n    if (resizeEnabled) {\n      this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n      return window.addEventListener('resize', this.resizeHandler);\n    }\n  }\n\n  /*\n  * draw - draw using d3 select.data.enter workflow\n  * @param {array} data, an array of {object} for each marker\n  * @returns {object} this\n  */\n  draw(data) {\n    super.draw(data);\n    const groups = this.groups.selectAll('.group').data(this.getGroups(), (d) => {\n      return d.id;\n    });\n    groups.enter().append((group) => {\n      return group.detached();\n    });\n    groups.each((group) => {\n      return group.update();\n    });\n    groups.exit().remove();\n    return this;\n  }\n\n  /*\n  * defaultGroup - creates a default group if an array is passed to the draw method\n  * @param {array} nodes, an array of Node's\n  */\n  defaultGroup(nodes) {\n    let group = this.getGroups().find((g) => {\n      return g.id === 'default_';\n    });\n    if (typeof group === 'undefined') {\n      if (this.options.group && this.options.group.onEnter) {\n        group = new LineGroup(this, {id: 'default_', onEnter: this.options.group.onEnter});\n      } else {\n        group = new LineGroup(this, {id: 'default_'});\n      }\n    }\n    nodes.forEach((d) => {\n      return group.addNode(d);\n    });\n    return group;\n  }\n\n  /*\n  * mergeGroups - merge groups from data passed directly to the draw method\n  * @override\n  * @param {object} groups, a set of Groups\n  * @return {boolean} shouldReset, should the axes domain be reset to currentMinMax\n  */\n  mergeGroups(groups) {\n    const notMerged = Object.keys(this.groups_);\n    let addedNewGroup = false;\n    Object.keys(groups).forEach((k) => {\n      let idx = -1;\n      let group = this.groups_[k];\n      if (typeof group === 'undefined') {\n        addedNewGroup = true;\n        if (groups[k] instanceof LineGroup) {\n          group = groups[k];\n          this.addGroup(group);\n        } else {\n          // TODO: allow the user to pass in an object with `data` array\n          throw new Error('Must be instance of a d3cf Group.');\n        }\n      } else {\n        idx = notMerged.indexOf(k);\n        if (idx >= 0) {\n          notMerged.splice(idx, 1);\n          // merge new group data into the existing group\n          groups[k].getNodes().forEach((n) => {\n            group.addNode(n);\n          });\n        }\n      }\n    });\n    // remove the groups that have not been sliced\n    if (notMerged.length > 0) {\n      notMerged.forEach((k) => {\n        this.removeGroup(k);\n      });\n      // if we have removed an existing group from the plot\n      // then we should set the axes to the currentMinMax\n      return true;\n    }\n    // if we have merged in new groups and the axes have been initialized\n    // then we should set the axes to the currentMinMax\n    if (addedNewGroup && this.axes.initialized === true) {\n      return true;\n    }\n    // do not set the axes\n    return false;\n  }\n\n  /*\n  * update the dimensions of the chart (axes, gridlines, then redraw)\n  * @param {array} data, an array of {object} for each marker\n  * @returns {object} this\n  */\n  update(data) {\n    super.update(data);\n    this.draw(data);\n    return this;\n  }\n\n  /*\n  * remove - removes the chart from the DOM and any event listeners\n  * @return {object} this\n  */\n  remove() {\n    super.remove();\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler);\n    }\n    return this;\n  }\n\n  /*\n  * resize - re-renders the chart\n  * @return {object} this\n  */\n  resize() {\n    this.update();\n    return this;\n  }\n}\n\n\nmodule.exports = LineChart;\n\n\n\n// WEBPACK FOOTER //\n// ./src/LineChart.js"],"sourceRoot":""}