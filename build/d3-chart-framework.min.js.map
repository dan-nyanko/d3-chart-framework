{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///d3-chart-framework.min.js","webpack:///webpack/bootstrap 7d2f3d9024d299cb174e","webpack:///./src/index.js","webpack:///./src/Axes.js","webpack:///./src/Grid.js","webpack:///external \"d3\"","webpack:///external \"underscore\"","webpack:///external \"moment\"","webpack:///./src/Errors.js","webpack:///./src/groups/Group.js","webpack:///./src/nodes/Node.js","webpack:///./src/groups/BarGroup.js","webpack:///./src/groups/LineGroup.js","webpack:///./src/groups/NodeGroup.js","webpack:///./src/nodes/BarNode.js","webpack:///./src/nodes/LineNode.js","webpack:///./src/nodes/RectNode.js","webpack:///./src/nodes/SegmentNode.js","webpack:///./src/Chart.js","webpack:///./src/Tooltip.js","webpack:///./src/Zoom.js","webpack:///./src/BarChart.js","webpack:///./src/ScatterPlot.js","webpack:///./src/LineChart.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_Axes","enumerable","get","_Errors","InvalidNodeError","InvalidGroupError","_Grid","_Group","_BarGroup","_LineGroup","_NodeGroup","_Node","_BarNode","_LineNode","_RectNode","_SegmentNode","_Chart","_BarChart","_ScatterPlot","_LineChart","_Tooltip","_Zoom","_classCallCheck","instance","Constructor","TypeError","getDatetimeUnit","min","max","diff","unit","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","key","protoProps","staticProps","prototype","_Grid2","d3","_","moment","Axes","chart","options","x","title","type","y","grid","filter","useAutoPadding","defaultMinMax","draw","xDomain","yDomain","_this","xScale","scaleTime","domain","range","getWidth","nice","scaleBand","rangeRound","padding","scaleLinear","xAxis","axisBottom","scale","ticks","tickFormat","timeFormat","formatDate","xGroup","container","append","attr","margins","left","getHeight","selectAll","style","yScale","yAxis","axisLeft","yGroup","xLabel","width","right","bottom","text","yLabel","height","top","_this2","minMax","calcMinMax","removeFilter","addFilter","d","x1","Date","getTime","x2","y1","y2","hasOwnProperty","Math","floor","data","shouldSetDomain","remove","setDomain","shouldFilterDomain","getGroupsNodes","xMin","xMax","pluck","minDatetime","maxDatetime","isNaN","minNumeric","maxNumeric","yMin","yMax","zoomArea","trans","transition","duration","asDays","l","String","split","pow","ceil","add","valueOf","subtract","Grid","axes","plot","init","xGrid","tickSize","insert","yGrid","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_Error","message","message_","getPrototypeOf","Error","_Error2","genId","prefix","random","toString","substr","_Node2","Group","onEnter","bind","onUpdate","onExit","nodes_","values","node","group","select","document","createElementNS","namespaces","svg","update","removeLayer","nodes","Node","meta","o","_Group2","_Group3","BarGroup","_ret","filtered","applyFilters","getNodes","enter","detached","each","exit","LineGroup","s","w","defaultGenerator","line","generator","cmp","a","b","sort","path","empty","datum","NodeGroup","_Node3","BarNode","f","r","fill","rect","bandwidth","getFill","on","tooltip","mouseover","event","pageX","pageY","mouseout","LineNode","circle","MINIMUM_MARKER_WIDTH","MINIMUM_MARKER_HEIGHT","RectNode","h","_d","_d2","_underscore","_underscore2","MINIMUM_LINE_STROKE","MINIMUM_CIRCLE_RADIUS","MINIMUM_LINE_THRESHOLD","SegmentNode","orderedPair","linePairs","lineDistance","distance","totalRange","linePercentage","startPoint","filteredOrderedPair","start","radius","endPoint","end","pairs","sqrt","abs","segments","groups","segmentsByHeightAndCumulative","groupBy","segment","cumulative","keys","forEach","points","lastIdx","lastPoint","groupName","push","_Axes2","_Tooltip2","_Zoom2","MINIMUM_CHART_HEIGHT","Chart","drawn","filters","groups_","setDimensions","containerID","viewBoxWidth","viewBoxHeight","svgContainerClass","zoomEnabled","zoom","getElementById","offsetWidth","Array","mergeGroups","getGroupsSize","showWarn","defaultGroup","size","removeWarn","filters_","valid","keysLen","warn","resizeHandler","shouldFilter","getGroups","reduce","prev","nextObj","assign","_domain","prevArr","concat","name","fn","reset","Tooltip","tooltipOpts","opacity","template","element","html","box","getBoundingClientRect","window","innerWidth","MINIMUM_ZOOM_THRESHOLD","Zoom","bandPos","drag","zoomGroup","zoomBand","zoomOverlay","isZoomed","pos","mouse","dragStart","ondrag","zoomX","zoomY","ondragend","invert","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getter","_Chart2","_Chart3","_BarGroup2","BarChart","resizeEnabled","resize","debounce","addEventListener","find","g","addNode","notMerged","addedNewGroup","k","idx","addGroup","indexOf","splice","n","removeGroup","removeEventListener","_NodeGroup2","ScatterPlot","initialized","_LineGroup2","LineChart"],"mappings":"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","file":"d3-chart-framework.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"), require(\"underscore\"), require(\"moment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"d3-chart-framework\", [\"d3\", \"underscore\", \"moment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"d3-chart-framework\"] = factory(require(\"d3\"), require(\"underscore\"), require(\"moment\"));\n\telse\n\t\troot[\"d3-chart-framework\"] = factory(root[\"d3\"], root[\"underscore\"], root[\"moment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"), require(\"underscore\"), require(\"moment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"d3-chart-framework\", [\"d3\", \"underscore\", \"moment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"d3-chart-framework\"] = factory(require(\"d3\"), require(\"underscore\"), require(\"moment\"));\n\telse\n\t\troot[\"d3-chart-framework\"] = factory(root[\"d3\"], root[\"underscore\"], root[\"moment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Axes = __webpack_require__(1);\n\t\n\tObject.defineProperty(exports, 'Axes', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Axes).default;\n\t  }\n\t});\n\t\n\tvar _Errors = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'InvalidNodeError', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _Errors.InvalidNodeError;\n\t  }\n\t});\n\tObject.defineProperty(exports, 'InvalidGroupError', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _Errors.InvalidGroupError;\n\t  }\n\t});\n\t\n\tvar _Grid = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'Grid', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Grid).default;\n\t  }\n\t});\n\t\n\tvar _Group = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'Group', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Group).default;\n\t  }\n\t});\n\t\n\tvar _BarGroup = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'BarGroup', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_BarGroup).default;\n\t  }\n\t});\n\t\n\tvar _LineGroup = __webpack_require__(10);\n\t\n\tObject.defineProperty(exports, 'LineGroup', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_LineGroup).default;\n\t  }\n\t});\n\t\n\tvar _NodeGroup = __webpack_require__(11);\n\t\n\tObject.defineProperty(exports, 'NodeGroup', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_NodeGroup).default;\n\t  }\n\t});\n\t\n\tvar _Node = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'Node', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Node).default;\n\t  }\n\t});\n\t\n\tvar _BarNode = __webpack_require__(12);\n\t\n\tObject.defineProperty(exports, 'BarNode', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_BarNode).default;\n\t  }\n\t});\n\t\n\tvar _LineNode = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'LineNode', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_LineNode).default;\n\t  }\n\t});\n\t\n\tvar _RectNode = __webpack_require__(14);\n\t\n\tObject.defineProperty(exports, 'RectNode', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_RectNode).default;\n\t  }\n\t});\n\t\n\tvar _SegmentNode = __webpack_require__(15);\n\t\n\tObject.defineProperty(exports, 'SegmentNode', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_SegmentNode).default;\n\t  }\n\t});\n\t\n\tvar _Chart = __webpack_require__(16);\n\t\n\tObject.defineProperty(exports, 'Chart', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Chart).default;\n\t  }\n\t});\n\t\n\tvar _BarChart = __webpack_require__(19);\n\t\n\tObject.defineProperty(exports, 'BarChart', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_BarChart).default;\n\t  }\n\t});\n\t\n\tvar _ScatterPlot = __webpack_require__(20);\n\t\n\tObject.defineProperty(exports, 'ScatterPlot', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_ScatterPlot).default;\n\t  }\n\t});\n\t\n\tvar _LineChart = __webpack_require__(21);\n\t\n\tObject.defineProperty(exports, 'LineChart', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_LineChart).default;\n\t  }\n\t});\n\t\n\tvar _Tooltip = __webpack_require__(17);\n\t\n\tObject.defineProperty(exports, 'Tooltip', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Tooltip).default;\n\t  }\n\t});\n\t\n\tvar _Zoom = __webpack_require__(18);\n\t\n\tObject.defineProperty(exports, 'Zoom', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Zoom).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Grid = __webpack_require__(2);\n\t\n\tvar _Grid2 = _interopRequireDefault(_Grid);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\tvar moment = __webpack_require__(5);\n\t\n\t/**\n\t* getDatetimeUnit - determine the unit of time for padding the axis\n\t*\n\t* @param {object} min, the min moment datetime object\n\t* @param {object} max, the max moment datetime object\n\t* @return {string} the datetime unit {day, week, month}\n\t*/\n\tfunction getDatetimeUnit(min, max) {\n\t  var diff = max.diff(min, 'days');\n\t  var unit = 'month';\n\t  if (diff <= 14) {\n\t    unit = 'day';\n\t  } else if (diff > 14 && diff <= 183) {\n\t    unit = 'week';\n\t  }\n\t  return unit;\n\t}\n\t\n\tvar Axes = function () {\n\t  /**\n\t  * Axes\n\t  * constructs 2d cartesian axes, appends to the container SVG element of the chart\n\t  *\n\t  * @param {object} chart - the chart to append the axis\n\t  * @param {object} options - the properties for the axis\n\t  * @param {boolean} grid - should the grid be displayed?\n\t  * X axis properties\n\t  * @param {object} options.axes.x - the properties for x axis\n\t  * @param {string} options.axes.x.title - the title of the x axis\n\t  * @param {string} options.axes.x.type - the datatype of the x axis {numeric, datetime}\n\t  * Y axis properties\n\t  * @param {object} options.axes.y - the properties for y axis\n\t  * @param {string} options.axes.y.title - the title of the y axis\n\t  * @param {string} options.axes.y.type - the datatype of the y axis {numeric, datetime}\n\t  * @returns {object} this - returns self\n\t  * @example usage:\n\t  *  with an instance of a chart:\n\t  ```\n\t  axes = new Axes(plot, {\n\t    axes: {\n\t      grid: true,\n\t      x: {\n\t        title: 'Time',\n\t        type: 'datetime',\n\t        minMax: [1443371126, 1474993537]\n\t      },\n\t      y: {\n\t        title: 'Incidents',\n\t        type: 'numeric',\n\t        minMax: [0, 100]\n\t      },\n\t    }\n\t  })\n\t  ```\n\t  */\n\t  function Axes(chart, options) {\n\t    _classCallCheck(this, Axes);\n\t\n\t    this.chart = chart;\n\t    this.options = options || { x: { title: 'x', type: 'numeric' }, y: { title: 'y', type: 'numeric' }, grid: true, filter: true };\n\t    this.useAutoPadding = options.useAutoPadding || false;\n\t    this.defaultMinMax = [[0, 0], [0, 0]];\n\t    this.draw();\n\t  }\n\t\n\t  /**\n\t  * init - initialize the plot x,y axes\n\t  *\n\t  * @param {array=} xDomain - the zoom xDomain or undefined\n\t  * @param {array=} yDomain - the zoom yDomain or undefined\n\t  */\n\t\n\t\n\t  _createClass(Axes, [{\n\t    key: 'draw',\n\t    value: function draw(xDomain, yDomain) {\n\t      var _this = this;\n\t\n\t      if (this.options.x.type === 'datetime') {\n\t        if (xDomain) {\n\t          this.xScale = d3.scaleTime().domain(xDomain).range([0, this.chart.getWidth()]).nice();\n\t        } else {\n\t          this.xScale = d3.scaleTime().domain(this.defaultMinMax[0]).range([0, this.chart.getWidth()]).nice();\n\t        }\n\t      } else if (this.options.x.type === 'band') {\n\t        if (xDomain) {\n\t          this.xScale = d3.scaleBand().domain(xDomain).rangeRound([0, this.chart.getWidth()]).padding(0.1);\n\t        } else {\n\t          this.xScale = d3.scaleBand().domain(['']).rangeRound([0, this.chart.getWidth()]).padding(0.1);\n\t        }\n\t      } else {\n\t        if (xDomain) {\n\t          this.xScale = d3.scaleLinear().domain(xDomain).range([0, this.chart.getWidth()]);\n\t        } else {\n\t          this.xScale = d3.scaleLinear().domain(this.defaultMinMax[0]).range([0, this.chart.getWidth()]);\n\t        }\n\t      }\n\t      if (this.options.x.type === 'datetime') {\n\t        this.xAxis = d3.axisBottom().scale(this.xScale).ticks(10).tickFormat(d3.timeFormat(this.formatDate()));\n\t      } else if (this.options.x.type === 'band') {\n\t        this.xAxis = d3.axisBottom().scale(this.xScale);\n\t      } else {\n\t        this.xAxis = d3.axisBottom().scale(this.xScale).ticks(10);\n\t      }\n\t      if (this.options.x.type === 'datetime') {\n\t        this.xGroup = this.chart.container.append('g').attr('class', 'x d3cf-axis').attr('transform', 'translate(' + this.chart.margins.left + ', ' + this.chart.getHeight() + ')').call(this.xAxis);\n\t        this.xGroup.selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', function () {\n\t          return 'rotate(-65)';\n\t        });\n\t      } else {\n\t        this.xGroup = this.chart.container.append('g').attr('class', 'x d3cf-axis').attr('transform', 'translate(' + this.chart.margins.left + ', ' + this.chart.getHeight() + ')').call(this.xAxis);\n\t      }\n\t\n\t      if (yDomain) {\n\t        this.yScale = d3.scaleLinear().domain(yDomain).range([this.chart.getHeight(), 0]);\n\t      } else {\n\t        this.yScale = d3.scaleLinear().domain(this.defaultMinMax[1]).range([this.chart.getHeight(), 0]);\n\t      }\n\t      this.yAxis = d3.axisLeft().scale(this.yScale);\n\t      this.yGroup = this.chart.container.append('g').attr('class', 'y d3cf-axis').attr('transform', 'translate(' + this.chart.margins.left + ', 0)').call(this.yAxis);\n\t      if (this.options.grid) {\n\t        this.grid = new _Grid2.default(this, this.chart);\n\t      }\n\t\n\t      var padding = 0;\n\t      if (this.options.x.type === 'datetime') {\n\t        padding = 45;\n\t      }\n\t\n\t      if (this.xLabel) {\n\t        // update\n\t        this.xLabel.attr('dx', this.chart.width / 2 - (this.chart.margins.right + this.chart.margins.left) / 2).attr('dy', this.chart.margins.bottom);\n\t      } else {\n\t        // add\n\t        this.xLabel = this.chart.container.append('g').attr('class', 'x d3cf-axis-label').attr('transform', 'translate(' + this.chart.margins.left + ', ' + (this.chart.getHeight() + padding) + ')').append('text').attr('dx', this.chart.width / 2 - (this.chart.margins.right + this.chart.margins.left) / 2).attr('dy', this.chart.margins.bottom).attr('class', 'd3cf-axis-label').style('text-anchor', 'middle').text(function () {\n\t          return _this.options.x.title || '';\n\t        });\n\t      }\n\t      if (this.yLabel) {\n\t        // update\n\t        this.yLabel.attr('dx', -(this.chart.height / 2) + (this.chart.margins.top + this.chart.margins.bottom) / 2).attr('dy', -this.chart.margins.left);\n\t      } else {\n\t        // add\n\t        this.yLabel = this.chart.container.append('g').attr('class', 'y d3cf-axis-label').attr('transform', 'translate(' + this.chart.margins.left + ', 0)').append('text').attr('transform', 'rotate(-90)').attr('dx', -(this.chart.height / 2) + (this.chart.margins.top + this.chart.margins.bottom) / 2).attr('dy', -this.chart.margins.left).attr('class', 'd3cf-axis-label').style('text-anchor', 'middle').text(function () {\n\t          return _this.options.y.title;\n\t        });\n\t      }\n\t    }\n\t\n\t    /**\n\t    * setDomain - sets the x, y domains based on the current chart data\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'setDomain',\n\t    value: function setDomain() {\n\t      var _this2 = this;\n\t\n\t      var minMax = this.calcMinMax(false);\n\t      this.xScale.domain(minMax[0]);\n\t      this.yScale.domain(minMax[1]);\n\t      if (this.options.filter) {\n\t        this.chart.removeFilter('_domain').addFilter('_domain', function (d) {\n\t          if (_this2.options.x.type === 'band') return d;\n\t          // TODO: should this scope be the Chart/Plot or the Axes?\n\t          var x1 = _this2.xScale.domain()[0];\n\t          if (x1 instanceof Date) {\n\t            x1 = x1.getTime();\n\t          }\n\t          var x2 = _this2.xScale.domain()[1];\n\t          if (x2 instanceof Date) {\n\t            x2 = x2.getTime();\n\t          }\n\t          var y1 = _this2.yScale.domain()[0];\n\t          var y2 = _this2.yScale.domain()[1];\n\t          if (d.hasOwnProperty('x2')) {\n\t            if (Math.floor(d.x1) >= x1 && Math.floor(d.x2) <= x2 && Math.floor(d.y1) >= y1 && Math.floor(d.y1) <= y2) {\n\t              return d;\n\t            }\n\t          } else {\n\t            if (Math.floor(d.x1) >= x1 && Math.floor(d.y1) >= y1 && Math.floor(d.y1) <= y2) {\n\t              return d;\n\t            }\n\t          }\n\t        });\n\t      }\n\t    }\n\t\n\t    /**\n\t    * update - update the x,y axes using the zoom domain\n\t    *\n\t    * @param {array} data - an array of {object} for each marker\n\t    * @param {boolean} shouldSetDomain - should the domain be set to data bounds\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(data, shouldSetDomain) {\n\t      this.remove();\n\t      if (data && shouldSetDomain) {\n\t        this.setDomain(data);\n\t      }\n\t      this.draw(this.xScale.domain(), this.yScale.domain());\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * the minMax for all nodes without the domain filters\n\t    *\n\t    * @param {boolean} shouldFilterDomain\n\t    * @return {array} minMax\n\t    */\n\t\n\t  }, {\n\t    key: 'calcMinMax',\n\t    value: function calcMinMax(shouldFilterDomain) {\n\t      var data = this.chart.getGroupsNodes(shouldFilterDomain);\n\t      if (data.length === 0) {\n\t        if (this.options.x.type === 'band') {\n\t          return [[''], [0, 0]];\n\t        }\n\t        return [[0, 0], [0, 0]];\n\t      }\n\t      var xMin = 0;\n\t      var xMax = 0;\n\t      if (this.options.x.type === 'datetime') {\n\t        var x1 = _.pluck(data, 'x1');\n\t        var x2 = _.pluck(data, 'x2');\n\t        xMin = Axes.minDatetime(x1, this.useAutoPadding);\n\t        xMax = xMin;\n\t        if (x2.length > 0) {\n\t          xMax = Axes.maxDatetime(x2, this.useAutoPadding);\n\t        }\n\t        if (isNaN(xMax)) {\n\t          xMax = Axes.maxDatetime(x1, this.useAutoPadding);\n\t        }\n\t      } else if (this.options.x.type === 'band') {\n\t        xMin = _.pluck(data, 'x1');\n\t      } else {\n\t        var _x = _.pluck(data, 'x1');\n\t        var _x2 = _.pluck(data, 'x2');\n\t        xMin = Axes.minNumeric(_x, this.useAutoPadding);\n\t        xMax = xMin;\n\t        if (_x2.length > 0) {\n\t          xMax = Axes.maxNumeric(_x2, this.useAutoPadding);\n\t        }\n\t        if (isNaN(xMax)) {\n\t          xMax = Axes.maxNumeric(_x, this.useAutoPadding);\n\t        }\n\t      }\n\t      var yMin = 0;\n\t      var yMax = Axes.maxNumeric(_.pluck(data, 'y1'), this.useAutoPadding);\n\t      if (this.options.x.type === 'band') {\n\t        return [xMin, [yMin, yMax]];\n\t      }\n\t      return [[xMin, xMax], [yMin, yMax]];\n\t    }\n\t\n\t    /**\n\t    * reset - resets the x,y axes back to the original domain\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      var minMax = this.calcMinMax(false);\n\t      if (minMax[0][0] === 0 && minMax[0][1] === 0 && minMax[1][0] === 0 && minMax[1][1] === 0) {\n\t        return;\n\t      }\n\t      this.remove();\n\t      this.draw(minMax[0], minMax[1]);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * zoom - zooms the x, y axes based on the zoomArea object\n\t    *\n\t    * @param {object} zoomArea, an object containing a bounding box of x,y coordinates\n\t    */\n\t\n\t  }, {\n\t    key: 'zoom',\n\t    value: function zoom(zoomArea) {\n\t      if (zoomArea.x1 > zoomArea.x2) {\n\t        this.xScale.domain([zoomArea.x2, zoomArea.x1]);\n\t      } else {\n\t        this.xScale.domain([zoomArea.x1, zoomArea.x2]);\n\t      }\n\t      if (this.options.x.type === 'datetime') {\n\t        this.xAxis.tickFormat(d3.timeFormat(this.formatDate()));\n\t      }\n\t      if (zoomArea.y1 > zoomArea.y2) {\n\t        this.yScale.domain([zoomArea.y2, zoomArea.y1]);\n\t      } else {\n\t        this.yScale.domain([zoomArea.y1, zoomArea.y2]);\n\t      }\n\t      var trans = this.chart.container.transition().duration(750);\n\t      this.xGroup.transition(trans).call(this.xAxis);\n\t      this.xGroup.selectAll('g').selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', 'rotate(-65)');\n\t      this.yGroup.transition(trans).call(this.yAxis);\n\t      if (this.grid) {\n\t        this.grid.remove();\n\t        this.grid = new _Grid2.default(this, this.chart);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * remove - removes the x,y axis groups from the plot\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      this.xGroup.remove();\n\t      this.yGroup.remove();\n\t      if (this.grid) {\n\t        return this.grid.remove();\n\t      }\n\t    }\n\t\n\t    /**\n\t    * formatDate - a method that formats the axis date label\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'formatDate',\n\t    value: function formatDate() {\n\t      var xDomain = this.xScale.domain();\n\t      var duration = moment.duration(moment(xDomain[1]).diff(xDomain[0])).asDays();\n\t      if (duration <= 7) {\n\t        return '%b %d - %H:%M';\n\t      }\n\t      return '%b %d, %Y';\n\t    }\n\t\n\t    /**\n\t    * maxNumeric - determine the maximum value with padding. Padding is determined\n\t    * by the number of digits ^ 10 / 10, unless number of digets == 10 then return\n\t    * 10\n\t    *\n\t    * @param {array} data - an array of positive integers\n\t    * @return {number} max\n\t    */\n\t\n\t  }], [{\n\t    key: 'maxNumeric',\n\t    value: function maxNumeric(data, useAutoPadding) {\n\t      var m = Math.floor(_.max(data));\n\t      if (useAutoPadding) {\n\t        var l = String(m).split('').length;\n\t        if (l === 1) {\n\t          return 10;\n\t        }\n\t        var p = Math.pow(10, l) / 10;\n\t        return m + p;\n\t      }\n\t      return Math.ceil(m);\n\t    }\n\t\n\t    /**\n\t    * minNumeric - determine the minimum value with padding. Padding is determined\n\t    * by the number of digits ^ 10 / 10, unless number of digets == 10 then return\n\t    * 10\n\t    *\n\t    * @param {array} data - an array of positive integers\n\t    * @return {number} max\n\t    */\n\t\n\t  }, {\n\t    key: 'minNumeric',\n\t    value: function minNumeric(data, useAutoPadding) {\n\t      var m = Math.floor(_.min(data));\n\t      if (useAutoPadding) {\n\t        var l = String(m).split('').length;\n\t        if (l === 1) {\n\t          return 10;\n\t        }\n\t        var p = Math.pow(10, l) / 10;\n\t        return m + p;\n\t      }\n\t      return Math.ceil(m);\n\t    }\n\t\n\t    /**\n\t    * maxDatetime - determine the maximum value with padding\n\t    *\n\t    * @param {array} data - an array of timestamps in milliseconds\n\t    * @return {number} max - maximum datetime value\n\t    */\n\t\n\t  }, {\n\t    key: 'maxDatetime',\n\t    value: function maxDatetime(data, useAutoPadding) {\n\t      var max = moment(_.max(data));\n\t      if (useAutoPadding) {\n\t        var min = moment(_.min(data));\n\t        var unit = getDatetimeUnit(min, max);\n\t        return moment(max).add(1, unit).valueOf();\n\t      }\n\t      return max.valueOf();\n\t    }\n\t\n\t    /**\n\t    * minDatetime - determine the minimum value with padding\n\t    *\n\t    * @param {array} data - an array of timestamps in milliseconds\n\t    * @return {number} min - minimum datetime value\n\t    */\n\t\n\t  }, {\n\t    key: 'minDatetime',\n\t    value: function minDatetime(data, useAutoPadding) {\n\t      var min = moment(_.min(data));\n\t      if (useAutoPadding) {\n\t        var max = moment(_.max(data));\n\t        var unit = getDatetimeUnit(min, max);\n\t        return moment(min).subtract(1, unit).valueOf();\n\t      }\n\t      return min.valueOf();\n\t    }\n\t  }]);\n\t\n\t  return Axes;\n\t}();\n\t\n\tmodule.exports = Axes;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar Grid = function () {\n\t  /**\n\t  * Grid - constructs grids lines for the plot\n\t  *\n\t  * @param {object} axes - the axes to determine xScale, yScale\n\t  * @param {object} plot - the plot to append the axis\n\t  * @param {object} options - the properties for the axis\n\t  * @returns {object} this\n\t  */\n\t  function Grid(axes, plot, options) {\n\t    _classCallCheck(this, Grid);\n\t\n\t    this.plot = plot;\n\t    this.options = options || {};\n\t    this.axes = axes;\n\t    this.init();\n\t    return this;\n\t  }\n\t\n\t  /*\n\t  * init - initialize the x,y grid lines for a plot\n\t  *\n\t  */\n\t\n\t\n\t  _createClass(Grid, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      this.xGrid = d3.axisBottom().scale(this.axes.xScale).tickFormat('').tickSize(this.plot.getHeight() * -1, 0, 0);\n\t      this.xGroup = this.plot.container.insert('g', ':first-child').attr('class', 'd3cf-grid').attr('transform', 'translate(' + this.plot.margins.left + ', ' + this.plot.getHeight() + ')').attr('opacity', null).call(this.xGrid);\n\t      this.yGrid = d3.axisLeft().scale(this.axes.yScale).tickFormat('').tickSize(this.plot.getWidth() * -1, 0, 0);\n\t      this.yGroup = this.plot.container.insert('g', ':first-child').attr('class', 'd3cf-grid').attr('transform', 'translate(' + this.plot.margins.left + ', 0)').attr('opacity', null).call(this.yGrid);\n\t    }\n\t\n\t    /*\n\t    * remove - removed the grid lines from the plot\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      this.xGroup.remove();\n\t      this.yGroup.remove();\n\t    }\n\t  }]);\n\t\n\t  return Grid;\n\t}();\n\t\n\tmodule.exports = Grid;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t* InvalidNodeError - error thrown when an object is not instanceof Node\n\t*\n\t* @param {string} [message] - (optional) the message to the user\n\t*/\n\tvar InvalidNodeError = exports.InvalidNodeError = function (_Error) {\n\t  _inherits(InvalidNodeError, _Error);\n\t\n\t  function InvalidNodeError(message) {\n\t    _classCallCheck(this, InvalidNodeError);\n\t\n\t    var message_ = message || 'Is not instanceof Node.';\n\t    return _possibleConstructorReturn(this, (InvalidNodeError.__proto__ || Object.getPrototypeOf(InvalidNodeError)).call(this, message_));\n\t  }\n\t\n\t  return InvalidNodeError;\n\t}(Error);\n\t\n\t/**\n\t* InvalidGroupError - error thrown when an object is not instanceof Group\n\t*\n\t* @param {string} [message] - (optional) the message to the user\n\t*/\n\t\n\t\n\tvar InvalidGroupError = exports.InvalidGroupError = function (_Error2) {\n\t  _inherits(InvalidGroupError, _Error2);\n\t\n\t  function InvalidGroupError(message) {\n\t    _classCallCheck(this, InvalidGroupError);\n\t\n\t    var message_ = message || 'Is not instanceof Group.';\n\t    return _possibleConstructorReturn(this, (InvalidGroupError.__proto__ || Object.getPrototypeOf(InvalidGroupError)).call(this, message_));\n\t  }\n\t\n\t  return InvalidGroupError;\n\t}(Error);\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Node = __webpack_require__(8);\n\t\n\tvar _Node2 = _interopRequireDefault(_Node);\n\t\n\tvar _Errors = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\t\n\tfunction genId() {\n\t  var length = 9;\n\t  var prefix = 'group-';\n\t  return prefix + Math.random().toString(36).substr(2, length);\n\t}\n\t\n\tvar Group = function () {\n\t  function Group(chart, options) {\n\t    _classCallCheck(this, Group);\n\t\n\t    this.options = options || {};\n\t    this.id = this.options.id || genId();\n\t    var onEnter = this.options.onEnter || Group.onEnter;\n\t    this.onEnter = _.bind(onEnter, this);\n\t    var onUpdate = this.options.onUpdate || Group.onUpdate;\n\t    this.onUpdate = _.bind(onUpdate, this);\n\t    var onExit = this.options.onExit || Group.onExit;\n\t    this.onExit = _.bind(onExit, this);\n\t    this.nodes_ = {};\n\t    this.chart = chart;\n\t    return this;\n\t  }\n\t\n\t  /**\n\t  * size - returns the size of the Group's nodes\n\t  *\n\t  * @return {number} size - the size of the group\n\t  */\n\t\n\t\n\t  _createClass(Group, [{\n\t    key: 'size',\n\t    value: function size() {\n\t      return Object.values(this.nodes_).length;\n\t    }\n\t\n\t    /**\n\t    * addNode - adds a node to this group\n\t    *\n\t    * @param {object} node - the node to add\n\t    * @throws {InvalidGroupError} error\n\t    * @return {Group} this\n\t    */\n\t\n\t  }, {\n\t    key: 'addNode',\n\t    value: function addNode(node) {\n\t      if (typeof node === 'undefined' || !node instanceof _Node2.default) {\n\t        throw new _Errors.InvalidNodeError();\n\t      }\n\t      this.nodes_[node.id] = node;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * removeNode - removes a node from this group\n\t    *\n\t    * @param {string} id - the id to remove\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'removeNode',\n\t    value: function removeNode(id) {\n\t      if (this.nodes_.hasOwnProperty(id)) {\n\t        delete this.nodes_[id];\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * getNodes - returns the nodes associated with this group\n\t    *\n\t    * @return {array} nodes - the nodes associated with this group\n\t    */\n\t\n\t  }, {\n\t    key: 'getNodes',\n\t    value: function getNodes() {\n\t      return Object.values(this.nodes_);\n\t    }\n\t\n\t    /**\n\t    * update - handles updating the marker\n\t    *\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      throw new Error('Update must be implemented.');\n\t    }\n\t\n\t    /**\n\t    * detached - builds a detached svg group and returns the node\n\t    *\n\t    * @return {object} node - the SVG node to append to the parent during .call()\n\t    */\n\t\n\t  }, {\n\t    key: 'detached',\n\t    value: function detached() {\n\t      this.remove();\n\t      this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'd3cf-group').remove();\n\t      this.update();\n\t      return this.group.node();\n\t    }\n\t\n\t    /**\n\t    * remove - removes the group from the DOM\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.group) {\n\t        this.group.remove();\n\t      }\n\t    }\n\t\n\t    /**\n\t    * destroy - destroys the group and any associated elements\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.remove();\n\t      this.chart.removeLayer(this.id);\n\t      this.nodes = null;\n\t      this.chart = null;\n\t      this.group = null;\n\t    }\n\t\n\t    /**\n\t    * onEnter - the default event handler for a group. This may be overridden or\n\t    *   a new event handler passed into the constructor as `options.onEnter`\n\t    *\n\t    * @param {object} selections - the d3 selection object containing the children for this group\n\t    */\n\t\n\t  }], [{\n\t    key: 'onEnter',\n\t    value: function onEnter() {}\n\t\n\t    /**\n\t    * onUpdate - the default event handler for a group. This may be overridden or\n\t    *   a new event handler passed into the constructor as `options.onUpdate`\n\t    *\n\t    * @param {object} selections - the d3 selection object for this group\n\t    */\n\t\n\t  }, {\n\t    key: 'onUpdate',\n\t    value: function onUpdate() {}\n\t\n\t    /**\n\t    * onExit - the default event handler for a group. This may be overridden or\n\t    *   a new event handler passed into the constructor as `options.onExit`\n\t    *\n\t    * @param {object} selections - the d3 selection object for this group\n\t    */\n\t\n\t  }, {\n\t    key: 'onExit',\n\t    value: function onExit() {}\n\t  }]);\n\t\n\t  return Group;\n\t}();\n\t\n\tmodule.exports = Group;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tfunction genId() {\n\t  var length = 9;\n\t  var prefix = 'node-';\n\t  return prefix + Math.random().toString(36).substr(2, length);\n\t}\n\t\n\tvar Node = function () {\n\t  /**\n\t  * Node - base class\n\t  *\n\t  * @param {object} options - the options used to construct the SegmentMarker\n\t  * @param {object} options.meta - the optional meta data associated with the node (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function Node(options) {\n\t    _classCallCheck(this, Node);\n\t\n\t    this.id = options.id || genId();\n\t    this.meta = options.meta || {};\n\t    this.group = null;\n\t    return this;\n\t  }\n\t\n\t  /**\n\t  * remove - removes the marker from the DOM\n\t  *\n\t  */\n\t\n\t\n\t  _createClass(Node, [{\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.group) {\n\t        return this.group.remove();\n\t      }\n\t    }\n\t\n\t    /**\n\t    * update - updates one or more elements within the RectNode SVG group\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * detached - builds a detached svg group and returns the node\n\t    *\n\t    * @return {object} node - the SVG node to append to the parent during .call()\n\t    */\n\t\n\t  }, {\n\t    key: 'detached',\n\t    value: function detached() {\n\t      this.remove();\n\t      this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'd3cf-node').attr('opacity', this.o).remove();\n\t      this.update();\n\t      return this.group.node();\n\t    }\n\t  }]);\n\t\n\t  return Node;\n\t}();\n\t\n\tmodule.exports = Node;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Group2 = __webpack_require__(7);\n\t\n\tvar _Group3 = _interopRequireDefault(_Group2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BarGroup = function (_Group) {\n\t  _inherits(BarGroup, _Group);\n\t\n\t  function BarGroup(chart, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, BarGroup);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BarGroup.__proto__ || Object.getPrototypeOf(BarGroup)).call(this, chart, options));\n\t\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /**\n\t  * update - handles updating the marker\n\t  *\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(BarGroup, [{\n\t    key: 'update',\n\t    value: function update() {\n\t      var filtered = this.chart.applyFilters(this.getNodes());\n\t      this.group.attr('numNodes', filtered.length);\n\t      var nodes = this.group.selectAll('.d3cf-node').data(filtered, function (d) {\n\t        return d.id;\n\t      });\n\t      nodes.enter().append(function (node) {\n\t        return node.detached();\n\t      }).call(this.onEnter);\n\t      nodes.each(function (node) {\n\t        return node.update();\n\t      }).call(this.onUpdate);\n\t      nodes.exit().remove().call(this.onExit);\n\t    }\n\t  }]);\n\t\n\t  return BarGroup;\n\t}(_Group3.default);\n\t\n\tmodule.exports = BarGroup;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Group2 = __webpack_require__(7);\n\t\n\tvar _Group3 = _interopRequireDefault(_Group2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar LineGroup = function (_Group) {\n\t  _inherits(LineGroup, _Group);\n\t\n\t  function LineGroup(chart, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, LineGroup);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LineGroup.__proto__ || Object.getPrototypeOf(LineGroup)).call(this, chart, options));\n\t\n\t    _this.s = options.s || 'steelblue';\n\t    _this.w = options.w || 1.5;\n\t    _this.meta = options.meta || {};\n\t    var defaultGenerator = d3.line().x(function (d) {\n\t      return _this.chart.axes.xScale(d.x1);\n\t    }).y(function (d) {\n\t      return _this.chart.axes.yScale(d.y1);\n\t    });\n\t    _this.generator = options.generator || defaultGenerator;\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /**\n\t  * update - handles updating the marker\n\t  *\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(LineGroup, [{\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        return;\n\t      }\n\t      /**\n\t      * comparator function for sorting by x1 ascending\n\t      *\n\t      * @param {object} a - LineNode object\n\t      * @param {object} b - LineNode object\n\t      * @return {number}\n\t      */\n\t      function cmp(a, b) {\n\t        return a.x1 - b.x1;\n\t      }\n\t      var filtered = this.chart.applyFilters(this.getNodes()).sort(cmp);\n\t      this.group.attr('numNodes', filtered.length);\n\t      // select\n\t      var path = this.group.select('.d3cf-line');\n\t      if (path.empty()) {\n\t        // enter\n\t        this.group.append('path').datum(filtered, function (d) {\n\t          return d.id;\n\t        }).attr('fill', 'transparent').attr('stroke', this.s).attr('stroke-linejoin', 'round').attr('stroke-linecap', 'round').attr('stroke-width', this.w).attr('class', 'd3cf-line').attr('d', function (d) {\n\t          return _this2.generator(d);\n\t        }).call(this.onEnter);\n\t      }\n\t      // update\n\t      path.attr('stroke', this.s).attr('stroke-width', this.w).attr('d', function (d) {\n\t        return _this2.generator(d);\n\t      }).call(this.onUpdate);\n\t      // exit\n\t      path.exit().remove().call(this.onExit);\n\t      var nodes = this.group.selectAll('.node').data(filtered, function (d) {\n\t        return d.id;\n\t      });\n\t      nodes.enter().append(function (node) {\n\t        return node.detached();\n\t      }).call(this.onEnter);\n\t      nodes.each(function (node) {\n\t        return node.update();\n\t      }).call(this.onUpdate);\n\t      nodes.exit().remove().call(this.onExit);\n\t    }\n\t  }]);\n\t\n\t  return LineGroup;\n\t}(_Group3.default);\n\t\n\tmodule.exports = LineGroup;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Group2 = __webpack_require__(7);\n\t\n\tvar _Group3 = _interopRequireDefault(_Group2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar NodeGroup = function (_Group) {\n\t  _inherits(NodeGroup, _Group);\n\t\n\t  function NodeGroup(chart, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, NodeGroup);\n\t\n\t    var _this = _possibleConstructorReturn(this, (NodeGroup.__proto__ || Object.getPrototypeOf(NodeGroup)).call(this, chart, options));\n\t\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /**\n\t  * update - handles updating the marker\n\t  * @override\n\t  *\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(NodeGroup, [{\n\t    key: 'update',\n\t    value: function update() {\n\t      if (typeof this.group === 'undefined') {\n\t        return;\n\t      }\n\t      var filtered = this.chart.applyFilters(this.getNodes());\n\t      this.group.attr('numNodes', filtered.length);\n\t      var nodes = this.group.selectAll('.node').data(filtered, function (d) {\n\t        return d.id;\n\t      });\n\t      nodes.enter().append(function (node) {\n\t        return node.detached();\n\t      }).call(this.onEnter);\n\t      nodes.each(function (node) {\n\t        return node.update();\n\t      }).call(this.onUpdate);\n\t      nodes.exit().remove().call(this.onExit);\n\t    }\n\t  }]);\n\t\n\t  return NodeGroup;\n\t}(_Group3.default);\n\t\n\tmodule.exports = NodeGroup;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Node2 = __webpack_require__(8);\n\t\n\tvar _Node3 = _interopRequireDefault(_Node2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar BarNode = function (_Node) {\n\t  _inherits(BarNode, _Node);\n\t\n\t  /**\n\t  * BarNode - a data point for a path/line generator\n\t  *\n\t  * @param {object} chart - an instance of a chart\n\t  * @param {object} options - the options used to construct the chart\n\t  * @param {string} options.x1 - the category for x1 position\n\t  * @param {number} options.y1 - the value for y1 position\n\t  * @param {string} options.f - the fill of the bar\n\t  * @param {number} options.o - the opacity of the bar\n\t  * @param {object=} options.meta - the optional meta data associated with the circle (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function BarNode(chart, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, BarNode);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BarNode.__proto__ || Object.getPrototypeOf(BarNode)).call(this, options));\n\t\n\t    _this.chart = chart;\n\t    _this.x1 = options.x1;\n\t    _this.y1 = options.y1;\n\t    _this.f = options.r || '#345e7e';\n\t    _this.o = options.o || 0;\n\t    _this.style = options.style || 'd3cf-node';\n\t    _this.meta = options.meta || {};\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  _createClass(BarNode, [{\n\t    key: 'getFill',\n\t    value: function getFill(type) {\n\t      var fill = '#33B5E5';\n\t      switch (type) {\n\t        case 'info':\n\t          fill = '#33B5E5';\n\t          break;\n\t        case 'success':\n\t          fill = '#00C851';\n\t          break;\n\t        case 'muted':\n\t          fill = '#636c72';\n\t          break;\n\t        case 'primary':\n\t          fill = '#0275d8';\n\t          break;\n\t        case 'warning':\n\t          fill = '#FFBB33';\n\t          break;\n\t        case 'danger':\n\t          fill = '#d9534f';\n\t          break;\n\t        default:\n\t          break;\n\t      }\n\t      return fill;\n\t    }\n\t\n\t    /**\n\t    * update - updates one or more elements\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        this.group = d3.select('#' + this.id);\n\t      }\n\t      // select\n\t      var rect = this.group.selectAll('rect').data([this], function (d) {\n\t        return d.id;\n\t      });\n\t      // create\n\t      rect.enter().append('rect').attr('class', this.style).attr('x', function () {\n\t        return _this2.chart.axes.xScale(_this2.x1);\n\t      }).attr('y', function () {\n\t        return _this2.chart.axes.yScale(_this2.y1);\n\t      }).attr('width', function () {\n\t        return _this2.chart.axes.xScale.bandwidth();\n\t      }).attr('height', function () {\n\t        return _this2.chart.getHeight() - _this2.chart.axes.yScale(_this2.y1);\n\t      }).style('fill', function () {\n\t        return _this2.getFill(_this2.x1);\n\t      }).style('opacity', function () {\n\t        return _this2.o;\n\t      }).on('mouseover', function () {\n\t        if (_this2.chart.tooltip) {\n\t          return _this2.chart.tooltip.mouseover(_this2, d3.event.pageX, d3.event.pageY);\n\t        }\n\t      }).on('mouseout', function () {\n\t        if (_this2.chart.tooltip) {\n\t          return _this2.chart.tooltip.mouseout();\n\t        }\n\t      });\n\t      // update\n\t      rect.attr('x', function () {\n\t        return _this2.chart.axes.xScale(_this2.x1);\n\t      }).attr('y', function () {\n\t        return _this2.chart.axes.yScale(_this2.y1);\n\t      }).attr('width', function () {\n\t        return _this2.chart.axes.xScale.bandwidth();\n\t      }).attr('height', function () {\n\t        return _this2.chart.getHeight() - _this2.chart.axes.yScale(_this2.y1);\n\t      });\n\t      // remove\n\t      rect.exit().remove();\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return BarNode;\n\t}(_Node3.default);\n\t\n\tmodule.exports = BarNode;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Node2 = __webpack_require__(8);\n\t\n\tvar _Node3 = _interopRequireDefault(_Node2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar LineNode = function (_Node) {\n\t  _inherits(LineNode, _Node);\n\t\n\t  /**\n\t  * LineNode - a data point for a path/line generator\n\t  *\n\t  * @param {object} chart - an instance of a chart\n\t  * @param {object} options - the options used to construct the plot\n\t  * @param {number} options.x1 - the value for x1 position\n\t  * @param {number} options.y1 - the value for y1 position\n\t  * @param {string} options.r - the radius of the circle\n\t  * @param {number} options.o - the opacity of the cirle\n\t  * @param {object} options.meta - the optional meta data associated with the circle (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function LineNode(chart, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, LineNode);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LineNode.__proto__ || Object.getPrototypeOf(LineNode)).call(this, options));\n\t\n\t    _this.chart = chart;\n\t    _this.x1 = options.x1;\n\t    _this.y1 = options.y1;\n\t    _this.r = options.r || 3;\n\t    _this.o = options.o || 0;\n\t    _this.style = options.style || 'd3cf-node';\n\t    _this.meta = options.meta || {};\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  _createClass(LineNode, [{\n\t    key: 'getFill',\n\t    value: function getFill(type) {\n\t      var fill = '#33B5E5';\n\t      switch (type) {\n\t        case 'warning':\n\t          fill = '#FFBB33';\n\t          break;\n\t        case 'success':\n\t          fill = '#00C851';\n\t          break;\n\t        case 'info':\n\t          fill = '#33B5E5';\n\t          break;\n\t        default:\n\t          break;\n\t      }\n\t      return fill;\n\t    }\n\t\n\t    /**\n\t    * update - updates one or more elements\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        this.group = d3.select('#' + this.id);\n\t      }\n\t      /**\n\t      * Each node of the line's `path` (see LineGroup) is a transparent circle in\n\t      * order to have a mouseover event.\n\t      *\n\t      * @see https://groups.google.com/forum/#!topic/d3-js/gHzOj91X2NA\n\t      */\n\t      // select\n\t      var circle = this.group.selectAll('circle').data([this], function (d) {\n\t        return d.id;\n\t      });\n\t      // create\n\t      circle.enter().append('circle').attr('class', this.style).attr('cx', function () {\n\t        return _this2.chart.axes.xScale(_this2.x1);\n\t      }).attr('cy', function () {\n\t        return _this2.chart.axes.yScale(_this2.y1);\n\t      }).attr('r', function () {\n\t        return _this2.r;\n\t      }).attr('opacity', function () {\n\t        return _this2.o;\n\t      }).on('mouseover', function () {\n\t        if (_this2.chart.tooltip) {\n\t          return _this2.chart.tooltip.mouseover(_this2, d3.event.pageX, d3.event.pageY);\n\t        }\n\t      }).on('mouseout', function () {\n\t        if (_this2.chart.tooltip) {\n\t          return _this2.chart.tooltip.mouseout();\n\t        }\n\t      });\n\t      // update\n\t      circle.attr('cx', function () {\n\t        return _this2.chart.axes.xScale(_this2.x1);\n\t      }).attr('cy', function () {\n\t        return _this2.chart.axes.yScale(_this2.y1);\n\t      }).attr('r', function () {\n\t        return _this2.r;\n\t      }).attr('opacity', function () {\n\t        return _this2.o;\n\t      });\n\t      // remove\n\t      circle.exit().remove();\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return LineNode;\n\t}(_Node3.default);\n\t\n\tmodule.exports = LineNode;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Node2 = __webpack_require__(8);\n\t\n\tvar _Node3 = _interopRequireDefault(_Node2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar d3 = __webpack_require__(3);\n\t\n\tvar MINIMUM_MARKER_WIDTH = 10;\n\tvar MINIMUM_MARKER_HEIGHT = 10;\n\t\n\tvar RectNode = function (_Node) {\n\t  _inherits(RectNode, _Node);\n\t\n\t  /**\n\t  * RectNode - a rectangular node\n\t  *\n\t  * @param {object} plot - an instance of a plot\n\t  * @param {object} options - the options used to construct the plot\n\t  * @param {number} options.x1 - the value for x1 position\n\t  * @param {number} options.x2 - the value for x2 position\n\t  * @param {number} options.y1 - the value for y1 position\n\t  * @param {number} options.h - the value for the height\n\t  * @param {string} options.f - the fill of the marker\n\t  * @param {number} options.o - the opacity of the marker\n\t  * @param {object} options.meta - the optional meta data associated with the marker (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function RectNode(plot, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, RectNode);\n\t\n\t    var _this = _possibleConstructorReturn(this, (RectNode.__proto__ || Object.getPrototypeOf(RectNode)).call(this, options));\n\t\n\t    _this.plot = plot;\n\t    _this.x1 = options.x1;\n\t    _this.x2 = options.x2;\n\t    _this.y1 = options.y1;\n\t    _this.h = options.h || 10;\n\t    _this.f = options.f || '#345e7e';\n\t    _this.o = options.o || 0.4;\n\t    _this.style = options.style || 'd3cf-node';\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /**\n\t  * update - updates one or more elements within the RectNode SVG group\n\t  *\n\t  */\n\t\n\t\n\t  _createClass(RectNode, [{\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        this.group = d3.select('#' + this.id);\n\t      }\n\t      // select\n\t      var rect = this.group.selectAll('rect').data([this], function (d) {\n\t        return d.id;\n\t      });\n\t      // create\n\t      rect.enter().append('rect').attr('class', this.style).attr('x', function () {\n\t        return _this2.plot.axes.xScale(_this2.x1);\n\t      }).attr('y', function () {\n\t        var height = _this2.h;\n\t        if (height < MINIMUM_MARKER_HEIGHT) {\n\t          height = MINIMUM_MARKER_HEIGHT;\n\t        }\n\t        return _this2.plot.axes.yScale(_this2.y1) - height / 2;\n\t      }).attr('width', function () {\n\t        var width = _this2.plot.axes.xScale(_this2.x2) - _this2.plot.axes.xScale(_this2.x1);\n\t        if (width < MINIMUM_MARKER_WIDTH) {\n\t          width = MINIMUM_MARKER_WIDTH;\n\t        }\n\t        return width;\n\t      }).attr('height', function () {\n\t        var height = _this2.h;\n\t        if (height < MINIMUM_MARKER_HEIGHT) {\n\t          height = MINIMUM_MARKER_HEIGHT;\n\t        }\n\t        return height;\n\t      }).style('fill', function () {\n\t        return _this2.f;\n\t      }).style('opacity', function () {\n\t        return _this2.o;\n\t      }).on('mouseover', function () {\n\t        if (_this2.plot.tooltip) {\n\t          return _this2.plot.tooltip.mouseover(_this2, d3.event.pageX, d3.event.pageY);\n\t        }\n\t      }).on('mouseout', function () {\n\t        if (_this2.plot.tooltip) {\n\t          return _this2.plot.tooltip.mouseout();\n\t        }\n\t      });\n\t\n\t      // update\n\t      rect.attr('x', function () {\n\t        return _this2.plot.axes.xScale(_this2.x1);\n\t      }).attr('y', function () {\n\t        var height = _this2.h;\n\t        if (height < MINIMUM_MARKER_HEIGHT) {\n\t          height = MINIMUM_MARKER_HEIGHT;\n\t        }\n\t        return _this2.plot.axes.yScale(_this2.y1) - height / 2;\n\t      }).attr('width', function () {\n\t        var width = _this2.plot.axes.xScale(_this2.x2) - _this2.plot.axes.xScale(_this2.x1);\n\t        if (width < MINIMUM_MARKER_WIDTH) {\n\t          width = MINIMUM_MARKER_WIDTH;\n\t        }\n\t        return width;\n\t      }).attr('height', function () {\n\t        var height = _this2.h;\n\t        if (height < MINIMUM_MARKER_HEIGHT) {\n\t          height = MINIMUM_MARKER_HEIGHT;\n\t        }\n\t        return height;\n\t      });\n\t\n\t      // remove\n\t      rect.exit().remove();\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return RectNode;\n\t}(_Node3.default);\n\t\n\tmodule.exports = RectNode;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _d = __webpack_require__(3);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tvar _underscore = __webpack_require__(4);\n\t\n\tvar _underscore2 = _interopRequireDefault(_underscore);\n\t\n\tvar _Node2 = __webpack_require__(8);\n\t\n\tvar _Node3 = _interopRequireDefault(_Node2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar MINIMUM_LINE_STROKE = 4;\n\tvar MINIMUM_CIRCLE_RADIUS = 5;\n\tvar MINIMUM_LINE_THRESHOLD = 2;\n\t\n\tvar SegmentNode = function (_Node) {\n\t  _inherits(SegmentNode, _Node);\n\t\n\t  /**\n\t  * SegmentNode - a line with beginning and end circles\n\t  * @param {object} plot - an instance of a plot\n\t  * @param {object} options - the options used to construct the SegmentNode\n\t  * @param {number} options.x - the value for x position\n\t  * @param {number} options.y - the value for y position\n\t  * @param {number} options.l - the value for the length of the line\n\t  * @param {number} options.h - the value for the height\n\t  * @param {string} options.f - the fill of the line\n\t  * @param {number} options.o - the opacity of the line\n\t  * @param {object} options.meta - the optional meta data associated with the node (e.g. used in the Tooltip)\n\t  * @return {object} this\n\t  */\n\t  function SegmentNode(plot, options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, SegmentNode);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SegmentNode.__proto__ || Object.getPrototypeOf(SegmentNode)).call(this, options));\n\t\n\t    _this.plot = plot;\n\t    _this.x = options.x;\n\t    _this.y = options.y;\n\t    _this.w = options.w;\n\t    _this.h = options.h || MINIMUM_LINE_STROKE;\n\t    _this.r = options.r || MINIMUM_CIRCLE_RADIUS;\n\t    _this.f = options.f || '#345e7e';\n\t    _this.o = options.o || 0.3;\n\t    _this.meta = options.meta || {};\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /**\n\t  * remove - removes the node from the DOM\n\t  *\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(SegmentNode, [{\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.group) {\n\t        return this.group.remove();\n\t      }\n\t    }\n\t\n\t    /**\n\t    * filteredOrderedPair - determine if the pair exists within the domain\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'filteredOrderedPair',\n\t    value: function filteredOrderedPair(orderedPair) {\n\t      if (orderedPair[0] < this.plot.axes.xScale.range()[0]) {\n\t        orderedPair[0] = null;\n\t      }\n\t      if (orderedPair[0] > this.plot.axes.xScale.range()[1]) {\n\t        orderedPair[0] = null;\n\t      }\n\t      if (orderedPair[1] < this.plot.axes.yScale.range()[1]) {\n\t        orderedPair[1] = null;\n\t      }\n\t      if (orderedPair[1] > this.plot.axes.yScale.range()[0]) {\n\t        orderedPair[1] = null;\n\t      }\n\t      return orderedPair;\n\t    }\n\t\n\t    /**\n\t    * update - handles updating the node\n\t    *\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var _this2 = this;\n\t\n\t      if (typeof this.group === 'undefined') {\n\t        this.group = _d2.default.select('#' + this.id);\n\t      }\n\t      var linePairs = [[this.plot.axes.xScale(this.x), this.plot.axes.yScale(this.y)], [this.plot.axes.xScale(this.w), this.plot.axes.yScale(this.y)]];\n\t      var lineDistance = this.distance(linePairs);\n\t      var totalRange = this.plot.axes.xScale.range()[1];\n\t      var linePercentage = Math.floor(lineDistance / totalRange * 100);\n\t      var startPoint = this.filteredOrderedPair([this.plot.axes.xScale(this.x), this.plot.axes.yScale(this.y)]);\n\t      var start = this.group.selectAll('.start-circle').data([this], function (d) {\n\t        return d.id;\n\t      });\n\t      if (startPoint[0] !== null && startPoint[1] !== null) {\n\t        start.enter().append('circle').attr('class', 'start-circle').style('fill', this.f).attr('cx', startPoint[0]).attr('cy', startPoint[1]).attr('r', function () {\n\t          var radius = _this2.r;\n\t          radius = Math.ceil(radius * (linePercentage / 100) + radius);\n\t          if (radius < MINIMUM_CIRCLE_RADIUS) {\n\t            radius = MINIMUM_CIRCLE_RADIUS;\n\t          }\n\t          return radius;\n\t        });\n\t        start.attr('cx', startPoint[0]).attr('cy', startPoint[1]).attr('r', function () {\n\t          var radius = _this2.r;\n\t          radius = Math.ceil(radius * (linePercentage / 100) + radius);\n\t          if (radius < MINIMUM_CIRCLE_RADIUS) {\n\t            radius = MINIMUM_CIRCLE_RADIUS;\n\t          }\n\t          return radius;\n\t        });\n\t        start.exit().remove();\n\t      } else {\n\t        this.group.selectAll('.start-circle').remove();\n\t      }\n\t      if (linePercentage >= MINIMUM_LINE_THRESHOLD) {\n\t        var line = this.group.selectAll('line').data([this], function (d) {\n\t          return d.id;\n\t        });\n\t        line.enter().append('line').attr('x1', function () {\n\t          if (linePairs[0][0] <= _this2.plot.axes.xScale.range()[0]) {\n\t            return _this2.plot.axes.xScale.range()[0];\n\t          }\n\t          if (linePairs[0][0] >= _this2.plot.axes.xScale.range()[1]) {\n\t            return null;\n\t          }\n\t          return linePairs[0][0];\n\t        }).attr('y1', linePairs[0][1]).attr('x2', function () {\n\t          if (linePairs[1][0] >= _this2.plot.axes.xScale.range()[1]) {\n\t            return _this2.plot.axes.xScale.range()[1];\n\t          }\n\t          if (linePairs[1][0] <= _this2.plot.axes.xScale.range()[0]) {\n\t            return null;\n\t          }\n\t          return linePairs[1][0];\n\t        }).attr('y2', linePairs[1][1]).attr('stroke-width', function () {\n\t          var height = _this2.h;\n\t          height = Math.ceil(height * (linePercentage / 100) + height);\n\t          if (height < MINIMUM_LINE_STROKE) {\n\t            return MINIMUM_LINE_STROKE;\n\t          }\n\t          return height;\n\t        }).attr('stroke', this.f);\n\t        line.attr('x1', function () {\n\t          if (linePairs[0][0] <= _this2.plot.axes.xScale.range()[0]) {\n\t            return _this2.plot.axes.xScale.range()[0];\n\t          }\n\t          if (linePairs[0][0] >= _this2.plot.axes.xScale.range()[1]) {\n\t            return null;\n\t          }\n\t          return linePairs[0][0];\n\t        }).attr('y1', linePairs[0][1]).attr('x2', function () {\n\t          if (linePairs[1][0] >= _this2.plot.axes.xScale.range()[1]) {\n\t            return _this2.plot.axes.xScale.range()[1];\n\t          }\n\t          if (linePairs[1][0] <= _this2.plot.axes.xScale.range()[0]) {\n\t            return null;\n\t          }\n\t          return linePairs[1][0];\n\t        }).attr('y2', linePairs[1][1]).attr('stroke-width', function () {\n\t          var height = _this2.h;\n\t          height = Math.ceil(height * (linePercentage / 100) + height);\n\t          if (height < MINIMUM_LINE_STROKE) {\n\t            return MINIMUM_LINE_STROKE;\n\t          }\n\t          return height;\n\t        });\n\t      } else {\n\t        this.group.selectAll('line').remove();\n\t      }\n\t      var endPoint = this.filteredOrderedPair([this.plot.axes.xScale(this.w), this.plot.axes.yScale(this.y)]);\n\t      if (linePercentage >= MINIMUM_LINE_THRESHOLD) {\n\t        if (endPoint[0] !== null && endPoint[1] !== null) {\n\t          var end = this.group.selectAll('.end-circle').data([this], function (d) {\n\t            return d.id;\n\t          });\n\t          end.enter().append('circle').attr('class', 'end-circle').attr('cx', endPoint[0]).attr('cy', endPoint[1]).attr('r', function () {\n\t            var radius = _this2.r;\n\t            radius = Math.ceil(radius * linePercentage / 100 + radius);\n\t            if (radius < MINIMUM_CIRCLE_RADIUS) {\n\t              radius = MINIMUM_CIRCLE_RADIUS;\n\t            }\n\t            return radius;\n\t          }).style('fill', this.f);\n\t          end.attr('class', 'end-circle').attr('cx', endPoint[0]).attr('cy', endPoint[1]).attr('r', function () {\n\t            var radius = _this2.r;\n\t            radius = Math.ceil(radius * linePercentage / 100 + radius);\n\t            if (radius < MINIMUM_CIRCLE_RADIUS) {\n\t              radius = MINIMUM_CIRCLE_RADIUS;\n\t            }\n\t            return radius;\n\t          });\n\t        } else {\n\t          this.group.selectAll('.end-circle').remove();\n\t        }\n\t      } else {\n\t        this.group.selectAll('.end-circle').remove();\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * detached - builds a detached svg group and returns the node\n\t    *\n\t    * @return {object} node - the SVG node to append to the parent during .call()\n\t    */\n\t\n\t  }, {\n\t    key: 'detached',\n\t    value: function detached() {\n\t      this.remove();\n\t      this.group = _d2.default.select(document.createElementNS(_d2.default.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'node').attr('opacity', this.o).remove();\n\t      this.update();\n\t      this.group.node();\n\t    }\n\t\n\t    /**\n\t    * distance - determine the distance between two pairs\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'distance',\n\t    value: function distance(pairs) {\n\t      return Math.sqrt(Math.pow(Math.abs(pairs[0][0] - pairs[1][0]), 2) + Math.pow(Math.abs(pairs[0][1] - pairs[1][1]), 2));\n\t    }\n\t\n\t    /**\n\t    * groupOverlappingSegments - group overlapping segments together\n\t    *\n\t    * @param {array} segments - an array of SegmentNode's\n\t    * @return {object} groups - groups of overlapping segments\n\t    */\n\t\n\t  }], [{\n\t    key: 'groupOverlappingSegments',\n\t    value: function groupOverlappingSegments(segments) {\n\t      var groups = {};\n\t      var segmentsByHeightAndCumulative = _underscore2.default.groupBy(segments, function (segment) {\n\t        var c = false;\n\t        if (typeof segment.meta.cumulative === 'undefined') {\n\t          c = false;\n\t        } else {\n\t          c = segment.meta.cumulative;\n\t        }\n\t        return segment.y + ':' + c;\n\t      });\n\t      Object.keys(segmentsByHeightAndCumulative).forEach(function (key) {\n\t        var values = segmentsByHeightAndCumulative[key];\n\t        values.sort(function (a, b) {\n\t          return a.x - b.x;\n\t        });\n\t        var i = 0;\n\t        var points = [];\n\t        while (i < values.length) {\n\t          if (i === 0) {\n\t            points[0] = values[0];\n\t            var groupName = values[0].w + ':' + key;\n\t            groups[groupName] = [values[0]];\n\t            i++;\n\t            continue; // eslint-disable-line no-continue\n\t          }\n\t          var lastIdx = points.length - 1;\n\t          if (lastIdx < 0) {\n\t            break;\n\t          }\n\t          var lastPoint = points[lastIdx];\n\t          if (values[i].x >= lastPoint.x && values[i].w <= lastPoint.w) {\n\t            var _groupName = lastPoint.w + ':' + key;\n\t            var group = groups[_groupName];\n\t            if (typeof group === 'undefined') {\n\t              group = [];\n\t            }\n\t            group.push(values[i]);\n\t            i++;\n\t          } else {\n\t            points[lastIdx + 1] = values[i];\n\t            var _groupName2 = values[i].w + ':' + key;\n\t            groups[_groupName2] = [values[i]];\n\t            i++;\n\t          }\n\t        }\n\t      });\n\t      return groups;\n\t    }\n\t  }]);\n\t\n\t  return SegmentNode;\n\t}(_Node3.default);\n\t\n\tmodule.exports = SegmentNode;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Axes = __webpack_require__(1);\n\t\n\tvar _Axes2 = _interopRequireDefault(_Axes);\n\t\n\tvar _Tooltip = __webpack_require__(17);\n\t\n\tvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\t\n\tvar _Zoom = __webpack_require__(18);\n\t\n\tvar _Zoom2 = _interopRequireDefault(_Zoom);\n\t\n\tvar _Group = __webpack_require__(7);\n\t\n\tvar _Group2 = _interopRequireDefault(_Group);\n\t\n\tvar _Errors = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\t\n\tvar MINIMUM_CHART_HEIGHT = 300;\n\t\n\tvar Chart = function () {\n\t  /**\n\t  * Chart - creates a new instance of a chart\n\t  *\n\t  * @param {object} options - the options to create a chart\n\t  * @param {string} containerID - the id of the container div\n\t  * @param {string} svgcontainerClass - the desired class of the constructed svg element\n\t  * @param {object} tooltip\n\t  * @param {number} tooltip.opacity - the background opacity for the tooltip\n\t  * @param {object} tooltip.template - the compiled template\n\t  * @param {boolean} scale - scale the svg on window resize @default false\n\t  * @param {boolean} resize -resize the svg on window resize @default true\n\t  * @return {object} returns self\n\t  */\n\t  function Chart(options) {\n\t    _classCallCheck(this, Chart);\n\t\n\t    this.options = options;\n\t    this.drawn = false;\n\t    this.filters = options.filters || {};\n\t    this.groups_ = {};\n\t    return this;\n\t  }\n\t\n\t  /**\n\t  * init - method to initialize the chart, allows the chart to be re-initialized\n\t  *  on resize while keeping the current chart data in memory\n\t  *\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(Chart, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      this.setDimensions();\n\t      var scale = this.options.scale || false;\n\t      if (scale) {\n\t        this.root = d3.select('#' + this.options.containerID).append('svg').attr('viewBox', '0 0 ' + this.viewBoxWidth + ' ' + this.viewBoxHeight).attr('preserveAspectRatio', 'xMinYMin meet');\n\t      } else {\n\t        this.root = d3.select('#' + this.options.containerID).append('svg').attr('width', this.viewBoxWidth).attr('height', this.viewBoxHeight);\n\t      }\n\t      this.container = this.root.append('g').attr('class', this.options.svgContainerClass).attr('width', this.getWidth()).attr('height', this.getHeight()).attr('transform', 'translate(' + this.margins.left + ', ' + this.margins.top + ')');\n\t      this.axes = new _Axes2.default(this, this.options.axes);\n\t      this.tooltip = new _Tooltip2.default(this, this.options);\n\t      var zoomEnabled = this.options.zoom || false;\n\t      if (zoomEnabled) {\n\t        this.zoom = new _Zoom2.default(this, this.options);\n\t      }\n\t      this.groups = this.container.append('g').attr('class', 'd3cf-groups').attr('transform', 'translate(' + this.margins.left + ', 0)');\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * setDimensions - method to set the dimensions of the chart based on the current window\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'setDimensions',\n\t    value: function setDimensions() {\n\t      this.margins = this.options.margins || {\n\t        left: 40,\n\t        right: 20,\n\t        top: 20,\n\t        bottom: 40\n\t      };\n\t      this.width = this.options.width || document.getElementById(this.options.containerID).offsetWidth - (this.margins.left + this.margins.right);\n\t      this.height = this.options.height;\n\t      if (this.height < MINIMUM_CHART_HEIGHT) {\n\t        this.height = MINIMUM_CHART_HEIGHT;\n\t      }\n\t      this.viewBoxWidth = this.width + this.margins.left + this.margins.right;\n\t      this.viewBoxHeight = this.height + this.margins.top + this.margins.bottom;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * update - update the width and height attributes of the root and container\n\t    *  elements. then call update on the chart axes\n\t    *\n\t    * @param {array} nodes - an array of {object} for each node\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(nodes) {\n\t      this.setDimensions();\n\t      this.root.attr('width', this.viewBoxWidth).attr('height', this.viewBoxHeight);\n\t      this.container.attr('width', this.width).attr('height', this.height).attr('transform', 'translate(' + this.margins.left + ', ' + this.margins.top + ')');\n\t      if (typeof nodes === 'undefined') {\n\t        this.axes.update(this.getGroupsNodes(), false);\n\t      } else {\n\t        if (nodes instanceof Array) {\n\t          this.axes.update(nodes, true);\n\t        } else {\n\t          this.mergeGroups(nodes);\n\t          this.axes.update(this.getGroupsNodes(false), true);\n\t        }\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * draw - draws the markers on the chart\n\t    *\n\t    * @see this will automatically show/hide a warning message if the data\n\t    * is empty. Do not call super() to override this behavior.\n\t    *\n\t    * @param {array} nodes - an array of {object} for each marker\n\t    */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(nodes) {\n\t      if (!this.drawn) {\n\t        this.drawn = true;\n\t        this.root.transition().style('opacity', 1);\n\t      }\n\t      if (typeof nodes === 'undefined') {\n\t        if (this.getGroupsSize() <= 0) {\n\t          this.showWarn();\n\t          return;\n\t        }\n\t      } else {\n\t        if (nodes instanceof Array) {\n\t          var group = this.defaultGroup(nodes);\n\t          if (group.size() <= 0) {\n\t            this.showWarn();\n\t            return;\n\t          }\n\t        } else {\n\t          if (this.getGroupsSize() <= 0) {\n\t            this.showWarn();\n\t            return;\n\t          }\n\t        }\n\t      }\n\t      this.removeWarn();\n\t    }\n\t\n\t    /**\n\t    * defaultGroup - creates a default group if an array is passed to the draw method\n\t    *\n\t    * @param {array} nodes - an array of Node's\n\t    */\n\t\n\t  }, {\n\t    key: 'defaultGroup',\n\t    value: function defaultGroup() {\n\t      throw new Error('defaultGroup must be implemented.');\n\t    }\n\t\n\t    /**\n\t    * applyFilters - apply any filters from the chart\n\t    *\n\t    * @param {object} filters - an array of filters to apply\n\t    * @return {array} filtered, the filtered data\n\t    */\n\t\n\t  }, {\n\t    key: 'applyFilters',\n\t    value: function applyFilters(nodes, filters) {\n\t      var filters_ = filters || this.filters;\n\t      var filtered = [];\n\t      if (nodes) {\n\t        filtered = nodes.filter(function (d) {\n\t          var valid = true;\n\t          var keys = Object.keys(filters_);\n\t          var i = 0;\n\t          var keysLen = keys.length;\n\t          while (i < keysLen) {\n\t            var key = keys[i++];\n\t            var f = filters_[key](d);\n\t            if (typeof f === 'undefined') {\n\t              valid = false;\n\t              break;\n\t            }\n\t          }\n\t          if (valid) {\n\t            return d;\n\t          }\n\t        });\n\t      }\n\t      return filtered;\n\t    }\n\t\n\t    /**\n\t    * getWidth\n\t    *\n\t    * @return {number} width - (excluding margins) for the root svg\n\t    */\n\t\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width - (this.margins.left + this.margins.right);\n\t    }\n\t\n\t    /**\n\t    * getHeigth\n\t    *\n\t    * @return {number} width - (excluding margins) for the root svg\n\t    */\n\t\n\t  }, {\n\t    key: 'getHeight',\n\t    value: function getHeight() {\n\t      return this.height - (this.margins.top + this.margins.bottom);\n\t    }\n\t\n\t    /**\n\t    * showWarn - shows a warning message in the center of the chart\n\t    *\n\t    * @param {string} m - the message to display\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'showWarn',\n\t    value: function showWarn(m) {\n\t      var message = m || 'No data to display';\n\t      if (this.warn) {\n\t        this.removeWarn();\n\t      }\n\t      this.warn = this.container.append('g').style('opacity', 0).attr('class', 'd3cf-warn');\n\t      this.warn.append('text').attr('text-anchor', 'middle').attr('x', this.width / 2).attr('y', this.getHeight() / 2).text(message);\n\t      this.warn.transition().style('opacity', 1);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * removeWarn - removes the warning message from the chart\n\t    *\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'removeWarn',\n\t    value: function removeWarn() {\n\t      if (this.warn) {\n\t        this.warn.remove();\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * remove - removes the chart from the DOM and any event listeners\n\t    *\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.zoom && typeof this.zoom.remove === 'function') this.zoom.remove();\n\t      if (this.tooltip && typeof this.tooltip.remove === 'function') this.tooltip.remove();\n\t      if (this.axes && typeof this.axes.remove === 'function') this.axes.remove();\n\t      if (this.container && typeof this.container.remove === 'function') this.container.remove();\n\t      if (this.root && typeof this.root.remove === 'function') this.root.remove();\n\t    }\n\t\n\t    /**\n\t    * destroy - destroys the chart and any associated elements\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.remove();\n\t      this.zoom = null;\n\t      this.tooltip = null;\n\t      this.axes = null;\n\t      this.container = null;\n\t      this.root = null;\n\t      this.resizeHandler = null;\n\t    }\n\t\n\t    /**\n\t    * addGroup\n\t    *\n\t    * @param {object} group - add a group to the chart\n\t    * @throws {InvalidGroupError} error\n\t    * @return {Chart} this\n\t    */\n\t\n\t  }, {\n\t    key: 'addGroup',\n\t    value: function addGroup(group) {\n\t      if (group instanceof _Group2.default === false) {\n\t        throw new _Errors.InvalidGroupError();\n\t      }\n\t      this.groups_[group.id] = group;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * removeGroup\n\t    *\n\t    * @param {string} id - the group to remove\n\t    * @return {Chart} this\n\t    */\n\t\n\t  }, {\n\t    key: 'removeGroup',\n\t    value: function removeGroup(id) {\n\t      if (this.groups_.hasOwnProperty(id)) {\n\t        delete this.groups_[id];\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * getGroups - returns the groups associated with this chart\n\t    *\n\t    * @return {array} groups - the groups associated with this chart\n\t    */\n\t\n\t  }, {\n\t    key: 'getGroups',\n\t    value: function getGroups() {\n\t      return Object.values(this.groups_);\n\t    }\n\t\n\t    /**\n\t    * getGroups - returns the size of all the groups\n\t    *\n\t    * @param {boolean} shouldFilter - should the nodes be filtered by domain\n\t    * @return {Number} size - the size of all the groups\n\t    */\n\t\n\t  }, {\n\t    key: 'getGroupsSize',\n\t    value: function getGroupsSize(shouldFilter) {\n\t      var _this = this;\n\t\n\t      return this.getGroups().reduce(function (prev, nextObj) {\n\t        if (shouldFilter) {\n\t          return prev + _this.applyFilters(nextObj.getNodes()).length;\n\t        }\n\t        var filters = Object.assign({}, _this.filters);\n\t        if (filters.hasOwnProperty('_domain')) {\n\t          delete filters._domain;\n\t        }\n\t        return prev + _this.applyFilters(nextObj.getNodes(), filters).length;\n\t      }, 0);\n\t    }\n\t\n\t    /**\n\t    * getGroupsNodes - returns all the nodes for each group\n\t    *\n\t    * @param {boolean} shouldFilter - should the nodes be filtered by domain\n\t    * @return {array} nodes - an array of nodes\n\t    */\n\t\n\t  }, {\n\t    key: 'getGroupsNodes',\n\t    value: function getGroupsNodes(shouldFilter) {\n\t      var _this2 = this;\n\t\n\t      return this.getGroups().reduce(function (prevArr, nextObj) {\n\t        if (shouldFilter) {\n\t          return prevArr.concat(_this2.applyFilters(nextObj.getNodes()));\n\t        }\n\t        var filters = Object.assign({}, _this2.filters);\n\t        if (filters.hasOwnProperty('_domain')) {\n\t          delete filters._domain;\n\t        }\n\t        return prevArr.concat(_this2.applyFilters(nextObj.getNodes(), filters));\n\t      }, []);\n\t    }\n\t\n\t    /**\n\t    * mergeGroups - merge groups from data passed directly to the draw method\n\t    *\n\t    * @param {object} nodes - a grouping of nodes\n\t    */\n\t\n\t  }, {\n\t    key: 'mergeGroups',\n\t    value: function mergeGroups() {\n\t      throw new Error('mergeGroups must be implemented.');\n\t    }\n\t\n\t    /**\n\t    * addFilter - add a filter to the chart\n\t    *\n\t    * @param {string} name - the name of the filter\n\t    * @param {function} fn - the function to be applied to the data\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'addFilter',\n\t    value: function addFilter(name, fn) {\n\t      this.filters[name] = _.bind(fn, this);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * removeFilter - removes a filter from the chart\n\t    *\n\t    * @param {string} name - the name of the filter\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'removeFilter',\n\t    value: function removeFilter(name) {\n\t      if (this.filters[name] !== 'undefined') {\n\t        delete this.filters[name];\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * resetZoom - resets the zoom of the axes\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'resetZoom',\n\t    value: function resetZoom() {\n\t      if (this.zoom) {\n\t        return this.zoom.reset();\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Chart;\n\t}();\n\t\n\tmodule.exports = Chart;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\t\n\tvar Tooltip = function () {\n\t  /**\n\t  * Tooltip - allows for an HTML div to be faded in/out on mouseover of a marker\n\t  *\n\t  * @param {object} plot - the plot append the tooltip\n\t  * @param {object} options - the options for the plot\n\t  * @param {object} options.tooltip - the options for the tooltip\n\t  * @param {number} options.opacity - the opacity of the tooltip\n\t  * @param {object} options.template - an underscore compiled template\n\t  * @return {object} this\n\t  */\n\t  function Tooltip(plot, options) {\n\t    _classCallCheck(this, Tooltip);\n\t\n\t    this.tooltipOpts = options.tooltip || {\n\t      'opacity': 1,\n\t      'template': _.template('<span style=\"font-weight: bold;\"><%= obj.id %></span><p>x1: <%= obj.x1 %> x2: <% if (obj.x2) { %> <%= obj.x2 %> <% } %> y: <%= obj.y1 %></p>')\n\t    };\n\t    this.template = this.tooltipOpts.template || _.template('<span style=\"font-weight: bold;\"><%= obj.id %></span><p>x1: <%= obj.x1 %> x2: <%= obj.x2 %> y: <%= obj.y1 %></p>');\n\t    this.opacity = this.tooltipOpts.opacity || 1;\n\t    this.element = d3.select('body').append('div').attr('class', 'd3cf-tooltip').style('opacity', 0).html(this.template({}));\n\t    return this;\n\t  }\n\t\n\t  /**\n\t  * mouseover - unbound method for mouseover event\n\t  *\n\t  * @param {object} d - the data\n\t  * @param {number} x - the x coordinate\n\t  * @param {number} y - the y coordinate\n\t  * @return {object} this\n\t  */\n\t\n\t\n\t  _createClass(Tooltip, [{\n\t    key: 'mouseover',\n\t    value: function mouseover(d, x, y) {\n\t      var box = this.element.node().getBoundingClientRect();\n\t      if (x + box.width >= window.innerWidth - 20) {\n\t        this.element.html(this.template(d)).style('left', x - 10 - Math.floor(box.width) + 'px').style('top', y + 'px');\n\t      } else {\n\t        this.element.html(this.template(d)).style('left', x + 10 + 'px').style('top', y + 'px');\n\t      }\n\t      this.element.transition().duration(200).style('opacity', this.opacity);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * mouseout - unbound method for mouseout event\n\t    *\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'mouseout',\n\t    value: function mouseout() {\n\t      this.element.transition().duration(500).style('opacity', 0);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * remove - removes the element from the DOM\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      return this.element.remove();\n\t    }\n\t  }]);\n\t\n\t  return Tooltip;\n\t}();\n\t\n\tmodule.exports = Tooltip;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(3);\n\tvar _ = __webpack_require__(4);\n\t\n\tvar MINIMUM_ZOOM_THRESHOLD = 5;\n\t\n\tvar Zoom = function () {\n\t  /**\n\t  * Zoom - a zoomable interface for a plot\n\t  *\n\t  * @param {object} plot - the plot to enable the zooming interface\n\t  * @param {object} options - the object containing the passed in options to the plot constructor\n\t  * @return {object} this\n\t  */\n\t  function Zoom(plot, options) {\n\t    _classCallCheck(this, Zoom);\n\t\n\t    this.plot = plot;\n\t    this.options = options;\n\t    this.bandPos = [-1, -1];\n\t    this.zoomArea = {\n\t      x1: 0,\n\t      y1: 0,\n\t      x2: 0,\n\t      y2: 0\n\t    };\n\t    this.drag = d3.drag();\n\t    this.zoomGroup = plot.container.append('g').attr('class', 'd3cf-zoom');\n\t    this.zoomBand = this.zoomGroup.append('rect').attr('width', 0).attr('height', 0).attr('x', 0).attr('y', 0).attr('class', 'd3cf-zoomBand');\n\t    this.zoomOverlay = this.zoomGroup.append('rect').attr('width', plot.getWidth()).attr('height', plot.getHeight()).attr('transform', 'translate(' + plot.margins.left + ', 0)').attr('class', 'd3cf-zoomOverlay').call(this.drag);\n\t    this.isZoomed = false;\n\t    var self = this; // eslint-disable-line consistent-this\n\t    this.drag.on('start.plot', function () {\n\t      // eslint-disable-line func-names\n\t      // Note: @ (this) is not the Zoom class but the DOM event\n\t      var pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n\t      self.dragStart = pos;\n\t    });\n\t    this.drag.on('drag.plot', function () {\n\t      // eslint-disable-line func-names\n\t      // Note: @ (this) is not the Zoom class but the DOM event\n\t      var pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n\t      _.bind(self.ondrag, self)(pos);\n\t    });\n\t    this.drag.on('end.plot', function () {\n\t      // eslint-disable-line func-names\n\t      // Note: @ (this) is not the Zoom class but the DOM event\n\t      var pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n\t      var zoomX = false;\n\t      if (Math.abs(self.dragStart[0] - pos[0]) > MINIMUM_ZOOM_THRESHOLD) {\n\t        zoomX = true;\n\t      }\n\t      var zoomY = false;\n\t      if (Math.abs(self.dragStart[1] - pos[1]) > MINIMUM_ZOOM_THRESHOLD) {\n\t        zoomY = true;\n\t      }\n\t      _.bind(self.ondragend, self)(pos, zoomX && zoomY);\n\t    });\n\t  }\n\t\n\t  /*\n\t  * ondrag - the event handler for the ondrag event\n\t  * @param {array} pos, the x,y position of the mouse\n\t  */\n\t\n\t\n\t  _createClass(Zoom, [{\n\t    key: 'ondrag',\n\t    value: function ondrag(pos) {\n\t      if (pos[0] < this.bandPos[0]) {\n\t        this.zoomBand.attr('transform', 'translate(' + (pos[0] + this.plot.margins.left) + ', ' + this.bandPos[1] + ')');\n\t      }\n\t      if (pos[1] < this.bandPos[1]) {\n\t        this.zoomBand.attr('transform', 'translate(' + (pos[0] + this.plot.margins.left) + ', ' + pos[1] + ')');\n\t      }\n\t      if (pos[1] < this.bandPos[1] && pos[0] > this.bandPos[0]) {\n\t        this.zoomBand.attr('transform', 'translate(' + (this.bandPos[0] + this.plot.margins.left) + ', ' + pos[1] + ')');\n\t      }\n\t      if (this.bandPos[0] === -1) {\n\t        this.bandPos = pos;\n\t        this.zoomBand.attr('transform', 'translate(' + (this.bandPos[0] + this.plot.margins.left) + ', ' + this.bandPos[1] + ')');\n\t      }\n\t      this.zoomBand.transition().duration(1).attr('width', Math.abs(this.bandPos[0] - pos[0])).attr('height', Math.abs(this.bandPos[1] - pos[1]));\n\t    }\n\t\n\t    /**\n\t    * ondragend - the event handler for the ondragend event\n\t    *\n\t    * @param {array} pos - the x,y position of the mouse\n\t    */\n\t\n\t  }, {\n\t    key: 'ondragend',\n\t    value: function ondragend(pos, zoom) {\n\t      var x1 = this.plot.axes.xScale.invert(this.bandPos[0]);\n\t      var x2 = this.plot.axes.xScale.invert(pos[0]);\n\t      if (x1 < x2) {\n\t        this.zoomArea.x1 = x1;\n\t        this.zoomArea.x2 = x2;\n\t      } else {\n\t        this.zoomArea.x1 = x2;\n\t        this.zoomArea.x2 = x1;\n\t      }\n\t      var y1 = this.plot.axes.yScale.invert(pos[1]);\n\t      var y2 = this.plot.axes.yScale.invert(this.bandPos[1]);\n\t      if (y1 < y2) {\n\t        this.zoomArea.y1 = y1;\n\t        this.zoomArea.y2 = y2;\n\t      } else {\n\t        this.zoomArea.y1 = y2;\n\t        this.zoomArea.y2 = y1;\n\t      }\n\t      this.bandPos = [-1, -1];\n\t      this.zoomBand.transition().attr('width', 0).attr('height', 0).attr('x', this.bandPos[0]).attr('y', this.bandPos[1]);\n\t      if (zoom) {\n\t        this.zoom();\n\t      }\n\t    }\n\t\n\t    /**\n\t    * zoom - the zooming method called an the end of ondragend\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'zoom',\n\t    value: function zoom() {\n\t      this.isZoomed = true;\n\t      this.plot.axes.zoom(this.zoomArea);\n\t      this.plot.draw();\n\t    }\n\t\n\t    /**\n\t    * resetZoom - reset the plot zoom back to the original viewBox\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      this.isZoomed = false;\n\t      this.plot.axes.reset();\n\t      this.plot.draw();\n\t    }\n\t\n\t    /**\n\t    * remove - remove the zoom interface from a plot\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      this.zoomGroup.remove();\n\t      this.drag.on('drag.plot', null);\n\t      this.drag.on('end.plot', null);\n\t      this.drag.on('start.plot', null);\n\t    }\n\t  }]);\n\t\n\t  return Zoom;\n\t}();\n\t\n\tmodule.exports = Zoom;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _Chart2 = __webpack_require__(16);\n\t\n\tvar _Chart3 = _interopRequireDefault(_Chart2);\n\t\n\tvar _BarGroup = __webpack_require__(9);\n\t\n\tvar _BarGroup2 = _interopRequireDefault(_BarGroup);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _ = __webpack_require__(4);\n\t\n\tvar BarChart = function (_Chart) {\n\t  _inherits(BarChart, _Chart);\n\t\n\t  /**\n\t  * BarChart - constructs the root SVG element to contain the BarChart\n\t  * @param {object} options, the options to create a BarChart\n\t  * @param {string} containerID, the id of the BarChart container div\n\t  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n\t  * @param {object} tooltip,\n\t  * @param {number} tooltip.opacity, the background opacity for the tooltip\n\t  * @param {object} tooltip.template, the compiled template\n\t  * @param {boolean} scale, scale the svg on window resize @default false\n\t  * @param {boolean} resize, resize the svg on window resize @default true\n\t  * @returns {object} this, returns self\n\t  */\n\t  function BarChart(options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, BarChart);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).call(this, options));\n\t\n\t    _this.init();\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /**\n\t  * init - method to set/re-set the resizeHandler\n\t  * @returns {object} this\n\t  */\n\t\n\t\n\t  _createClass(BarChart, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      _get(BarChart.prototype.__proto__ || Object.getPrototypeOf(BarChart.prototype), 'init', this).call(this);\n\t      var resizeEnabled = this.options.resize || true;\n\t      if (resizeEnabled) {\n\t        this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n\t        return window.addEventListener('resize', this.resizeHandler);\n\t      }\n\t    }\n\t\n\t    /**\n\t    * draw - draw using d3 select.data.enter workflow\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(data) {\n\t      _get(BarChart.prototype.__proto__ || Object.getPrototypeOf(BarChart.prototype), 'draw', this).call(this, data);\n\t      var groups = this.groups.selectAll('.group').data(this.getGroups(), function (d) {\n\t        return d.id;\n\t      });\n\t      groups.enter().append(function (group) {\n\t        return group.detached();\n\t      });\n\t      groups.each(function (group) {\n\t        return group.update();\n\t      });\n\t      groups.exit().remove();\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * defaultGroup - creates a default group if an array is passed to the draw method\n\t    * @param {array} nodes, an array of Node's\n\t    */\n\t\n\t  }, {\n\t    key: 'defaultGroup',\n\t    value: function defaultGroup(nodes) {\n\t      var group = this.getGroups().find(function (g) {\n\t        return g.id === 'default_';\n\t      });\n\t      if (typeof group === 'undefined') {\n\t        if (this.options.group && this.options.group.onEnter) {\n\t          group = new _BarGroup2.default(this, { id: 'default_', onEnter: this.options.group.onEnter });\n\t        } else {\n\t          group = new _BarGroup2.default(this, { id: 'default_' });\n\t        }\n\t      }\n\t      nodes.forEach(function (d) {\n\t        return group.addNode(d);\n\t      });\n\t      return group;\n\t    }\n\t\n\t    /**\n\t    * mergeGroups - merge groups from data passed directly to the draw method\n\t    * @override\n\t    * @param {object} groups, a set of Groups\n\t    * @return {boolean} hasChanged\n\t    */\n\t\n\t  }, {\n\t    key: 'mergeGroups',\n\t    value: function mergeGroups(groups) {\n\t      var _this2 = this;\n\t\n\t      var notMerged = Object.keys(this.groups_);\n\t      var addedNewGroup = false;\n\t      Object.keys(groups).forEach(function (k) {\n\t        var idx = -1;\n\t        var group = _this2.groups_[k];\n\t        if (typeof group === 'undefined') {\n\t          addedNewGroup = true;\n\t          if (groups[k] instanceof _BarGroup2.default) {\n\t            group = groups[k];\n\t            _this2.addGroup(group);\n\t          } else {\n\t            // TODO: allow the user to pass in an object with `data` array\n\t            throw new Error('Must be instance of a d3cf Group.');\n\t          }\n\t        } else {\n\t          idx = notMerged.indexOf(k);\n\t          if (idx >= 0) {\n\t            notMerged.splice(idx, 1);\n\t            // merge new group data into the existing group\n\t            groups[k].getNodes().forEach(function (n) {\n\t              group.addNode(n);\n\t            });\n\t          }\n\t        }\n\t      });\n\t      // remove the groups that have not been sliced\n\t      if (notMerged.length > 0) {\n\t        notMerged.forEach(function (k) {\n\t          _this2.removeGroup(k);\n\t        });\n\t        // if we have removed an existing group\n\t        return true;\n\t      }\n\t      // if we have merged in new groups\n\t      if (addedNewGroup) {\n\t        return true;\n\t      }\n\t      // otherwise no change\n\t      return false;\n\t    }\n\t\n\t    /**\n\t    * update the dimensions of the chart (axes, gridlines, then redraw)\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(data) {\n\t      _get(BarChart.prototype.__proto__ || Object.getPrototypeOf(BarChart.prototype), 'update', this).call(this, data);\n\t      this.draw(data);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * remove - removes the chart from the DOM and any event listeners\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      _get(BarChart.prototype.__proto__ || Object.getPrototypeOf(BarChart.prototype), 'remove', this).call(this);\n\t      if (this.resizeHandler) {\n\t        window.removeEventListener('resize', this.resizeHandler);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * resize - re-renders the chart\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize() {\n\t      this.update();\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return BarChart;\n\t}(_Chart3.default);\n\t\n\tmodule.exports = BarChart;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _Chart2 = __webpack_require__(16);\n\t\n\tvar _Chart3 = _interopRequireDefault(_Chart2);\n\t\n\tvar _NodeGroup = __webpack_require__(11);\n\t\n\tvar _NodeGroup2 = _interopRequireDefault(_NodeGroup);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _ = __webpack_require__(4);\n\t\n\tvar ScatterPlot = function (_Chart) {\n\t  _inherits(ScatterPlot, _Chart);\n\t\n\t  /**\n\t  * ScatterPlot - constructs the root SVG element to contain the ScatterPlot\n\t  *\n\t  * @param {object} options - the options to create a ScatterPlot\n\t  * @param {string} containerID - the id of the ScatterPlot container div\n\t  * @param {string} svgcontainerClass - the desired class of the constructed svg element\n\t  * @param {object} tooltip\n\t  * @param {number} tooltip.opacity - the background opacity for the tooltip\n\t  * @param {object} tooltip.template - the compiled template\n\t  * @param {boolean} scale - scale the svg on window resize @default false\n\t  * @param {boolean} resize - resize the svg on window resize @default true\n\t  * @returns {object} this - returns self\n\t  */\n\t  function ScatterPlot(options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, ScatterPlot);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ScatterPlot.__proto__ || Object.getPrototypeOf(ScatterPlot)).call(this, options));\n\t\n\t    _this.init();\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /**\n\t  * init - method to set/re-set the resizeHandler\n\t  *\n\t  * @returns {object} this\n\t  */\n\t\n\t\n\t  _createClass(ScatterPlot, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      _get(ScatterPlot.prototype.__proto__ || Object.getPrototypeOf(ScatterPlot.prototype), 'init', this).call(this);\n\t      var resizeEnabled = this.options.resize || true;\n\t      if (resizeEnabled) {\n\t        this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n\t        return window.addEventListener('resize', this.resizeHandler);\n\t      }\n\t    }\n\t\n\t    /**\n\t    * draw - draw using d3 select.data.enter workflow\n\t    *\n\t    * @param {array} data - an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(data) {\n\t      _get(ScatterPlot.prototype.__proto__ || Object.getPrototypeOf(ScatterPlot.prototype), 'draw', this).call(this, data);\n\t      var groups = this.groups.selectAll('.group').data(this.getGroups(), function (d) {\n\t        return d.id;\n\t      });\n\t      groups.enter().append(function (group) {\n\t        return group.detached();\n\t      });\n\t      groups.each(function (group) {\n\t        return group.update();\n\t      });\n\t      groups.exit().remove();\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * defaultGroup - creates a default group if an array is passed to the draw method\n\t    *\n\t    * @param {array} nodes - an array of Node's\n\t    */\n\t\n\t  }, {\n\t    key: 'defaultGroup',\n\t    value: function defaultGroup(nodes) {\n\t      var group = this.getGroups().find(function (g) {\n\t        return g.id === 'default_';\n\t      });\n\t      if (typeof group === 'undefined') {\n\t        if (this.options.group && this.options.group.onEnter) {\n\t          group = new _NodeGroup2.default(this, { id: 'default_', onEnter: this.options.group.onEnter });\n\t        } else {\n\t          group = new _NodeGroup2.default(this, { id: 'default_' });\n\t        }\n\t      }\n\t      nodes.forEach(function (d) {\n\t        return group.addNode(d);\n\t      });\n\t      return group;\n\t    }\n\t\n\t    /**\n\t    * mergeGroups - merge groups from data passed directly to the draw method\n\t    *\n\t    * @param {object} groups - a set of Groups\n\t    * @return {boolean} shouldReset - should the axes domain be reset to currentMinMax\n\t    */\n\t\n\t  }, {\n\t    key: 'mergeGroups',\n\t    value: function mergeGroups(groups) {\n\t      var _this2 = this;\n\t\n\t      var notMerged = Object.keys(this.groups_);\n\t      var addedNewGroup = false;\n\t      Object.keys(groups).forEach(function (k) {\n\t        var idx = -1;\n\t        var group = _this2.groups_[k];\n\t        if (typeof group === 'undefined') {\n\t          addedNewGroup = true;\n\t          if (groups[k] instanceof _NodeGroup2.default) {\n\t            group = groups[k];\n\t            _this2.addGroup(group);\n\t          } else {\n\t            // TODO: allow the user to pass in an object with `data` array\n\t            throw new Error('Must be instance of a d3cf Group.');\n\t          }\n\t        } else {\n\t          idx = notMerged.indexOf(k);\n\t          if (idx >= 0) {\n\t            notMerged.splice(idx, 1);\n\t            // merge new group data into the existing group\n\t            groups[k].getNodes().forEach(function (n) {\n\t              group.addNode(n);\n\t            });\n\t          }\n\t        }\n\t      });\n\t      // remove the groups that have not been sliced\n\t      if (notMerged.length > 0) {\n\t        notMerged.forEach(function (k) {\n\t          _this2.removeGroup(k);\n\t        });\n\t        // if we have removed an existing group from the plot\n\t        // then we should set the axes to the currentMinMax\n\t        return true;\n\t      }\n\t      // if we have merged in new groups and the axes have been initialized\n\t      // then we should set the axes to the currentMinMax\n\t      if (addedNewGroup && this.axes.initialized === true) {\n\t        return true;\n\t      }\n\t      // do not set the axes\n\t      return false;\n\t    }\n\t\n\t    /**\n\t    * update the dimensions of the plot (axes, gridlines, then redraw)\n\t    *\n\t    * @param {array} data - an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(data) {\n\t      _get(ScatterPlot.prototype.__proto__ || Object.getPrototypeOf(ScatterPlot.prototype), 'update', this).call(this, data);\n\t      this.draw(data);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * remove - removes the plot from the DOM and any event listeners\n\t    *\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.resizeHandler) {\n\t        window.removeEventListener('resize', this.resizeHandler);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * resize - re-renders the plot\n\t    *\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize() {\n\t      this.update();\n\t      return this;\n\t    }\n\t\n\t    /*\n\t    * resetZoom - resets the zoom of the axes\n\t    *\n\t    */\n\t\n\t  }, {\n\t    key: 'resetZoom',\n\t    value: function resetZoom() {\n\t      if (this.zoom) {\n\t        return this.zoom.reset();\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ScatterPlot;\n\t}(_Chart3.default);\n\t\n\tmodule.exports = ScatterPlot;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _Chart2 = __webpack_require__(16);\n\t\n\tvar _Chart3 = _interopRequireDefault(_Chart2);\n\t\n\tvar _LineGroup = __webpack_require__(10);\n\t\n\tvar _LineGroup2 = _interopRequireDefault(_LineGroup);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _ = __webpack_require__(4);\n\t\n\tvar LineChart = function (_Chart) {\n\t  _inherits(LineChart, _Chart);\n\t\n\t  /**\n\t  * LineChart - constructs the root SVG element to contain the LineChart\n\t  * @param {object} options, the options to create a LineChart\n\t  * @param {string} containerID, the id of the LineChart container div\n\t  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n\t  * @param {object} tooltip,\n\t  * @param {number} tooltip.opacity, the background opacity for the tooltip\n\t  * @param {object} tooltip.template, the compiled template\n\t  * @param {boolean} scale, scale the svg on window resize @default false\n\t  * @param {boolean} resize, resize the svg on window resize @default true\n\t  * @returns {object} this, returns self\n\t  */\n\t  function LineChart(options) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, LineChart);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).call(this, options));\n\t\n\t    _this.init();\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  /**\n\t  * init - method to set/re-set the resizeHandler\n\t  * @returns {object} this\n\t  */\n\t\n\t\n\t  _createClass(LineChart, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'init', this).call(this);\n\t      var resizeEnabled = this.options.resize || true;\n\t      if (resizeEnabled) {\n\t        this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n\t        return window.addEventListener('resize', this.resizeHandler);\n\t      }\n\t    }\n\t\n\t    /**\n\t    * draw - draw using d3 select.data.enter workflow\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(data) {\n\t      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'draw', this).call(this, data);\n\t      var groups = this.groups.selectAll('.group').data(this.getGroups(), function (d) {\n\t        return d.id;\n\t      });\n\t      groups.enter().append(function (group) {\n\t        return group.detached();\n\t      });\n\t      groups.each(function (group) {\n\t        return group.update();\n\t      });\n\t      groups.exit().remove();\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * defaultGroup - creates a default group if an array is passed to the draw method\n\t    * @param {array} nodes, an array of Node's\n\t    */\n\t\n\t  }, {\n\t    key: 'defaultGroup',\n\t    value: function defaultGroup(nodes) {\n\t      var group = this.getGroups().find(function (g) {\n\t        return g.id === 'default_';\n\t      });\n\t      if (typeof group === 'undefined') {\n\t        if (this.options.group && this.options.group.onEnter) {\n\t          group = new _LineGroup2.default(this, { id: 'default_', onEnter: this.options.group.onEnter });\n\t        } else {\n\t          group = new _LineGroup2.default(this, { id: 'default_' });\n\t        }\n\t      }\n\t      nodes.forEach(function (d) {\n\t        return group.addNode(d);\n\t      });\n\t      return group;\n\t    }\n\t\n\t    /**\n\t    * mergeGroups - merge groups from data passed directly to the draw method\n\t    * @override\n\t    * @param {object} groups, a set of Groups\n\t    * @return {boolean} hasChanged\n\t    */\n\t\n\t  }, {\n\t    key: 'mergeGroups',\n\t    value: function mergeGroups(groups) {\n\t      var _this2 = this;\n\t\n\t      var notMerged = Object.keys(this.groups_);\n\t      var addedNewGroup = false;\n\t      Object.keys(groups).forEach(function (k) {\n\t        var idx = -1;\n\t        var group = _this2.groups_[k];\n\t        if (typeof group === 'undefined') {\n\t          addedNewGroup = true;\n\t          if (groups[k] instanceof _LineGroup2.default) {\n\t            group = groups[k];\n\t            _this2.addGroup(group);\n\t          } else {\n\t            // TODO: allow the user to pass in an object with `data` array\n\t            throw new Error('Must be instance of a d3cf Group.');\n\t          }\n\t        } else {\n\t          idx = notMerged.indexOf(k);\n\t          if (idx >= 0) {\n\t            notMerged.splice(idx, 1);\n\t            // merge new group data into the existing group\n\t            groups[k].getNodes().forEach(function (n) {\n\t              group.addNode(n);\n\t            });\n\t          }\n\t        }\n\t      });\n\t      // remove the groups that have not been sliced\n\t      if (notMerged.length > 0) {\n\t        notMerged.forEach(function (k) {\n\t          _this2.removeGroup(k);\n\t        });\n\t        // if we have removed an existing group\n\t        return true;\n\t      }\n\t      // if we have merged in new groups\n\t      if (addedNewGroup) {\n\t        return true;\n\t      }\n\t      // otherwise no change\n\t      return false;\n\t    }\n\t\n\t    /**\n\t    * update the dimensions of the chart (axes, gridlines, then redraw)\n\t    * @param {array} data, an array of {object} for each marker\n\t    * @returns {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'update',\n\t    value: function update(data) {\n\t      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'update', this).call(this, data);\n\t      this.draw(data);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * remove - removes the chart from the DOM and any event listeners\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'remove', this).call(this);\n\t      if (this.resizeHandler) {\n\t        window.removeEventListener('resize', this.resizeHandler);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t    * resize - re-renders the chart\n\t    * @return {object} this\n\t    */\n\t\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize() {\n\t      this.update();\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return LineChart;\n\t}(_Chart3.default);\n\t\n\tmodule.exports = LineChart;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// d3-chart-framework.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7d2f3d9024d299cb174e","export { default as Axes } from './Axes';\nexport { InvalidNodeError, InvalidGroupError } from './Errors';\nexport { default as Grid } from './Grid';\nexport { default as Group } from './groups/Group';\nexport { default as BarGroup } from './groups/BarGroup';\nexport { default as LineGroup } from './groups/LineGroup';\nexport { default as NodeGroup } from './groups/NodeGroup';\nexport { default as Node } from './nodes/Node';\nexport { default as BarNode } from './nodes/BarNode';\nexport { default as LineNode } from './nodes/LineNode';\nexport { default as RectNode } from './nodes/RectNode';\nexport { default as SegmentNode } from './nodes/SegmentNode';\nexport { default as Chart } from './Chart';\nexport { default as BarChart } from './BarChart';\nexport { default as ScatterPlot } from './ScatterPlot';\nexport { default as LineChart } from './LineChart';\nexport { default as Tooltip } from './Tooltip';\nexport { default as Zoom } from './Zoom';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","const d3 = require('d3');\nconst _ = require('underscore');\nconst moment = require('moment');\n\nimport Grid from './Grid';\n\n/**\n* getDatetimeUnit - determine the unit of time for padding the axis\n*\n* @param {object} min, the min moment datetime object\n* @param {object} max, the max moment datetime object\n* @return {string} the datetime unit {day, week, month}\n*/\nfunction getDatetimeUnit(min, max) {\n  const diff = max.diff(min, 'days');\n  let unit = 'month';\n  if (diff <= 14) {\n    unit = 'day';\n  } else if (diff > 14 && diff <= 183) {\n    unit = 'week';\n  }\n  return unit;\n}\n\nclass Axes {\n  /**\n  * Axes\n  * constructs 2d cartesian axes, appends to the container SVG element of the chart\n  *\n  * @param {object} chart - the chart to append the axis\n  * @param {object} options - the properties for the axis\n  * @param {boolean} grid - should the grid be displayed?\n  * X axis properties\n  * @param {object} options.axes.x - the properties for x axis\n  * @param {string} options.axes.x.title - the title of the x axis\n  * @param {string} options.axes.x.type - the datatype of the x axis {numeric, datetime}\n  * Y axis properties\n  * @param {object} options.axes.y - the properties for y axis\n  * @param {string} options.axes.y.title - the title of the y axis\n  * @param {string} options.axes.y.type - the datatype of the y axis {numeric, datetime}\n  * @returns {object} this - returns self\n  * @example usage:\n  *  with an instance of a chart:\n  ```\n  axes = new Axes(plot, {\n    axes: {\n      grid: true,\n      x: {\n        title: 'Time',\n        type: 'datetime',\n        minMax: [1443371126, 1474993537]\n      },\n      y: {\n        title: 'Incidents',\n        type: 'numeric',\n        minMax: [0, 100]\n      },\n    }\n  })\n  ```\n  */\n  constructor(chart, options) {\n    this.chart = chart;\n    this.options = options || {x: {title: 'x', type: 'numeric'}, y: {title: 'y', type: 'numeric'}, grid: true, filter: true};\n    this.useAutoPadding = options.useAutoPadding || false;\n    this.defaultMinMax = [[0, 0], [0, 0]];\n    this.draw();\n  }\n\n  /**\n  * init - initialize the plot x,y axes\n  *\n  * @param {array=} xDomain - the zoom xDomain or undefined\n  * @param {array=} yDomain - the zoom yDomain or undefined\n  */\n  draw(xDomain, yDomain) {\n    if (this.options.x.type === 'datetime') {\n      if (xDomain) {\n        this.xScale = d3.scaleTime().domain(xDomain).range([0, this.chart.getWidth()]).nice();\n      } else {\n        this.xScale = d3.scaleTime().domain(this.defaultMinMax[0]).range([0, this.chart.getWidth()]).nice();\n      }\n    } else if (this.options.x.type === 'band') {\n      if (xDomain) {\n        this.xScale = d3.scaleBand().domain(xDomain).rangeRound([0, this.chart.getWidth()]).padding(0.1);\n      } else {\n        this.xScale = d3.scaleBand().domain(['']).rangeRound([0, this.chart.getWidth()]).padding(0.1);\n      }\n    } else {\n      if (xDomain) {\n        this.xScale = d3.scaleLinear().domain(xDomain).range([0, this.chart.getWidth()]);\n      } else {\n        this.xScale = d3.scaleLinear().domain(this.defaultMinMax[0]).range([0, this.chart.getWidth()]);\n      }\n    }\n    if (this.options.x.type === 'datetime') {\n      this.xAxis = d3.axisBottom().scale(this.xScale).ticks(10).tickFormat(d3.timeFormat(this.formatDate()));\n    } else if (this.options.x.type === 'band') {\n      this.xAxis = d3.axisBottom().scale(this.xScale);\n    } else {\n      this.xAxis = d3.axisBottom().scale(this.xScale).ticks(10);\n    }\n    if (this.options.x.type === 'datetime') {\n      this.xGroup = this.chart.container.append('g').attr('class', 'x d3cf-axis').attr('transform', `translate(${this.chart.margins.left}, ${this.chart.getHeight()})`).call(this.xAxis);\n      this.xGroup.selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', () => {\n        return 'rotate(-65)';\n      });\n    } else {\n      this.xGroup = this.chart.container.append('g').attr('class', 'x d3cf-axis').attr('transform', `translate(${this.chart.margins.left}, ${this.chart.getHeight()})`).call(this.xAxis);\n    }\n\n    if (yDomain) {\n      this.yScale = d3.scaleLinear().domain(yDomain).range([this.chart.getHeight(), 0]);\n    } else {\n      this.yScale = d3.scaleLinear().domain(this.defaultMinMax[1]).range([this.chart.getHeight(), 0]);\n    }\n    this.yAxis = d3.axisLeft().scale(this.yScale);\n    this.yGroup = this.chart.container.append('g').attr('class', 'y d3cf-axis').attr('transform', `translate(${this.chart.margins.left}, 0)`).call(this.yAxis);\n    if (this.options.grid) {\n       this.grid = new Grid(this, this.chart);\n    }\n\n    let padding = 0;\n    if (this.options.x.type === 'datetime') {\n      padding = 45;\n    }\n\n    if (this.xLabel) {\n      // update\n      this.xLabel\n        .attr('dx', (this.chart.width / 2) - ((this.chart.margins.right + this.chart.margins.left) / 2))\n        .attr('dy', this.chart.margins.bottom);\n    } else {\n      // add\n      this.xLabel = this.chart.container\n        .append('g')\n          .attr('class', 'x d3cf-axis-label')\n          .attr('transform', `translate(${this.chart.margins.left}, ${this.chart.getHeight() + padding})`)\n        .append('text')\n          .attr('dx', (this.chart.width / 2) - ((this.chart.margins.right + this.chart.margins.left) / 2))\n          .attr('dy', this.chart.margins.bottom)\n          .attr('class', 'd3cf-axis-label')\n          .style('text-anchor', 'middle')\n          .text(() => {\n            return this.options.x.title || '';\n          });\n    }\n    if (this.yLabel) {\n      // update\n      this.yLabel\n        .attr('dx', -(this.chart.height / 2) + ((this.chart.margins.top + this.chart.margins.bottom) / 2))\n        .attr('dy', -this.chart.margins.left);\n    } else {\n      // add\n      this.yLabel = this.chart.container\n        .append('g')\n          .attr('class', 'y d3cf-axis-label')\n          .attr('transform', `translate(${this.chart.margins.left}, 0)`)\n        .append('text')\n          .attr('transform', 'rotate(-90)')\n          .attr('dx', -(this.chart.height / 2) + ((this.chart.margins.top + this.chart.margins.bottom) / 2))\n          .attr('dy', -this.chart.margins.left)\n          .attr('class', 'd3cf-axis-label')\n          .style('text-anchor', 'middle')\n          .text(() => {\n            return this.options.y.title;\n          });\n    }\n  }\n\n  /**\n  * setDomain - sets the x, y domains based on the current chart data\n  *\n  */\n  setDomain() {\n    const minMax = this.calcMinMax(false);\n    this.xScale.domain(minMax[0]);\n    this.yScale.domain(minMax[1]);\n    if (this.options.filter) {\n      this.chart.removeFilter('_domain').addFilter('_domain', (d) => {\n        if (this.options.x.type === 'band') return d;\n        // TODO: should this scope be the Chart/Plot or the Axes?\n        let x1 = this.xScale.domain()[0];\n        if (x1 instanceof Date) {\n          x1 = x1.getTime();\n        }\n        let x2 = this.xScale.domain()[1];\n        if (x2 instanceof Date) {\n          x2 = x2.getTime();\n        }\n        const y1 = this.yScale.domain()[0];\n        const y2 = this.yScale.domain()[1];\n        if (d.hasOwnProperty('x2')) {\n          if ((Math.floor(d.x1) >= x1 && Math.floor(d.x2) <= x2) && (Math.floor(d.y1) >= y1 && Math.floor(d.y1) <= y2)) {\n            return d;\n          }\n        } else {\n          if ((Math.floor(d.x1) >= x1) && (Math.floor(d.y1) >= y1 && Math.floor(d.y1) <= y2)) {\n            return d;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n  * update - update the x,y axes using the zoom domain\n  *\n  * @param {array} data - an array of {object} for each marker\n  * @param {boolean} shouldSetDomain - should the domain be set to data bounds\n  * @return {object} this\n  */\n  update(data, shouldSetDomain) {\n    this.remove();\n    if (data && shouldSetDomain) {\n      this.setDomain(data);\n    }\n    this.draw(this.xScale.domain(), this.yScale.domain());\n    return this;\n  }\n\n  /**\n  * the minMax for all nodes without the domain filters\n  *\n  * @param {boolean} shouldFilterDomain\n  * @return {array} minMax\n  */\n  calcMinMax(shouldFilterDomain) {\n      const data = this.chart.getGroupsNodes(shouldFilterDomain);\n      if (data.length === 0) {\n        if (this.options.x.type === 'band') {\n          return [[''], [0, 0]];\n        }\n        return [[0, 0], [0, 0]];\n      }\n      let xMin = 0;\n      let xMax = 0;\n      if (this.options.x.type === 'datetime') {\n        const x1 = _.pluck(data, 'x1');\n        const x2 = _.pluck(data, 'x2');\n        xMin = Axes.minDatetime(x1, this.useAutoPadding);\n        xMax = xMin;\n        if (x2.length > 0) {\n          xMax = Axes.maxDatetime(x2, this.useAutoPadding);\n        }\n        if (isNaN(xMax)) {\n          xMax = Axes.maxDatetime(x1, this.useAutoPadding);\n        }\n      } else if (this.options.x.type === 'band') {\n        xMin = _.pluck(data, 'x1');\n      } else {\n        const x1 = _.pluck(data, 'x1');\n        const x2 = _.pluck(data, 'x2');\n        xMin = Axes.minNumeric(x1, this.useAutoPadding);\n        xMax = xMin;\n        if (x2.length > 0) {\n          xMax = Axes.maxNumeric(x2, this.useAutoPadding);\n        }\n        if (isNaN(xMax)) {\n          xMax = Axes.maxNumeric(x1, this.useAutoPadding);\n        }\n      }\n      const yMin = 0;\n      const yMax = Axes.maxNumeric(_.pluck(data, 'y1'), this.useAutoPadding);\n      if (this.options.x.type === 'band') {\n        return [xMin, [yMin, yMax]];\n      }\n      return [[xMin, xMax], [yMin, yMax]];\n  }\n\n  /**\n  * reset - resets the x,y axes back to the original domain\n  *\n  */\n  reset() {\n    const minMax = this.calcMinMax(false);\n    if (minMax[0][0] === 0 && minMax[0][1] === 0 && minMax[1][0] === 0 && minMax[1][1] === 0) {\n        return;\n    }\n    this.remove();\n    this.draw(minMax[0], minMax[1]);\n    return this;\n  }\n\n  /**\n  * zoom - zooms the x, y axes based on the zoomArea object\n  *\n  * @param {object} zoomArea, an object containing a bounding box of x,y coordinates\n  */\n  zoom(zoomArea) {\n    if (zoomArea.x1 > zoomArea.x2) {\n      this.xScale.domain([zoomArea.x2, zoomArea.x1]);\n    } else {\n      this.xScale.domain([zoomArea.x1, zoomArea.x2]);\n    }\n    if (this.options.x.type === 'datetime') {\n      this.xAxis.tickFormat(d3.timeFormat(this.formatDate()));\n    }\n    if (zoomArea.y1 > zoomArea.y2) {\n      this.yScale.domain([zoomArea.y2, zoomArea.y1]);\n    } else {\n      this.yScale.domain([zoomArea.y1, zoomArea.y2]);\n    }\n    const trans = this.chart.container.transition().duration(750);\n    this.xGroup.transition(trans).call(this.xAxis);\n    this.xGroup.selectAll('g').selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', 'rotate(-65)');\n    this.yGroup.transition(trans).call(this.yAxis);\n    if (this.grid) {\n      this.grid.remove();\n      this.grid = new Grid(this, this.chart);\n    }\n    return this;\n  }\n\n  /**\n  * remove - removes the x,y axis groups from the plot\n  *\n  */\n  remove() {\n    this.xGroup.remove();\n    this.yGroup.remove();\n    if (this.grid) {\n      return this.grid.remove();\n    }\n  }\n\n  /**\n  * formatDate - a method that formats the axis date label\n  *\n  */\n  formatDate() {\n    const xDomain = this.xScale.domain();\n    const duration = moment.duration(moment(xDomain[1]).diff(xDomain[0])).asDays();\n    if (duration <= 7) {\n      return '%b %d - %H:%M';\n    }\n    return '%b %d, %Y';\n  }\n\n  /**\n  * maxNumeric - determine the maximum value with padding. Padding is determined\n  * by the number of digits ^ 10 / 10, unless number of digets == 10 then return\n  * 10\n  *\n  * @param {array} data - an array of positive integers\n  * @return {number} max\n  */\n  static maxNumeric(data, useAutoPadding) {\n    const m = Math.floor(_.max(data));\n    if (useAutoPadding) {\n      const l = String(m).split('').length;\n      if (l === 1) {\n        return 10;\n      }\n      const p = (Math.pow(10, l)) / 10;\n      return m + p;\n    }\n    return Math.ceil(m);\n  }\n\n  /**\n  * minNumeric - determine the minimum value with padding. Padding is determined\n  * by the number of digits ^ 10 / 10, unless number of digets == 10 then return\n  * 10\n  *\n  * @param {array} data - an array of positive integers\n  * @return {number} max\n  */\n  static minNumeric(data, useAutoPadding) {\n    const m = Math.floor(_.min(data));\n    if (useAutoPadding) {\n      const l = String(m).split('').length;\n      if (l === 1) {\n        return 10;\n      }\n      const p = (Math.pow(10, l)) / 10;\n      return m + p;\n    }\n    return Math.ceil(m);\n  }\n\n  /**\n  * maxDatetime - determine the maximum value with padding\n  *\n  * @param {array} data - an array of timestamps in milliseconds\n  * @return {number} max - maximum datetime value\n  */\n  static maxDatetime(data, useAutoPadding) {\n    const max = moment(_.max(data));\n    if (useAutoPadding) {\n      const min = moment(_.min(data));\n      const unit = getDatetimeUnit(min, max);\n      return moment(max).add(1, unit).valueOf();\n    }\n    return max.valueOf();\n  }\n\n  /**\n  * minDatetime - determine the minimum value with padding\n  *\n  * @param {array} data - an array of timestamps in milliseconds\n  * @return {number} min - minimum datetime value\n  */\n  static minDatetime(data, useAutoPadding) {\n    const min = moment(_.min(data));\n    if (useAutoPadding) {\n      const max = moment(_.max(data));\n      const unit = getDatetimeUnit(min, max);\n      return moment(min).subtract(1, unit).valueOf();\n    }\n    return min.valueOf();\n  }\n}\n\n\nmodule.exports = Axes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Axes.js","const d3 = require('d3');\n\nclass Grid {\n  /**\n  * Grid - constructs grids lines for the plot\n  *\n  * @param {object} axes - the axes to determine xScale, yScale\n  * @param {object} plot - the plot to append the axis\n  * @param {object} options - the properties for the axis\n  * @returns {object} this\n  */\n  constructor(axes, plot, options) {\n    this.plot = plot;\n    this.options = options || {};\n    this.axes = axes;\n    this.init();\n    return this;\n  }\n\n  /*\n  * init - initialize the x,y grid lines for a plot\n  *\n  */\n  init() {\n    this.xGrid = d3.axisBottom().scale(this.axes.xScale).tickFormat('').tickSize((this.plot.getHeight()) * -1, 0, 0);\n    this.xGroup = this.plot.container.insert('g', ':first-child').attr('class', 'd3cf-grid').attr('transform', `translate(${this.plot.margins.left}, ${this.plot.getHeight()})`).attr('opacity', null).call(this.xGrid);\n    this.yGrid = d3.axisLeft().scale(this.axes.yScale).tickFormat('').tickSize((this.plot.getWidth()) * -1, 0, 0);\n    this.yGroup = this.plot.container.insert('g', ':first-child').attr('class', 'd3cf-grid').attr('transform', `translate(${this.plot.margins.left}, 0)`).attr('opacity', null).call(this.yGrid);\n  }\n\n  /*\n  * remove - removed the grid lines from the plot\n  *\n  */\n  remove() {\n    this.xGroup.remove();\n    this.yGroup.remove();\n  }\n}\n\nmodule.exports = Grid;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Grid.js","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"d3\"\n// module id = 3\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"underscore\"\n// module id = 4\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 5\n// module chunks = 0","/**\n* InvalidNodeError - error thrown when an object is not instanceof Node\n*\n* @param {string} [message] - (optional) the message to the user\n*/\nexport class InvalidNodeError extends Error {\n  constructor(message) {\n    const message_ = message || 'Is not instanceof Node.';\n    super(message_);\n  }\n}\n\n/**\n* InvalidGroupError - error thrown when an object is not instanceof Group\n*\n* @param {string} [message] - (optional) the message to the user\n*/\nexport class InvalidGroupError extends Error {\n  constructor(message) {\n    const message_ = message || 'Is not instanceof Group.';\n    super(message_);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Errors.js","const d3 = require('d3');\nconst _ = require('underscore');\n\nimport Node from '../nodes/Node';\nimport { InvalidNodeError } from '../Errors';\n\n\nfunction genId() {\n  const length = 9;\n  const prefix = 'group-';\n  return prefix + Math.random().toString(36).substr(2, length);\n}\n\nclass Group {\n  constructor(chart, options) {\n    this.options = options || {};\n    this.id = this.options.id || genId();\n    const onEnter = this.options.onEnter || Group.onEnter;\n    this.onEnter = _.bind(onEnter, this);\n    const onUpdate = this.options.onUpdate || Group.onUpdate;\n    this.onUpdate = _.bind(onUpdate, this);\n    const onExit = this.options.onExit || Group.onExit;\n    this.onExit = _.bind(onExit, this);\n    this.nodes_ = {};\n    this.chart = chart;\n    return this;\n  }\n\n  /**\n  * size - returns the size of the Group's nodes\n  *\n  * @return {number} size - the size of the group\n  */\n  size() {\n    return Object.values(this.nodes_).length;\n  }\n\n  /**\n  * addNode - adds a node to this group\n  *\n  * @param {object} node - the node to add\n  * @throws {InvalidGroupError} error\n  * @return {Group} this\n  */\n  addNode(node) {\n    if (typeof node === 'undefined' || !node instanceof Node) {\n      throw new InvalidNodeError();\n    }\n    this.nodes_[node.id] = node;\n    return this;\n  }\n\n  /**\n  * removeNode - removes a node from this group\n  *\n  * @param {string} id - the id to remove\n  * @return {object} this\n  */\n  removeNode(id) {\n    if (this.nodes_.hasOwnProperty(id)) {\n      delete this.nodes_[id];\n    }\n    return this;\n  }\n\n  /**\n  * getNodes - returns the nodes associated with this group\n  *\n  * @return {array} nodes - the nodes associated with this group\n  */\n  getNodes() {\n    return Object.values(this.nodes_);\n  }\n\n  /**\n  * update - handles updating the marker\n  *\n  * @return {object} this\n  */\n  update() {\n    throw new Error('Update must be implemented.');\n  }\n\n  /**\n  * detached - builds a detached svg group and returns the node\n  *\n  * @return {object} node - the SVG node to append to the parent during .call()\n  */\n  detached() {\n    this.remove();\n    this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'd3cf-group').remove();\n    this.update();\n    return this.group.node();\n  }\n\n  /**\n  * remove - removes the group from the DOM\n  *\n  */\n  remove() {\n    if (this.group) {\n      this.group.remove();\n    }\n  }\n\n  /**\n  * destroy - destroys the group and any associated elements\n  *\n  */\n  destroy() {\n    this.remove();\n    this.chart.removeLayer(this.id);\n    this.nodes = null;\n    this.chart = null;\n    this.group = null;\n  }\n\n  /**\n  * onEnter - the default event handler for a group. This may be overridden or\n  *   a new event handler passed into the constructor as `options.onEnter`\n  *\n  * @param {object} selections - the d3 selection object containing the children for this group\n  */\n  static onEnter() {}\n\n  /**\n  * onUpdate - the default event handler for a group. This may be overridden or\n  *   a new event handler passed into the constructor as `options.onUpdate`\n  *\n  * @param {object} selections - the d3 selection object for this group\n  */\n  static onUpdate() {}\n\n  /**\n  * onExit - the default event handler for a group. This may be overridden or\n  *   a new event handler passed into the constructor as `options.onExit`\n  *\n  * @param {object} selections - the d3 selection object for this group\n  */\n  static onExit() {}\n}\n\nmodule.exports = Group;\n\n\n\n// WEBPACK FOOTER //\n// ./src/groups/Group.js","const d3 = require('d3');\n\n\nfunction genId() {\n  const length = 9;\n  const prefix = 'node-';\n  return prefix + Math.random().toString(36).substr(2, length);\n}\n\nclass Node {\n  /**\n  * Node - base class\n  *\n  * @param {object} options - the options used to construct the SegmentMarker\n  * @param {object} options.meta - the optional meta data associated with the node (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(options) {\n    this.id = options.id || genId();\n    this.meta = options.meta || {};\n    this.group = null;\n    return this;\n  }\n\n  /**\n  * remove - removes the marker from the DOM\n  *\n  */\n  remove() {\n    if (this.group) {\n      return this.group.remove();\n    }\n  }\n\n  /**\n  * update - updates one or more elements within the RectNode SVG group\n  *\n  */\n  update() {\n    return this;\n  }\n\n  /**\n  * detached - builds a detached svg group and returns the node\n  *\n  * @return {object} node - the SVG node to append to the parent during .call()\n  */\n  detached() {\n    this.remove();\n    this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'd3cf-node').attr('opacity', this.o).remove();\n    this.update();\n    return this.group.node();\n  }\n\n}\n\n\nmodule.exports = Node;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/Node.js","import Group from './Group';\n\n\nclass BarGroup extends Group {\n  constructor(chart, options) {\n    super(chart, options);\n    return this;\n  }\n\n  /**\n  * update - handles updating the marker\n  *\n  * @return {object} this\n  */\n  update() {\n    const filtered = this.chart.applyFilters(this.getNodes());\n    this.group.attr('numNodes', filtered.length);\n    const nodes = this.group.selectAll('.d3cf-node').data(filtered, (d) => {\n      return d.id;\n    });\n    nodes.enter().append((node) => {\n      return node.detached();\n    }).call(this.onEnter);\n    nodes.each((node) => {\n      return node.update();\n    }).call(this.onUpdate);\n    nodes.exit().remove().call(this.onExit);\n  }\n\n}\n\nmodule.exports = BarGroup;\n\n\n\n// WEBPACK FOOTER //\n// ./src/groups/BarGroup.js","const d3 = require('d3');\n\nimport Group from './Group';\n\n\nclass LineGroup extends Group {\n  constructor(chart, options) {\n    super(chart, options);\n    this.s = options.s || 'steelblue';\n    this.w = options.w || 1.5;\n    this.meta = options.meta || {};\n    const defaultGenerator = d3.line().x((d) => {\n      return this.chart.axes.xScale(d.x1);\n    }).y((d) => {\n      return this.chart.axes.yScale(d.y1);\n    });\n    this.generator = options.generator || defaultGenerator;\n    return this;\n  }\n\n  /**\n  * update - handles updating the marker\n  *\n  * @return {object} this\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      return;\n    }\n    /**\n    * comparator function for sorting by x1 ascending\n    *\n    * @param {object} a - LineNode object\n    * @param {object} b - LineNode object\n    * @return {number}\n    */\n    function cmp(a, b) {\n      return a.x1 - b.x1;\n    }\n    const filtered = this.chart.applyFilters(this.getNodes()).sort(cmp);\n    this.group.attr('numNodes', filtered.length);\n    // select\n    const path = this.group.select('.d3cf-line');\n    if (path.empty()) {\n      // enter\n      this.group.append('path')\n        .datum(filtered, (d) => {\n          return d.id;\n        })\n        .attr('fill', 'transparent')\n        .attr('stroke', this.s)\n        .attr('stroke-linejoin', 'round')\n        .attr('stroke-linecap', 'round')\n        .attr('stroke-width', this.w)\n        .attr('class', 'd3cf-line')\n        .attr('d', (d) => {\n          return this.generator(d);\n        })\n        .call(this.onEnter);\n    }\n    // update\n    path.attr('stroke', this.s)\n      .attr('stroke-width', this.w)\n      .attr('d', (d) => {\n        return this.generator(d);\n      }).call(this.onUpdate);\n    // exit\n    path.exit().remove().call(this.onExit);\n    const nodes = this.group.selectAll('.node').data(filtered, (d) => {\n      return d.id;\n    });\n    nodes.enter().append((node) => {\n      return node.detached();\n    }).call(this.onEnter);\n    nodes.each((node) => {\n      return node.update();\n    }).call(this.onUpdate);\n    nodes.exit().remove().call(this.onExit);\n  }\n\n}\n\nmodule.exports = LineGroup;\n\n\n\n// WEBPACK FOOTER //\n// ./src/groups/LineGroup.js","import Group from './Group';\n\n\nclass NodeGroup extends Group {\n  constructor(chart, options) {\n    super(chart, options);\n    return this;\n  }\n\n  /**\n  * update - handles updating the marker\n  * @override\n  *\n  * @return {object} this\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      return;\n    }\n    const filtered = this.chart.applyFilters(this.getNodes());\n    this.group.attr('numNodes', filtered.length);\n    const nodes = this.group.selectAll('.node').data(filtered, (d) => {\n      return d.id;\n    });\n    nodes.enter().append((node) => {\n      return node.detached();\n    }).call(this.onEnter);\n    nodes.each((node) => {\n      return node.update();\n    }).call(this.onUpdate);\n    nodes.exit().remove().call(this.onExit);\n  }\n\n}\n\nmodule.exports = NodeGroup;\n\n\n\n// WEBPACK FOOTER //\n// ./src/groups/NodeGroup.js","const d3 = require('d3');\n\nimport Node from './Node';\n\n\nclass BarNode extends Node {\n  /**\n  * BarNode - a data point for a path/line generator\n  *\n  * @param {object} chart - an instance of a chart\n  * @param {object} options - the options used to construct the chart\n  * @param {string} options.x1 - the category for x1 position\n  * @param {number} options.y1 - the value for y1 position\n  * @param {string} options.f - the fill of the bar\n  * @param {number} options.o - the opacity of the bar\n  * @param {object=} options.meta - the optional meta data associated with the circle (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(chart, options) {\n    super(options);\n    this.chart = chart;\n    this.x1 = options.x1;\n    this.y1 = options.y1;\n    this.f = options.r || '#345e7e';\n    this.o = options.o || 0;\n    this.style = options.style || 'd3cf-node';\n    this.meta = options.meta || {};\n    return this;\n  }\n\n  getFill(type) {\n    let fill = '#33B5E5';\n    switch (type) {\n      case 'info':\n        fill = '#33B5E5';\n        break;\n      case 'success':\n        fill = '#00C851';\n        break;\n      case 'muted':\n        fill = '#636c72';\n        break;\n      case 'primary':\n        fill = '#0275d8';\n        break;\n      case 'warning':\n        fill = '#FFBB33';\n        break;\n      case 'danger':\n        fill = '#d9534f';\n        break;\n      default:\n        break;\n    }\n    return fill;\n  }\n\n  /**\n  * update - updates one or more elements\n  * @returns {object} this\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      this.group = d3.select(`#${this.id}`);\n    }\n    // select\n    const rect = this.group.selectAll('rect').data([this], (d) => {\n      return d.id;\n    });\n    // create\n    rect.enter().append('rect').attr('class', this.style).attr('x', () => {\n      return this.chart.axes.xScale(this.x1);\n    }).attr('y', () => {\n      return this.chart.axes.yScale(this.y1);\n    }).attr('width', () => {\n      return this.chart.axes.xScale.bandwidth();\n    }).attr('height', () => {\n      return this.chart.getHeight() - this.chart.axes.yScale(this.y1);\n    }).style('fill', () => {\n      return this.getFill(this.x1);\n    }).style('opacity', () => {\n      return this.o;\n    }).on('mouseover', () => {\n      if (this.chart.tooltip) {\n        return this.chart.tooltip.mouseover(this, d3.event.pageX, d3.event.pageY);\n      }\n    }).on('mouseout', () => {\n      if (this.chart.tooltip) {\n        return this.chart.tooltip.mouseout();\n      }\n    });\n    // update\n    rect.attr('x', () => {\n      return this.chart.axes.xScale(this.x1);\n    }).attr('y', () => {\n      return this.chart.axes.yScale(this.y1);\n    }).attr('width', () => {\n      return this.chart.axes.xScale.bandwidth();\n    }).attr('height', () => {\n      return this.chart.getHeight() - this.chart.axes.yScale(this.y1);\n    });\n    // remove\n    rect.exit().remove();\n    return this;\n  }\n}\n\n\nmodule.exports = BarNode;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/BarNode.js","const d3 = require('d3');\n\nimport Node from './Node';\n\n\nclass LineNode extends Node {\n  /**\n  * LineNode - a data point for a path/line generator\n  *\n  * @param {object} chart - an instance of a chart\n  * @param {object} options - the options used to construct the plot\n  * @param {number} options.x1 - the value for x1 position\n  * @param {number} options.y1 - the value for y1 position\n  * @param {string} options.r - the radius of the circle\n  * @param {number} options.o - the opacity of the cirle\n  * @param {object} options.meta - the optional meta data associated with the circle (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(chart, options) {\n    super(options);\n    this.chart = chart;\n    this.x1 = options.x1;\n    this.y1 = options.y1;\n    this.r = options.r || 3;\n    this.o = options.o || 0;\n    this.style = options.style || 'd3cf-node';\n    this.meta = options.meta || {};\n    return this;\n  }\n\n  getFill(type) {\n    let fill = '#33B5E5';\n    switch (type) {\n      case 'warning':\n        fill = '#FFBB33';\n        break;\n      case 'success':\n        fill = '#00C851';\n        break;\n      case 'info':\n        fill = '#33B5E5';\n        break;\n      default:\n        break;\n    }\n    return fill;\n  }\n\n  /**\n  * update - updates one or more elements\n  *\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      this.group = d3.select(`#${this.id}`);\n    }\n    /**\n    * Each node of the line's `path` (see LineGroup) is a transparent circle in\n    * order to have a mouseover event.\n    *\n    * @see https://groups.google.com/forum/#!topic/d3-js/gHzOj91X2NA\n    */\n    // select\n    const circle = this.group.selectAll('circle').data([this], (d) => {\n      return d.id;\n    });\n    // create\n    circle.enter().append('circle')\n      .attr('class', this.style)\n      .attr('cx', () => {\n        return this.chart.axes.xScale(this.x1);\n      }).attr('cy', () => {\n        return this.chart.axes.yScale(this.y1);\n      }).attr('r', () => {\n        return this.r;\n      }).attr('opacity', () => {\n        return this.o;\n      }).on('mouseover', () => {\n        if (this.chart.tooltip) {\n          return this.chart.tooltip.mouseover(this, d3.event.pageX, d3.event.pageY);\n        }\n      }).on('mouseout', () => {\n        if (this.chart.tooltip) {\n          return this.chart.tooltip.mouseout();\n        }\n      });\n    // update\n    circle.attr('cx', () => {\n      return this.chart.axes.xScale(this.x1);\n    }).attr('cy', () => {\n      return this.chart.axes.yScale(this.y1);\n    }).attr('r', () => {\n      return this.r;\n    }).attr('opacity', () => {\n      return this.o;\n    });\n    // remove\n    circle.exit().remove();\n    return this;\n  }\n\n}\n\n\nmodule.exports = LineNode;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/LineNode.js","const d3 = require('d3');\n\nimport Node from './Node';\n\n\nconst MINIMUM_MARKER_WIDTH = 10;\nconst MINIMUM_MARKER_HEIGHT = 10;\n\nclass RectNode extends Node {\n  /**\n  * RectNode - a rectangular node\n  *\n  * @param {object} plot - an instance of a plot\n  * @param {object} options - the options used to construct the plot\n  * @param {number} options.x1 - the value for x1 position\n  * @param {number} options.x2 - the value for x2 position\n  * @param {number} options.y1 - the value for y1 position\n  * @param {number} options.h - the value for the height\n  * @param {string} options.f - the fill of the marker\n  * @param {number} options.o - the opacity of the marker\n  * @param {object} options.meta - the optional meta data associated with the marker (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(plot, options) {\n    super(options);\n    this.plot = plot;\n    this.x1 = options.x1;\n    this.x2 = options.x2;\n    this.y1 = options.y1;\n    this.h = options.h || 10;\n    this.f = options.f || '#345e7e';\n    this.o = options.o || 0.4;\n    this.style = options.style || 'd3cf-node';\n    return this;\n  }\n\n  /**\n  * update - updates one or more elements within the RectNode SVG group\n  *\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      this.group = d3.select(`#${this.id}`);\n    }\n    // select\n    const rect = this.group.selectAll('rect').data([this], (d) => {\n      return d.id;\n    });\n    // create\n    rect.enter().append('rect').attr('class', this.style).attr('x', () => {\n      return this.plot.axes.xScale(this.x1);\n    }).attr('y', () => {\n      let height = this.h;\n      if (height < MINIMUM_MARKER_HEIGHT) {\n        height = MINIMUM_MARKER_HEIGHT;\n      }\n      return this.plot.axes.yScale(this.y1) - height / 2;\n    }).attr('width', () => {\n      let width = this.plot.axes.xScale(this.x2) - this.plot.axes.xScale(this.x1);\n      if (width < MINIMUM_MARKER_WIDTH) {\n        width = MINIMUM_MARKER_WIDTH;\n      }\n      return width;\n    }).attr('height', () => {\n      let height = this.h;\n      if (height < MINIMUM_MARKER_HEIGHT) {\n        height = MINIMUM_MARKER_HEIGHT;\n      }\n      return height;\n    }).style('fill', () => {\n      return this.f;\n    }).style('opacity', () => {\n      return this.o;\n    }).on('mouseover', () => {\n      if (this.plot.tooltip) {\n        return this.plot.tooltip.mouseover(this, d3.event.pageX, d3.event.pageY);\n      }\n    }).on('mouseout', () => {\n      if (this.plot.tooltip) {\n        return this.plot.tooltip.mouseout();\n      }\n    });\n\n    // update\n    rect.attr('x', () => {\n      return this.plot.axes.xScale(this.x1);\n    }).attr('y', () => {\n      let height = this.h;\n      if (height < MINIMUM_MARKER_HEIGHT) {\n        height = MINIMUM_MARKER_HEIGHT;\n      }\n      return this.plot.axes.yScale(this.y1) - height / 2;\n    }).attr('width', () => {\n      let width = this.plot.axes.xScale(this.x2) - this.plot.axes.xScale(this.x1);\n      if (width < MINIMUM_MARKER_WIDTH) {\n        width = MINIMUM_MARKER_WIDTH;\n      }\n      return width;\n    }).attr('height', () => {\n      let height = this.h;\n      if (height < MINIMUM_MARKER_HEIGHT) {\n        height = MINIMUM_MARKER_HEIGHT;\n      }\n      return height;\n    });\n\n    // remove\n    rect.exit().remove();\n    return this;\n  }\n}\n\n\nmodule.exports = RectNode;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/RectNode.js","import d3 from 'd3';\nimport _ from 'underscore';\nimport Node from './Node';\n\nconst MINIMUM_LINE_STROKE = 4;\nconst MINIMUM_CIRCLE_RADIUS = 5;\nconst MINIMUM_LINE_THRESHOLD = 2;\n\nclass SegmentNode extends Node {\n  /**\n  * SegmentNode - a line with beginning and end circles\n  * @param {object} plot - an instance of a plot\n  * @param {object} options - the options used to construct the SegmentNode\n  * @param {number} options.x - the value for x position\n  * @param {number} options.y - the value for y position\n  * @param {number} options.l - the value for the length of the line\n  * @param {number} options.h - the value for the height\n  * @param {string} options.f - the fill of the line\n  * @param {number} options.o - the opacity of the line\n  * @param {object} options.meta - the optional meta data associated with the node (e.g. used in the Tooltip)\n  * @return {object} this\n  */\n  constructor(plot, options) {\n    super(options);\n    this.plot = plot;\n    this.x = options.x;\n    this.y = options.y;\n    this.w = options.w;\n    this.h = options.h || MINIMUM_LINE_STROKE;\n    this.r = options.r || MINIMUM_CIRCLE_RADIUS;\n    this.f = options.f || '#345e7e';\n    this.o = options.o || 0.3;\n    this.meta = options.meta || {};\n    return this;\n  }\n\n  /**\n  * remove - removes the node from the DOM\n  *\n  * @return {object} this\n  */\n  remove() {\n    if (this.group) {\n      return this.group.remove();\n    }\n  }\n\n  /**\n  * filteredOrderedPair - determine if the pair exists within the domain\n  *\n  */\n  filteredOrderedPair(orderedPair) {\n    if (orderedPair[0] < this.plot.axes.xScale.range()[0]) {\n      orderedPair[0] = null;\n    }\n    if (orderedPair[0] > this.plot.axes.xScale.range()[1]) {\n      orderedPair[0] = null;\n    }\n    if (orderedPair[1] < this.plot.axes.yScale.range()[1]) {\n      orderedPair[1] = null;\n    }\n    if (orderedPair[1] > this.plot.axes.yScale.range()[0]) {\n      orderedPair[1] = null;\n    }\n    return orderedPair;\n  }\n\n  /**\n  * update - handles updating the node\n  *\n  * @return {object} this\n  */\n  update() {\n    if (typeof this.group === 'undefined') {\n      this.group = d3.select(`#${this.id}`);\n    }\n    const linePairs = [[this.plot.axes.xScale(this.x), this.plot.axes.yScale(this.y)], [this.plot.axes.xScale(this.w), this.plot.axes.yScale(this.y)]];\n    const lineDistance = this.distance(linePairs);\n    const totalRange = this.plot.axes.xScale.range()[1];\n    const linePercentage = Math.floor((lineDistance / totalRange) * 100);\n    const startPoint = this.filteredOrderedPair([this.plot.axes.xScale(this.x), this.plot.axes.yScale(this.y)]);\n    const start = this.group.selectAll('.start-circle').data([this], (d) => {\n      return d.id;\n    });\n    if (startPoint[0] !== null && startPoint[1] !== null) {\n      start.enter().append('circle').attr('class', 'start-circle').style('fill', this.f).attr('cx', startPoint[0]).attr('cy', startPoint[1]).attr('r', () => {\n        let radius = this.r;\n        radius = Math.ceil((radius * (linePercentage / 100)) + radius);\n        if (radius < MINIMUM_CIRCLE_RADIUS) {\n          radius = MINIMUM_CIRCLE_RADIUS;\n        }\n        return radius;\n      });\n      start.attr('cx', startPoint[0]).attr('cy', startPoint[1]).attr('r', () => {\n        let radius = this.r;\n        radius = Math.ceil((radius * (linePercentage / 100)) + radius);\n        if (radius < MINIMUM_CIRCLE_RADIUS) {\n          radius = MINIMUM_CIRCLE_RADIUS;\n        }\n        return radius;\n      });\n      start.exit().remove();\n    } else {\n      this.group.selectAll('.start-circle').remove();\n    }\n    if (linePercentage >= MINIMUM_LINE_THRESHOLD) {\n      const line = this.group.selectAll('line').data([this], (d) => {\n        return d.id;\n      });\n      line.enter().append('line').attr('x1', () => {\n        if (linePairs[0][0] <= this.plot.axes.xScale.range()[0]) {\n          return this.plot.axes.xScale.range()[0];\n        }\n        if (linePairs[0][0] >= this.plot.axes.xScale.range()[1]) {\n          return null;\n        }\n        return linePairs[0][0];\n      }).attr('y1', linePairs[0][1]).attr('x2', () => {\n        if (linePairs[1][0] >= this.plot.axes.xScale.range()[1]) {\n          return this.plot.axes.xScale.range()[1];\n        }\n        if (linePairs[1][0] <= this.plot.axes.xScale.range()[0]) {\n          return null;\n        }\n        return linePairs[1][0];\n      }).attr('y2', linePairs[1][1]).attr('stroke-width', () => {\n        let height = this.h;\n        height = Math.ceil((height * (linePercentage / 100)) + height);\n        if (height < MINIMUM_LINE_STROKE) {\n          return MINIMUM_LINE_STROKE;\n        }\n        return height;\n      }).attr('stroke', this.f);\n      line.attr('x1', () => {\n        if (linePairs[0][0] <= this.plot.axes.xScale.range()[0]) {\n          return this.plot.axes.xScale.range()[0];\n        }\n        if (linePairs[0][0] >= this.plot.axes.xScale.range()[1]) {\n          return null;\n        }\n        return linePairs[0][0];\n      }).attr('y1', linePairs[0][1]).attr('x2', () => {\n        if (linePairs[1][0] >= this.plot.axes.xScale.range()[1]) {\n          return this.plot.axes.xScale.range()[1];\n        }\n        if (linePairs[1][0] <= this.plot.axes.xScale.range()[0]) {\n          return null;\n        }\n        return linePairs[1][0];\n      }).attr('y2', linePairs[1][1]).attr('stroke-width', () => {\n        let height = this.h;\n        height = Math.ceil((height * (linePercentage / 100)) + height);\n        if (height < MINIMUM_LINE_STROKE) {\n          return MINIMUM_LINE_STROKE;\n        }\n        return height;\n      });\n    } else {\n      this.group.selectAll('line').remove();\n    }\n    const endPoint = this.filteredOrderedPair([this.plot.axes.xScale(this.w), this.plot.axes.yScale(this.y)]);\n    if (linePercentage >= MINIMUM_LINE_THRESHOLD) {\n      if (endPoint[0] !== null && endPoint[1] !== null) {\n        const end = this.group.selectAll('.end-circle').data([this], (d) => {\n          return d.id;\n        });\n        end.enter().append('circle').attr('class', 'end-circle').attr('cx', endPoint[0]).attr('cy', endPoint[1]).attr('r', () => {\n          let radius = this.r;\n          radius = Math.ceil(((radius * linePercentage) / 100) + radius);\n          if (radius < MINIMUM_CIRCLE_RADIUS) {\n            radius = MINIMUM_CIRCLE_RADIUS;\n          }\n          return radius;\n        }).style('fill', this.f);\n        end.attr('class', 'end-circle').attr('cx', endPoint[0]).attr('cy', endPoint[1]).attr('r', () => {\n          let radius = this.r;\n          radius = Math.ceil(((radius * linePercentage) / 100) + radius);\n          if (radius < MINIMUM_CIRCLE_RADIUS) {\n            radius = MINIMUM_CIRCLE_RADIUS;\n          }\n          return radius;\n        });\n      } else {\n        this.group.selectAll('.end-circle').remove();\n      }\n    } else {\n      this.group.selectAll('.end-circle').remove();\n    }\n    return this;\n  }\n\n  /**\n  * detached - builds a detached svg group and returns the node\n  *\n  * @return {object} node - the SVG node to append to the parent during .call()\n  */\n  detached() {\n    this.remove();\n    this.group = d3.select(document.createElementNS(d3.namespaces.svg, 'g')).attr('id', this.id).attr('class', 'node').attr('opacity', this.o).remove();\n    this.update();\n    this.group.node();\n  }\n\n  /**\n  * distance - determine the distance between two pairs\n  *\n  */\n  distance(pairs) {\n    return Math.sqrt(Math.pow(Math.abs(pairs[0][0] - pairs[1][0]), 2) + Math.pow(Math.abs(pairs[0][1] - pairs[1][1]), 2));\n  }\n\n  /**\n  * groupOverlappingSegments - group overlapping segments together\n  *\n  * @param {array} segments - an array of SegmentNode's\n  * @return {object} groups - groups of overlapping segments\n  */\n  static groupOverlappingSegments(segments) {\n    const groups = {};\n    const segmentsByHeightAndCumulative = _.groupBy(segments, (segment) => {\n      let c = false;\n      if (typeof segment.meta.cumulative === 'undefined') {\n        c = false;\n      } else {\n        c = segment.meta.cumulative;\n      }\n      return `${segment.y}:${c}`;\n    });\n    Object.keys(segmentsByHeightAndCumulative).forEach((key) => {\n      const values = segmentsByHeightAndCumulative[key];\n      values.sort((a, b) => {\n        return a.x - b.x;\n      });\n      let i = 0;\n      const points = [];\n      while (i < values.length) {\n        if (i === 0) {\n          points[0] = values[0];\n          const groupName = `${values[0].w}:${key}`;\n          groups[groupName] = [values[0]];\n          i++;\n          continue; // eslint-disable-line no-continue\n        }\n        const lastIdx = points.length - 1;\n        if (lastIdx < 0) {\n          break;\n        }\n        const lastPoint = points[lastIdx];\n        if (values[i].x >= lastPoint.x && values[i].w <= lastPoint.w) {\n          const groupName = `${lastPoint.w}:${key}`;\n          let group = groups[groupName];\n          if (typeof group === 'undefined') {\n            group = [];\n          }\n          group.push(values[i]);\n          i++;\n        } else {\n          points[lastIdx + 1] = values[i];\n          const groupName = `${values[i].w}:${key}`;\n          groups[groupName] = [values[i]];\n          i++;\n        }\n      }\n    });\n    return groups;\n  }\n}\n\n\nmodule.exports = SegmentNode;\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes/SegmentNode.js","const d3 = require('d3');\nconst _ = require('underscore');\n\nimport Axes from './Axes';\nimport Tooltip from './Tooltip';\nimport Zoom from './Zoom';\nimport Group from './groups/Group';\nimport { InvalidGroupError } from './Errors';\n\n\nconst MINIMUM_CHART_HEIGHT = 300;\n\nclass Chart {\n  /**\n  * Chart - creates a new instance of a chart\n  *\n  * @param {object} options - the options to create a chart\n  * @param {string} containerID - the id of the container div\n  * @param {string} svgcontainerClass - the desired class of the constructed svg element\n  * @param {object} tooltip\n  * @param {number} tooltip.opacity - the background opacity for the tooltip\n  * @param {object} tooltip.template - the compiled template\n  * @param {boolean} scale - scale the svg on window resize @default false\n  * @param {boolean} resize -resize the svg on window resize @default true\n  * @return {object} returns self\n  */\n  constructor(options) {\n    this.options = options;\n    this.drawn = false;\n    this.filters = options.filters || {};\n    this.groups_ = {};\n    return this;\n  }\n\n  /**\n  * init - method to initialize the chart, allows the chart to be re-initialized\n  *  on resize while keeping the current chart data in memory\n  *\n  * @return {object} this\n  */\n  init() {\n    this.setDimensions();\n    const scale = this.options.scale || false;\n    if (scale) {\n      this.root = d3.select(`#${this.options.containerID}`).append('svg').attr('viewBox', `0 0 ${this.viewBoxWidth} ${this.viewBoxHeight}`).attr('preserveAspectRatio', 'xMinYMin meet');\n    } else {\n      this.root = d3.select(`#${this.options.containerID}`).append('svg').attr('width', this.viewBoxWidth).attr('height', this.viewBoxHeight);\n    }\n    this.container = this.root.append('g').attr('class', this.options.svgContainerClass).attr('width', this.getWidth()).attr('height', this.getHeight()).attr('transform', `translate(${this.margins.left}, ${this.margins.top})`);\n    this.axes = new Axes(this, this.options.axes);\n    this.tooltip = new Tooltip(this, this.options);\n    const zoomEnabled = this.options.zoom || false;\n    if (zoomEnabled) {\n      this.zoom = new Zoom(this, this.options);\n    }\n    this.groups = this.container.append('g').attr('class', 'd3cf-groups').attr('transform', `translate(${this.margins.left}, 0)`);\n    return this;\n  }\n\n  /**\n  * setDimensions - method to set the dimensions of the chart based on the current window\n  *\n  */\n  setDimensions() {\n    this.margins = this.options.margins || {\n      left: 40,\n      right: 20,\n      top: 20,\n      bottom: 40,\n    };\n    this.width = this.options.width || document.getElementById(this.options.containerID).offsetWidth - (this.margins.left + this.margins.right);\n    this.height = this.options.height;\n    if (this.height < MINIMUM_CHART_HEIGHT) {\n      this.height = MINIMUM_CHART_HEIGHT;\n    }\n    this.viewBoxWidth = this.width + this.margins.left + this.margins.right;\n    this.viewBoxHeight = this.height + this.margins.top + this.margins.bottom;\n    return this;\n  }\n\n  /**\n  * update - update the width and height attributes of the root and container\n  *  elements. then call update on the chart axes\n  *\n  * @param {array} nodes - an array of {object} for each node\n  * @return {object} this\n  */\n  update(nodes) {\n    this.setDimensions();\n    this.root.attr('width', this.viewBoxWidth).attr('height', this.viewBoxHeight);\n    this.container.attr('width', this.width).attr('height', this.height).attr('transform', `translate(${this.margins.left}, ${this.margins.top})`);\n    if (typeof nodes === 'undefined') {\n      this.axes.update(this.getGroupsNodes(), false);\n    } else {\n      if (nodes instanceof Array) {\n        this.axes.update(nodes, true);\n      } else {\n        this.mergeGroups(nodes);\n        this.axes.update(this.getGroupsNodes(false), true);\n      }\n    }\n    return this;\n  }\n\n  /**\n  * draw - draws the markers on the chart\n  *\n  * @see this will automatically show/hide a warning message if the data\n  * is empty. Do not call super() to override this behavior.\n  *\n  * @param {array} nodes - an array of {object} for each marker\n  */\n  draw(nodes) {\n    if (!this.drawn) {\n      this.drawn = true;\n      this.root.transition().style('opacity', 1);\n    }\n    if (typeof nodes === 'undefined') {\n      if (this.getGroupsSize() <= 0) {\n        this.showWarn();\n        return;\n      }\n    } else {\n      if (nodes instanceof Array) {\n        const group = this.defaultGroup(nodes);\n        if (group.size() <= 0) {\n          this.showWarn();\n          return;\n        }\n      } else {\n        if (this.getGroupsSize() <= 0) {\n          this.showWarn();\n          return;\n        }\n      }\n    }\n    this.removeWarn();\n  }\n\n  /**\n  * defaultGroup - creates a default group if an array is passed to the draw method\n  *\n  * @param {array} nodes - an array of Node's\n  */\n  defaultGroup() {\n    throw new Error('defaultGroup must be implemented.');\n  }\n\n  /**\n  * applyFilters - apply any filters from the chart\n  *\n  * @param {object} filters - an array of filters to apply\n  * @return {array} filtered, the filtered data\n  */\n  applyFilters(nodes, filters) {\n    const filters_ = filters || this.filters;\n    let filtered = [];\n    if (nodes) {\n      filtered = nodes.filter((d) => {\n        let valid = true;\n        const keys = Object.keys(filters_);\n        let i = 0;\n        const keysLen = keys.length;\n        while (i < keysLen) {\n          const key = keys[i++];\n          const f = filters_[key](d);\n          if (typeof f === 'undefined') {\n            valid = false;\n            break;\n          }\n        }\n        if (valid) {\n          return d;\n        }\n      });\n    }\n    return filtered;\n  }\n\n  /**\n  * getWidth\n  *\n  * @return {number} width - (excluding margins) for the root svg\n  */\n  getWidth() {\n    return this.width - (this.margins.left + this.margins.right);\n  }\n\n  /**\n  * getHeigth\n  *\n  * @return {number} width - (excluding margins) for the root svg\n  */\n  getHeight() {\n    return this.height - (this.margins.top + this.margins.bottom);\n  }\n\n  /**\n  * showWarn - shows a warning message in the center of the chart\n  *\n  * @param {string} m - the message to display\n  * @return {object} this\n  */\n  showWarn(m) {\n    const message = m || 'No data to display';\n    if (this.warn) {\n      this.removeWarn();\n    }\n    this.warn = this.container.append('g').style('opacity', 0).attr('class', 'd3cf-warn');\n    this.warn.append('text').attr('text-anchor', 'middle').attr('x', this.width / 2).attr('y', this.getHeight() / 2).text(message);\n    this.warn.transition().style('opacity', 1);\n    return this;\n  }\n\n  /**\n  * removeWarn - removes the warning message from the chart\n  *\n  * @return {object} this\n  */\n  removeWarn() {\n    if (this.warn) {\n      this.warn.remove();\n    }\n    return this;\n  }\n\n  /**\n  * remove - removes the chart from the DOM and any event listeners\n  *\n  * @return {object} this\n  */\n  remove() {\n    if (this.zoom && typeof this.zoom.remove === 'function') this.zoom.remove();\n    if (this.tooltip && typeof this.tooltip.remove === 'function') this.tooltip.remove();\n    if (this.axes && typeof this.axes.remove === 'function') this.axes.remove();\n    if (this.container && typeof this.container.remove === 'function') this.container.remove();\n    if (this.root && typeof this.root.remove === 'function') this.root.remove();\n  }\n\n  /**\n  * destroy - destroys the chart and any associated elements\n  *\n  */\n  destroy() {\n    this.remove();\n    this.zoom = null;\n    this.tooltip = null;\n    this.axes = null;\n    this.container = null;\n    this.root = null;\n    this.resizeHandler = null;\n  }\n\n  /**\n  * addGroup\n  *\n  * @param {object} group - add a group to the chart\n  * @throws {InvalidGroupError} error\n  * @return {Chart} this\n  */\n  addGroup(group) {\n    if (group instanceof Group === false) {\n      throw new InvalidGroupError();\n    }\n    this.groups_[group.id] = group;\n    return this;\n  }\n\n  /**\n  * removeGroup\n  *\n  * @param {string} id - the group to remove\n  * @return {Chart} this\n  */\n  removeGroup(id) {\n    if (this.groups_.hasOwnProperty(id)) {\n      delete this.groups_[id];\n    }\n    return this;\n  }\n\n  /**\n  * getGroups - returns the groups associated with this chart\n  *\n  * @return {array} groups - the groups associated with this chart\n  */\n  getGroups() {\n    return Object.values(this.groups_);\n  }\n\n  /**\n  * getGroups - returns the size of all the groups\n  *\n  * @param {boolean} shouldFilter - should the nodes be filtered by domain\n  * @return {Number} size - the size of all the groups\n  */\n  getGroupsSize(shouldFilter) {\n    return this.getGroups().reduce((prev, nextObj) => {\n      if (shouldFilter) {\n        return prev + this.applyFilters(nextObj.getNodes()).length;\n      }\n      const filters = Object.assign({}, this.filters);\n      if (filters.hasOwnProperty('_domain')) {\n        delete filters._domain;\n      }\n      return prev + this.applyFilters(nextObj.getNodes(), filters).length;\n    }, 0);\n  }\n\n  /**\n  * getGroupsNodes - returns all the nodes for each group\n  *\n  * @param {boolean} shouldFilter - should the nodes be filtered by domain\n  * @return {array} nodes - an array of nodes\n  */\n  getGroupsNodes(shouldFilter) {\n    return this.getGroups().reduce((prevArr, nextObj) => {\n      if (shouldFilter) {\n        return prevArr.concat(this.applyFilters(nextObj.getNodes()));\n      }\n      const filters = Object.assign({}, this.filters);\n      if (filters.hasOwnProperty('_domain')) {\n        delete filters._domain;\n      }\n      return prevArr.concat(this.applyFilters(nextObj.getNodes(), filters));\n    }, []);\n  }\n\n  /**\n  * mergeGroups - merge groups from data passed directly to the draw method\n  *\n  * @param {object} nodes - a grouping of nodes\n  */\n  mergeGroups() {\n    throw new Error('mergeGroups must be implemented.');\n  }\n\n  /**\n  * addFilter - add a filter to the chart\n  *\n  * @param {string} name - the name of the filter\n  * @param {function} fn - the function to be applied to the data\n  * @return {object} this\n  */\n  addFilter(name, fn) {\n    this.filters[name] = _.bind(fn, this);\n    return this;\n  }\n\n  /**\n  * removeFilter - removes a filter from the chart\n  *\n  * @param {string} name - the name of the filter\n  * @return {object} this\n  */\n  removeFilter(name) {\n    if (this.filters[name] !== 'undefined') {\n      delete this.filters[name];\n    }\n    return this;\n  }\n\n  /**\n  * resetZoom - resets the zoom of the axes\n  *\n  */\n  resetZoom() {\n    if (this.zoom) {\n      return this.zoom.reset();\n    }\n  }\n}\n\n\nmodule.exports = Chart;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Chart.js","const d3 = require('d3');\nconst _ = require('underscore');\n\nclass Tooltip {\n  /**\n  * Tooltip - allows for an HTML div to be faded in/out on mouseover of a marker\n  *\n  * @param {object} plot - the plot append the tooltip\n  * @param {object} options - the options for the plot\n  * @param {object} options.tooltip - the options for the tooltip\n  * @param {number} options.opacity - the opacity of the tooltip\n  * @param {object} options.template - an underscore compiled template\n  * @return {object} this\n  */\n  constructor(plot, options) {\n    this.tooltipOpts = options.tooltip || {\n      'opacity': 1,\n      'template': _.template('<span style=\"font-weight: bold;\"><%= obj.id %></span><p>x1: <%= obj.x1 %> x2: <% if (obj.x2) { %> <%= obj.x2 %> <% } %> y: <%= obj.y1 %></p>'),\n    };\n    this.template = this.tooltipOpts.template || _.template('<span style=\"font-weight: bold;\"><%= obj.id %></span><p>x1: <%= obj.x1 %> x2: <%= obj.x2 %> y: <%= obj.y1 %></p>');\n    this.opacity = this.tooltipOpts.opacity || 1;\n    this.element = d3.select('body').append('div').attr('class', 'd3cf-tooltip').style('opacity', 0).html(this.template({}));\n    return this;\n  }\n\n  /**\n  * mouseover - unbound method for mouseover event\n  *\n  * @param {object} d - the data\n  * @param {number} x - the x coordinate\n  * @param {number} y - the y coordinate\n  * @return {object} this\n  */\n  mouseover(d, x, y) {\n    const box = this.element.node().getBoundingClientRect();\n    if ((x + box.width) >= (window.innerWidth - 20)) {\n      this.element.html(this.template(d)).style('left', `${((x - 10) - Math.floor(box.width))}px`).style('top', `${y}px`);\n    } else {\n      this.element.html(this.template(d)).style('left', `${(x + 10)}px`).style('top', `${y}px`);\n    }\n    this.element.transition().duration(200).style('opacity', this.opacity);\n    return this;\n  }\n\n  /**\n  * mouseout - unbound method for mouseout event\n  *\n  * @return {object} this\n  */\n  mouseout() {\n    this.element.transition().duration(500).style('opacity', 0);\n    return this;\n  }\n\n  /**\n  * remove - removes the element from the DOM\n  *\n  */\n  remove() {\n    return this.element.remove();\n  }\n}\n\nmodule.exports = Tooltip;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Tooltip.js","const d3 = require('d3');\nconst _ = require('underscore');\n\nconst MINIMUM_ZOOM_THRESHOLD = 5;\n\nclass Zoom {\n  /**\n  * Zoom - a zoomable interface for a plot\n  *\n  * @param {object} plot - the plot to enable the zooming interface\n  * @param {object} options - the object containing the passed in options to the plot constructor\n  * @return {object} this\n  */\n  constructor(plot, options) {\n    this.plot = plot;\n    this.options = options;\n    this.bandPos = [-1, -1];\n    this.zoomArea = {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n    };\n    this.drag = d3.drag();\n    this.zoomGroup = plot.container.append('g').attr('class', 'd3cf-zoom');\n    this.zoomBand = this.zoomGroup.append('rect').attr('width', 0).attr('height', 0).attr('x', 0).attr('y', 0).attr('class', 'd3cf-zoomBand');\n    this.zoomOverlay = this.zoomGroup.append('rect').attr('width', plot.getWidth()).attr('height', plot.getHeight()).attr('transform', `translate(${plot.margins.left}, 0)`).attr('class', 'd3cf-zoomOverlay').call(this.drag);\n    this.isZoomed = false;\n    const self = this; // eslint-disable-line consistent-this\n    this.drag.on('start.plot', function() { // eslint-disable-line func-names\n      // Note: @ (this) is not the Zoom class but the DOM event\n      const pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n      self.dragStart = pos;\n    });\n    this.drag.on('drag.plot', function() { // eslint-disable-line func-names\n      // Note: @ (this) is not the Zoom class but the DOM event\n      const pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n      _.bind(self.ondrag, self)(pos);\n    });\n    this.drag.on('end.plot', function() { // eslint-disable-line func-names\n      // Note: @ (this) is not the Zoom class but the DOM event\n      const pos = d3.mouse(this); // eslint-disable-line no-invalid-this\n      let zoomX = false;\n      if (Math.abs(self.dragStart[0] - pos[0]) > MINIMUM_ZOOM_THRESHOLD) {\n        zoomX = true;\n      }\n      let zoomY = false;\n      if (Math.abs(self.dragStart[1] - pos[1]) > MINIMUM_ZOOM_THRESHOLD) {\n        zoomY = true;\n      }\n      _.bind(self.ondragend, self)(pos, zoomX && zoomY);\n    });\n  }\n\n  /*\n  * ondrag - the event handler for the ondrag event\n  * @param {array} pos, the x,y position of the mouse\n  */\n  ondrag(pos) {\n    if (pos[0] < this.bandPos[0]) {\n      this.zoomBand.attr('transform', `translate(${(pos[0] + this.plot.margins.left)}, ${this.bandPos[1]})`);\n    }\n    if (pos[1] < this.bandPos[1]) {\n      this.zoomBand.attr('transform', `translate(${(pos[0] + this.plot.margins.left)}, ${pos[1]})`);\n    }\n    if (pos[1] < this.bandPos[1] && pos[0] > this.bandPos[0]) {\n      this.zoomBand.attr('transform', `translate(${(this.bandPos[0] + this.plot.margins.left)}, ${pos[1]})`);\n    }\n    if (this.bandPos[0] === -1) {\n      this.bandPos = pos;\n      this.zoomBand.attr('transform', `translate(${(this.bandPos[0] + this.plot.margins.left)}, ${this.bandPos[1]})`);\n    }\n    this.zoomBand.transition().duration(1).attr('width', Math.abs(this.bandPos[0] - pos[0])).attr('height', Math.abs(this.bandPos[1] - pos[1]));\n  }\n\n  /**\n  * ondragend - the event handler for the ondragend event\n  *\n  * @param {array} pos - the x,y position of the mouse\n  */\n  ondragend(pos, zoom) {\n    const x1 = this.plot.axes.xScale.invert(this.bandPos[0]);\n    const x2 = this.plot.axes.xScale.invert(pos[0]);\n    if (x1 < x2) {\n      this.zoomArea.x1 = x1;\n      this.zoomArea.x2 = x2;\n    } else {\n      this.zoomArea.x1 = x2;\n      this.zoomArea.x2 = x1;\n    }\n    const y1 = this.plot.axes.yScale.invert(pos[1]);\n    const y2 = this.plot.axes.yScale.invert(this.bandPos[1]);\n    if (y1 < y2) {\n      this.zoomArea.y1 = y1;\n      this.zoomArea.y2 = y2;\n    } else {\n      this.zoomArea.y1 = y2;\n      this.zoomArea.y2 = y1;\n    }\n    this.bandPos = [-1, -1];\n    this.zoomBand.transition().attr('width', 0).attr('height', 0).attr('x', this.bandPos[0]).attr('y', this.bandPos[1]);\n    if (zoom) {\n      this.zoom();\n    }\n  }\n\n  /**\n  * zoom - the zooming method called an the end of ondragend\n  *\n  */\n  zoom() {\n    this.isZoomed = true;\n    this.plot.axes.zoom(this.zoomArea);\n    this.plot.draw();\n  }\n\n  /**\n  * resetZoom - reset the plot zoom back to the original viewBox\n  *\n  */\n  reset() {\n    this.isZoomed = false;\n    this.plot.axes.reset();\n    this.plot.draw();\n  }\n\n  /**\n  * remove - remove the zoom interface from a plot\n  *\n  */\n  remove() {\n    this.zoomGroup.remove();\n    this.drag.on('drag.plot', null);\n    this.drag.on('end.plot', null);\n    this.drag.on('start.plot', null);\n  }\n}\n\n\nmodule.exports = Zoom;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Zoom.js","const _ = require('underscore');\n\nimport Chart from './Chart';\nimport BarGroup from './groups/BarGroup';\n\n\nclass BarChart extends Chart {\n  /**\n  * BarChart - constructs the root SVG element to contain the BarChart\n  * @param {object} options, the options to create a BarChart\n  * @param {string} containerID, the id of the BarChart container div\n  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n  * @param {object} tooltip,\n  * @param {number} tooltip.opacity, the background opacity for the tooltip\n  * @param {object} tooltip.template, the compiled template\n  * @param {boolean} scale, scale the svg on window resize @default false\n  * @param {boolean} resize, resize the svg on window resize @default true\n  * @returns {object} this, returns self\n  */\n  constructor(options) {\n    super(options);\n    this.init();\n    return this;\n  }\n\n  /**\n  * init - method to set/re-set the resizeHandler\n  * @returns {object} this\n  */\n  init() {\n    super.init();\n    const resizeEnabled = this.options.resize || true;\n    if (resizeEnabled) {\n      this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n      return window.addEventListener('resize', this.resizeHandler);\n    }\n  }\n\n  /**\n  * draw - draw using d3 select.data.enter workflow\n  * @param {array} data, an array of {object} for each marker\n  * @returns {object} this\n  */\n  draw(data) {\n    super.draw(data);\n    const groups = this.groups.selectAll('.group').data(this.getGroups(), (d) => {\n      return d.id;\n    });\n    groups.enter().append((group) => {\n      return group.detached();\n    });\n    groups.each((group) => {\n      return group.update();\n    });\n    groups.exit().remove();\n    return this;\n  }\n\n  /**\n  * defaultGroup - creates a default group if an array is passed to the draw method\n  * @param {array} nodes, an array of Node's\n  */\n  defaultGroup(nodes) {\n    let group = this.getGroups().find((g) => {\n      return g.id === 'default_';\n    });\n    if (typeof group === 'undefined') {\n      if (this.options.group && this.options.group.onEnter) {\n        group = new BarGroup(this, {id: 'default_', onEnter: this.options.group.onEnter});\n      } else {\n        group = new BarGroup(this, {id: 'default_'});\n      }\n    }\n    nodes.forEach((d) => {\n      return group.addNode(d);\n    });\n    return group;\n  }\n\n  /**\n  * mergeGroups - merge groups from data passed directly to the draw method\n  * @override\n  * @param {object} groups, a set of Groups\n  * @return {boolean} hasChanged\n  */\n  mergeGroups(groups) {\n    const notMerged = Object.keys(this.groups_);\n    let addedNewGroup = false;\n    Object.keys(groups).forEach((k) => {\n      let idx = -1;\n      let group = this.groups_[k];\n      if (typeof group === 'undefined') {\n        addedNewGroup = true;\n        if (groups[k] instanceof BarGroup) {\n          group = groups[k];\n          this.addGroup(group);\n        } else {\n          // TODO: allow the user to pass in an object with `data` array\n          throw new Error('Must be instance of a d3cf Group.');\n        }\n      } else {\n        idx = notMerged.indexOf(k);\n        if (idx >= 0) {\n          notMerged.splice(idx, 1);\n          // merge new group data into the existing group\n          groups[k].getNodes().forEach((n) => {\n            group.addNode(n);\n          });\n        }\n      }\n    });\n    // remove the groups that have not been sliced\n    if (notMerged.length > 0) {\n      notMerged.forEach((k) => {\n        this.removeGroup(k);\n      });\n      // if we have removed an existing group\n      return true;\n    }\n    // if we have merged in new groups\n    if (addedNewGroup) {\n      return true;\n    }\n    // otherwise no change\n    return false;\n  }\n\n  /**\n  * update the dimensions of the chart (axes, gridlines, then redraw)\n  * @param {array} data, an array of {object} for each marker\n  * @returns {object} this\n  */\n  update(data) {\n    super.update(data);\n    this.draw(data);\n    return this;\n  }\n\n  /**\n  * remove - removes the chart from the DOM and any event listeners\n  * @return {object} this\n  */\n  remove() {\n    super.remove();\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler);\n    }\n    return this;\n  }\n\n  /**\n  * resize - re-renders the chart\n  * @return {object} this\n  */\n  resize() {\n    this.update();\n    return this;\n  }\n}\n\n\nmodule.exports = BarChart;\n\n\n\n// WEBPACK FOOTER //\n// ./src/BarChart.js","const _ = require('underscore');\n\nimport Chart from './Chart';\nimport NodeGroup from './groups/NodeGroup';\n\n\nclass ScatterPlot extends Chart {\n  /**\n  * ScatterPlot - constructs the root SVG element to contain the ScatterPlot\n  *\n  * @param {object} options - the options to create a ScatterPlot\n  * @param {string} containerID - the id of the ScatterPlot container div\n  * @param {string} svgcontainerClass - the desired class of the constructed svg element\n  * @param {object} tooltip\n  * @param {number} tooltip.opacity - the background opacity for the tooltip\n  * @param {object} tooltip.template - the compiled template\n  * @param {boolean} scale - scale the svg on window resize @default false\n  * @param {boolean} resize - resize the svg on window resize @default true\n  * @returns {object} this - returns self\n  */\n  constructor(options) {\n    super(options);\n    this.init();\n    return this;\n  }\n\n  /**\n  * init - method to set/re-set the resizeHandler\n  *\n  * @returns {object} this\n  */\n  init() {\n    super.init();\n    const resizeEnabled = this.options.resize || true;\n    if (resizeEnabled) {\n      this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n      return window.addEventListener('resize', this.resizeHandler);\n    }\n  }\n\n  /**\n  * draw - draw using d3 select.data.enter workflow\n  *\n  * @param {array} data - an array of {object} for each marker\n  * @returns {object} this\n  */\n  draw(data) {\n    super.draw(data);\n    const groups = this.groups.selectAll('.group').data(this.getGroups(), (d) => {\n      return d.id;\n    });\n    groups.enter().append((group) => {\n      return group.detached();\n    });\n    groups.each((group) => {\n      return group.update();\n    });\n    groups.exit().remove();\n    return this;\n  }\n\n  /**\n  * defaultGroup - creates a default group if an array is passed to the draw method\n  *\n  * @param {array} nodes - an array of Node's\n  */\n  defaultGroup(nodes) {\n    let group = this.getGroups().find((g) => {\n      return g.id === 'default_';\n    });\n    if (typeof group === 'undefined') {\n      if (this.options.group && this.options.group.onEnter) {\n        group = new NodeGroup(this, {id: 'default_', onEnter: this.options.group.onEnter});\n      } else {\n        group = new NodeGroup(this, {id: 'default_'});\n      }\n    }\n    nodes.forEach((d) => {\n      return group.addNode(d);\n    });\n    return group;\n  }\n\n  /**\n  * mergeGroups - merge groups from data passed directly to the draw method\n  *\n  * @param {object} groups - a set of Groups\n  * @return {boolean} shouldReset - should the axes domain be reset to currentMinMax\n  */\n  mergeGroups(groups) {\n    const notMerged = Object.keys(this.groups_);\n    let addedNewGroup = false;\n    Object.keys(groups).forEach((k) => {\n      let idx = -1;\n      let group = this.groups_[k];\n      if (typeof group === 'undefined') {\n        addedNewGroup = true;\n        if (groups[k] instanceof NodeGroup) {\n          group = groups[k];\n          this.addGroup(group);\n        } else {\n          // TODO: allow the user to pass in an object with `data` array\n          throw new Error('Must be instance of a d3cf Group.');\n        }\n      } else {\n        idx = notMerged.indexOf(k);\n        if (idx >= 0) {\n          notMerged.splice(idx, 1);\n          // merge new group data into the existing group\n          groups[k].getNodes().forEach((n) => {\n            group.addNode(n);\n          });\n        }\n      }\n    });\n    // remove the groups that have not been sliced\n    if (notMerged.length > 0) {\n      notMerged.forEach((k) => {\n        this.removeGroup(k);\n      });\n      // if we have removed an existing group from the plot\n      // then we should set the axes to the currentMinMax\n      return true;\n    }\n    // if we have merged in new groups and the axes have been initialized\n    // then we should set the axes to the currentMinMax\n    if (addedNewGroup && this.axes.initialized === true) {\n      return true;\n    }\n    // do not set the axes\n    return false;\n  }\n\n  /**\n  * update the dimensions of the plot (axes, gridlines, then redraw)\n  *\n  * @param {array} data - an array of {object} for each marker\n  * @returns {object} this\n  */\n  update(data) {\n    super.update(data);\n    this.draw(data);\n    return this;\n  }\n\n  /**\n  * remove - removes the plot from the DOM and any event listeners\n  *\n  * @return {object} this\n  */\n  remove() {\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler);\n    }\n    return this;\n  }\n\n  /**\n  * resize - re-renders the plot\n  *\n  * @return {object} this\n  */\n  resize() {\n    this.update();\n    return this;\n  }\n\n  /*\n  * resetZoom - resets the zoom of the axes\n  *\n  */\n  resetZoom() {\n    if (this.zoom) {\n      return this.zoom.reset();\n    }\n  }\n}\n\n\nmodule.exports = ScatterPlot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/ScatterPlot.js","const _ = require('underscore');\n\nimport Chart from './Chart';\nimport LineGroup from './groups/LineGroup';\n\n\nclass LineChart extends Chart {\n  /**\n  * LineChart - constructs the root SVG element to contain the LineChart\n  * @param {object} options, the options to create a LineChart\n  * @param {string} containerID, the id of the LineChart container div\n  * @param {string} svgcontainerClass, the desired class of the constructed svg element\n  * @param {object} tooltip,\n  * @param {number} tooltip.opacity, the background opacity for the tooltip\n  * @param {object} tooltip.template, the compiled template\n  * @param {boolean} scale, scale the svg on window resize @default false\n  * @param {boolean} resize, resize the svg on window resize @default true\n  * @returns {object} this, returns self\n  */\n  constructor(options) {\n    super(options);\n    this.init();\n    return this;\n  }\n\n  /**\n  * init - method to set/re-set the resizeHandler\n  * @returns {object} this\n  */\n  init() {\n    super.init();\n    const resizeEnabled = this.options.resize || true;\n    if (resizeEnabled) {\n      this.resizeHandler = _.debounce(_.bind(this.resize, this), 500);\n      return window.addEventListener('resize', this.resizeHandler);\n    }\n  }\n\n  /**\n  * draw - draw using d3 select.data.enter workflow\n  * @param {array} data, an array of {object} for each marker\n  * @returns {object} this\n  */\n  draw(data) {\n    super.draw(data);\n    const groups = this.groups.selectAll('.group').data(this.getGroups(), (d) => {\n      return d.id;\n    });\n    groups.enter().append((group) => {\n      return group.detached();\n    });\n    groups.each((group) => {\n      return group.update();\n    });\n    groups.exit().remove();\n    return this;\n  }\n\n  /**\n  * defaultGroup - creates a default group if an array is passed to the draw method\n  * @param {array} nodes, an array of Node's\n  */\n  defaultGroup(nodes) {\n    let group = this.getGroups().find((g) => {\n      return g.id === 'default_';\n    });\n    if (typeof group === 'undefined') {\n      if (this.options.group && this.options.group.onEnter) {\n        group = new LineGroup(this, {id: 'default_', onEnter: this.options.group.onEnter});\n      } else {\n        group = new LineGroup(this, {id: 'default_'});\n      }\n    }\n    nodes.forEach((d) => {\n      return group.addNode(d);\n    });\n    return group;\n  }\n\n  /**\n  * mergeGroups - merge groups from data passed directly to the draw method\n  * @override\n  * @param {object} groups, a set of Groups\n  * @return {boolean} hasChanged\n  */\n  mergeGroups(groups) {\n    const notMerged = Object.keys(this.groups_);\n    let addedNewGroup = false;\n    Object.keys(groups).forEach((k) => {\n      let idx = -1;\n      let group = this.groups_[k];\n      if (typeof group === 'undefined') {\n        addedNewGroup = true;\n        if (groups[k] instanceof LineGroup) {\n          group = groups[k];\n          this.addGroup(group);\n        } else {\n          // TODO: allow the user to pass in an object with `data` array\n          throw new Error('Must be instance of a d3cf Group.');\n        }\n      } else {\n        idx = notMerged.indexOf(k);\n        if (idx >= 0) {\n          notMerged.splice(idx, 1);\n          // merge new group data into the existing group\n          groups[k].getNodes().forEach((n) => {\n            group.addNode(n);\n          });\n        }\n      }\n    });\n    // remove the groups that have not been sliced\n    if (notMerged.length > 0) {\n      notMerged.forEach((k) => {\n        this.removeGroup(k);\n      });\n      // if we have removed an existing group\n      return true;\n    }\n    // if we have merged in new groups\n    if (addedNewGroup) {\n      return true;\n    }\n    // otherwise no change\n    return false;\n  }\n\n  /**\n  * update the dimensions of the chart (axes, gridlines, then redraw)\n  * @param {array} data, an array of {object} for each marker\n  * @returns {object} this\n  */\n  update(data) {\n    super.update(data);\n    this.draw(data);\n    return this;\n  }\n\n  /**\n  * remove - removes the chart from the DOM and any event listeners\n  * @return {object} this\n  */\n  remove() {\n    super.remove();\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler);\n    }\n    return this;\n  }\n\n  /**\n  * resize - re-renders the chart\n  * @return {object} this\n  */\n  resize() {\n    this.update();\n    return this;\n  }\n}\n\n\nmodule.exports = LineChart;\n\n\n\n// WEBPACK FOOTER //\n// ./src/LineChart.js"],"sourceRoot":""}